// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ConsumptionAlertOutcomeEnum.
const (
	ConsumptionAlertOutcomeEnumN0 ConsumptionAlertOutcomeEnum = 0
	ConsumptionAlertOutcomeEnumN1 ConsumptionAlertOutcomeEnum = 1
)

// Defines values for ConsumptionHabitOutcomeEnum.
const (
	ConsumptionHabitOutcomeEnumN0 ConsumptionHabitOutcomeEnum = 0
	ConsumptionHabitOutcomeEnumN1 ConsumptionHabitOutcomeEnum = 1
	ConsumptionHabitOutcomeEnumN2 ConsumptionHabitOutcomeEnum = 2
	ConsumptionHabitOutcomeEnumN3 ConsumptionHabitOutcomeEnum = 3
	ConsumptionHabitOutcomeEnumN4 ConsumptionHabitOutcomeEnum = 4
)

// Defines values for DeviceType.
const (
	DeviceTypeN0   DeviceType = 0
	DeviceTypeN1   DeviceType = 1
	DeviceTypeN2   DeviceType = 2
	DeviceTypeN255 DeviceType = 255
	DeviceTypeN3   DeviceType = 3
	DeviceTypeN32  DeviceType = 32
	DeviceTypeN4   DeviceType = 4
	DeviceTypeN5   DeviceType = 5
	DeviceTypeN6   DeviceType = 6
	DeviceTypeN7   DeviceType = 7
	DeviceTypeN8   DeviceType = 8
)

// Defines values for DoorDirectionEnum.
const (
	DoorDirectionEnumN0 DoorDirectionEnum = 0
	DoorDirectionEnumN1 DoorDirectionEnum = 1
	DoorDirectionEnumN2 DoorDirectionEnum = 2
	DoorDirectionEnumN3 DoorDirectionEnum = 3
)

// Defines values for DoorSide.
const (
	DoorSideN0 DoorSide = 0
	DoorSideN1 DoorSide = 1
	DoorSideN2 DoorSide = 2
)

// Defines values for DoorStatusEnum.
const (
	DoorStatusEnumN10 DoorStatusEnum = 10
	DoorStatusEnumN11 DoorStatusEnum = 11
	DoorStatusEnumN12 DoorStatusEnum = 12
	DoorStatusEnumN13 DoorStatusEnum = 13
	DoorStatusEnumN4  DoorStatusEnum = 4
	DoorStatusEnumN6  DoorStatusEnum = 6
	DoorStatusEnumN8  DoorStatusEnum = 8
)

// Defines values for HouseholdInviteStatus.
const (
	HouseholdInviteStatusN0 HouseholdInviteStatus = 0
	HouseholdInviteStatusN1 HouseholdInviteStatus = 1
	HouseholdInviteStatusN2 HouseholdInviteStatus = 2
)

// Defines values for PetGenderEnum.
const (
	PetGenderEnumN0 PetGenderEnum = 0
	PetGenderEnumN1 PetGenderEnum = 1
)

// Defines values for RequestChangeStateResponseStatus.
const (
	RequestChangeStateResponseStatusN0 RequestChangeStateResponseStatus = 0
	RequestChangeStateResponseStatusN1 RequestChangeStateResponseStatus = 1
	RequestChangeStateResponseStatusN2 RequestChangeStateResponseStatus = 2
	RequestChangeStateResponseStatusN3 RequestChangeStateResponseStatus = 3
	RequestChangeStateResponseStatusN4 RequestChangeStateResponseStatus = 4
	RequestChangeStateResponseStatusN5 RequestChangeStateResponseStatus = 5
)

// Defines values for SpayedEnum.
const (
	SpayedEnumN0 SpayedEnum = 0
	SpayedEnumN1 SpayedEnum = 1
	SpayedEnumN2 SpayedEnum = 2
)

// Defines values for SpecialProfiles.
const (
	SpecialProfilesN0 SpecialProfiles = 0
	SpecialProfilesN1 SpecialProfiles = 1
	SpecialProfilesN2 SpecialProfiles = 2
	SpecialProfilesN3 SpecialProfiles = 3
	SpecialProfilesN4 SpecialProfiles = 4
	SpecialProfilesN5 SpecialProfiles = 5
	SpecialProfilesN6 SpecialProfiles = 6
)

// Defines values for SubstanceTypesEnum.
const (
	SubstanceTypesEnumN0 SubstanceTypesEnum = 0
	SubstanceTypesEnumN1 SubstanceTypesEnum = 1
	SubstanceTypesEnumN2 SubstanceTypesEnum = 2
)

// Defines values for TimelineEventType.
const (
	TimelineEventTypeN0     TimelineEventType = 0
	TimelineEventTypeN1     TimelineEventType = 1
	TimelineEventTypeN10    TimelineEventType = 10
	TimelineEventTypeN1000  TimelineEventType = 1000
	TimelineEventTypeN10000 TimelineEventType = 10000
	TimelineEventTypeN10001 TimelineEventType = 10001
	TimelineEventTypeN10002 TimelineEventType = 10002
	TimelineEventTypeN1001  TimelineEventType = 1001
	TimelineEventTypeN1002  TimelineEventType = 1002
	TimelineEventTypeN1003  TimelineEventType = 1003
	TimelineEventTypeN1004  TimelineEventType = 1004
	TimelineEventTypeN1005  TimelineEventType = 1005
	TimelineEventTypeN1006  TimelineEventType = 1006
	TimelineEventTypeN1007  TimelineEventType = 1007
	TimelineEventTypeN11    TimelineEventType = 11
	TimelineEventTypeN1100  TimelineEventType = 1100
	TimelineEventTypeN1102  TimelineEventType = 1102
	TimelineEventTypeN1103  TimelineEventType = 1103
	TimelineEventTypeN1104  TimelineEventType = 1104
	TimelineEventTypeN1105  TimelineEventType = 1105
	TimelineEventTypeN1106  TimelineEventType = 1106
	TimelineEventTypeN1107  TimelineEventType = 1107
	TimelineEventTypeN1108  TimelineEventType = 1108
	TimelineEventTypeN1109  TimelineEventType = 1109
	TimelineEventTypeN1110  TimelineEventType = 1110
	TimelineEventTypeN1111  TimelineEventType = 1111
	TimelineEventTypeN1112  TimelineEventType = 1112
	TimelineEventTypeN1113  TimelineEventType = 1113
	TimelineEventTypeN1114  TimelineEventType = 1114
	TimelineEventTypeN1115  TimelineEventType = 1115
	TimelineEventTypeN12    TimelineEventType = 12
	TimelineEventTypeN1200  TimelineEventType = 1200
	TimelineEventTypeN1201  TimelineEventType = 1201
	TimelineEventTypeN13    TimelineEventType = 13
	TimelineEventTypeN1300  TimelineEventType = 1300
	TimelineEventTypeN1301  TimelineEventType = 1301
	TimelineEventTypeN1302  TimelineEventType = 1302
	TimelineEventTypeN1303  TimelineEventType = 1303
	TimelineEventTypeN1304  TimelineEventType = 1304
	TimelineEventTypeN1305  TimelineEventType = 1305
	TimelineEventTypeN1306  TimelineEventType = 1306
	TimelineEventTypeN14    TimelineEventType = 14
	TimelineEventTypeN1600  TimelineEventType = 1600
	TimelineEventTypeN1601  TimelineEventType = 1601
	TimelineEventTypeN1602  TimelineEventType = 1602
	TimelineEventTypeN1603  TimelineEventType = 1603
	TimelineEventTypeN1604  TimelineEventType = 1604
	TimelineEventTypeN1605  TimelineEventType = 1605
	TimelineEventTypeN1606  TimelineEventType = 1606
	TimelineEventTypeN1607  TimelineEventType = 1607
	TimelineEventTypeN1608  TimelineEventType = 1608
	TimelineEventTypeN1609  TimelineEventType = 1609
	TimelineEventTypeN1610  TimelineEventType = 1610
	TimelineEventTypeN17    TimelineEventType = 17
	TimelineEventTypeN18    TimelineEventType = 18
	TimelineEventTypeN19    TimelineEventType = 19
	TimelineEventTypeN19999 TimelineEventType = 19999
	TimelineEventTypeN2     TimelineEventType = 2
	TimelineEventTypeN20    TimelineEventType = 20
	TimelineEventTypeN2000  TimelineEventType = 2000
	TimelineEventTypeN20000 TimelineEventType = 20000
	TimelineEventTypeN20001 TimelineEventType = 20001
	TimelineEventTypeN20002 TimelineEventType = 20002
	TimelineEventTypeN20003 TimelineEventType = 20003
	TimelineEventTypeN20004 TimelineEventType = 20004
	TimelineEventTypeN20005 TimelineEventType = 20005
	TimelineEventTypeN20006 TimelineEventType = 20006
	TimelineEventTypeN20007 TimelineEventType = 20007
	TimelineEventTypeN20008 TimelineEventType = 20008
	TimelineEventTypeN20009 TimelineEventType = 20009
	TimelineEventTypeN20010 TimelineEventType = 20010
	TimelineEventTypeN20011 TimelineEventType = 20011
	TimelineEventTypeN20012 TimelineEventType = 20012
	TimelineEventTypeN20399 TimelineEventType = 20399
	TimelineEventTypeN20400 TimelineEventType = 20400
	TimelineEventTypeN20401 TimelineEventType = 20401
	TimelineEventTypeN20402 TimelineEventType = 20402
	TimelineEventTypeN20403 TimelineEventType = 20403
	TimelineEventTypeN20404 TimelineEventType = 20404
	TimelineEventTypeN20405 TimelineEventType = 20405
	TimelineEventTypeN20406 TimelineEventType = 20406
	TimelineEventTypeN20407 TimelineEventType = 20407
	TimelineEventTypeN20408 TimelineEventType = 20408
	TimelineEventTypeN20409 TimelineEventType = 20409
	TimelineEventTypeN20410 TimelineEventType = 20410
	TimelineEventTypeN20411 TimelineEventType = 20411
	TimelineEventTypeN20999 TimelineEventType = 20999
	TimelineEventTypeN21    TimelineEventType = 21
	TimelineEventTypeN21000 TimelineEventType = 21000
	TimelineEventTypeN21001 TimelineEventType = 21001
	TimelineEventTypeN21002 TimelineEventType = 21002
	TimelineEventTypeN21003 TimelineEventType = 21003
	TimelineEventTypeN21004 TimelineEventType = 21004
	TimelineEventTypeN21005 TimelineEventType = 21005
	TimelineEventTypeN21006 TimelineEventType = 21006
	TimelineEventTypeN21007 TimelineEventType = 21007
	TimelineEventTypeN21008 TimelineEventType = 21008
	TimelineEventTypeN21009 TimelineEventType = 21009
	TimelineEventTypeN21010 TimelineEventType = 21010
	TimelineEventTypeN21011 TimelineEventType = 21011
	TimelineEventTypeN21012 TimelineEventType = 21012
	TimelineEventTypeN21013 TimelineEventType = 21013
	TimelineEventTypeN21014 TimelineEventType = 21014
	TimelineEventTypeN21015 TimelineEventType = 21015
	TimelineEventTypeN21016 TimelineEventType = 21016
	TimelineEventTypeN21017 TimelineEventType = 21017
	TimelineEventTypeN21018 TimelineEventType = 21018
	TimelineEventTypeN21019 TimelineEventType = 21019
	TimelineEventTypeN21020 TimelineEventType = 21020
	TimelineEventTypeN21999 TimelineEventType = 21999
	TimelineEventTypeN22    TimelineEventType = 22
	TimelineEventTypeN23    TimelineEventType = 23
	TimelineEventTypeN23000 TimelineEventType = 23000
	TimelineEventTypeN23001 TimelineEventType = 23001
	TimelineEventTypeN23002 TimelineEventType = 23002
	TimelineEventTypeN23003 TimelineEventType = 23003
	TimelineEventTypeN23004 TimelineEventType = 23004
	TimelineEventTypeN23005 TimelineEventType = 23005
	TimelineEventTypeN23006 TimelineEventType = 23006
	TimelineEventTypeN23999 TimelineEventType = 23999
	TimelineEventTypeN24    TimelineEventType = 24
	TimelineEventTypeN24999 TimelineEventType = 24999
	TimelineEventTypeN25    TimelineEventType = 25
	TimelineEventTypeN26999 TimelineEventType = 26999
	TimelineEventTypeN28    TimelineEventType = 28
	TimelineEventTypeN28999 TimelineEventType = 28999
	TimelineEventTypeN29    TimelineEventType = 29
	TimelineEventTypeN3     TimelineEventType = 3
	TimelineEventTypeN30    TimelineEventType = 30
	TimelineEventTypeN30000 TimelineEventType = 30000
	TimelineEventTypeN30001 TimelineEventType = 30001
	TimelineEventTypeN31    TimelineEventType = 31
	TimelineEventTypeN32    TimelineEventType = 32
	TimelineEventTypeN33    TimelineEventType = 33
	TimelineEventTypeN34    TimelineEventType = 34
	TimelineEventTypeN35    TimelineEventType = 35
	TimelineEventTypeN36    TimelineEventType = 36
	TimelineEventTypeN40    TimelineEventType = 40
	TimelineEventTypeN50    TimelineEventType = 50
	TimelineEventTypeN51    TimelineEventType = 51
	TimelineEventTypeN52    TimelineEventType = 52
	TimelineEventTypeN53    TimelineEventType = 53
	TimelineEventTypeN54    TimelineEventType = 54
	TimelineEventTypeN6     TimelineEventType = 6
	TimelineEventTypeN7     TimelineEventType = 7
	TimelineEventTypeN9     TimelineEventType = 9
	TimelineEventTypeN9999  TimelineEventType = 9999
)

// Defines values for UserTimeFormatEnum.
const (
	UserTimeFormatEnumN0 UserTimeFormatEnum = 0
	UserTimeFormatEnumN1 UserTimeFormatEnum = 1
)

// Defines values for UserWeightUnitEnum.
const (
	N0 UserWeightUnitEnum = 0
	N1 UserWeightUnitEnum = 1
)

// AnimoPetResource defines model for AnimoPetResource.
type AnimoPetResource struct {
	BreedId     *int           `json:"breed_id"`
	CreatedAt   *time.Time     `json:"created_at"`
	DateOfBirth *time.Time     `json:"date_of_birth"`
	Gender      *PetGenderEnum `json:"gender,omitempty"`
	HouseholdId *int           `json:"household_id"`
	Id          *int64         `json:"id,omitempty"`
	Name        *string        `json:"name"`
	UpdatedAt   *time.Time     `json:"updated_at"`
	Weight      *string        `json:"weight"`
}

// AnimoPetResourcePaginatedDataResult defines model for AnimoPetResourcePaginatedDataResult.
type AnimoPetResourcePaginatedDataResult struct {
	Data *[]AnimoPetResource      `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// AuthChangePasswordResource defines model for AuthChangePasswordResource.
type AuthChangePasswordResource struct {
	NewPassword *string `json:"new_password"`
	Password    string  `json:"password"`
	UserId      *int    `json:"user_id,omitempty"`
}

// AuthLoginResource defines model for AuthLoginResource.
type AuthLoginResource struct {
	ClientUid string `json:"client_uid"`
	// Deprecated:
	DeviceId     *string             `json:"device_id"`
	EmailAddress openapi_types.Email `json:"email_address"`
	Password     string              `json:"password"`
}

// AuthLoginResponse defines model for AuthLoginResponse.
type AuthLoginResponse struct {
	Data struct {
		Token string       `json:"token"`
		User  UserResource `json:"user"`
	} `json:"data"`
}

// AuthLogoutResource defines model for AuthLogoutResource.
type AuthLogoutResource struct {
	ClientUid *string `json:"client_uid"`
	// Deprecated:
	DeviceId *string `json:"device_id"`
}

// AuthRegisterResource defines model for AuthRegisterResource.
type AuthRegisterResource struct {
	CountryId      int                 `json:"country_id"`
	DeviceId       string              `json:"device_id"`
	EmailAddress   openapi_types.Email `json:"email_address"`
	FirstName      string              `json:"first_name"`
	LanguageId     int                 `json:"language_id"`
	LastName       string              `json:"last_name"`
	MarketingOptIn bool                `json:"marketing_opt_in"`
	Password       string              `json:"password"`
	PhotoId        *int                `json:"photo_id"`
	TimeFormat     *UserTimeFormatEnum `json:"time_format,omitempty"`
	WeightUnits    *UserWeightUnitEnum `json:"weight_units,omitempty"`
}

// AuthResetPasswordRequestResource defines model for AuthResetPasswordRequestResource.
type AuthResetPasswordRequestResource struct {
	EmailAddress string `json:"email_address"`
}

// AuthResetPasswordResource defines model for AuthResetPasswordResource.
type AuthResetPasswordResource struct {
	ClientUid *string `json:"client_uid"`
	// Deprecated:
	DeviceId     *string             `json:"device_id"`
	EmailAddress openapi_types.Email `json:"email_address"`
	Password     string              `json:"password"`
	Token        string              `json:"token"`
}

// BreedResource defines model for BreedResource.
type BreedResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	SpeciesId *int       `json:"species_id,omitempty"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// BreedResourceDataResponse defines model for BreedResourceDataResponse.
type BreedResourceDataResponse struct {
	Data *BreedResource `json:"data,omitempty"`
}

// BreedResourcePaginatedDataResult defines model for BreedResourcePaginatedDataResult.
type BreedResourcePaginatedDataResult struct {
	Data *[]BreedResource         `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// ConditionResource defines model for ConditionResource.
type ConditionResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// ConditionResourceDataResponse defines model for ConditionResourceDataResponse.
type ConditionResourceDataResponse struct {
	Data *ConditionResource `json:"data,omitempty"`
}

// ConditionResourcePaginatedDataResult defines model for ConditionResourcePaginatedDataResult.
type ConditionResourcePaginatedDataResult struct {
	Data *[]ConditionResource     `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// ConsumptionAlertOutcomeEnum defines model for ConsumptionAlertOutcomeEnum.
type ConsumptionAlertOutcomeEnum int

// ConsumptionAlertResource defines model for ConsumptionAlertResource.
type ConsumptionAlertResource struct {
	Amount    *int                         `json:"amount,omitempty"`
	CreatedAt *time.Time                   `json:"created_at,omitempty"`
	Outcome   *ConsumptionAlertOutcomeEnum `json:"outcome,omitempty"`
	Substance *SubstanceTypesEnum          `json:"substance,omitempty"`
}

// ConsumptionHabitOutcomeEnum defines model for ConsumptionHabitOutcomeEnum.
type ConsumptionHabitOutcomeEnum int

// ConsumptionHabitResource defines model for ConsumptionHabitResource.
type ConsumptionHabitResource struct {
	Amount    *int                         `json:"amount,omitempty"`
	CreatedAt *time.Time                   `json:"created_at,omitempty"`
	Outcome   *ConsumptionHabitOutcomeEnum `json:"outcome,omitempty"`
	Substance *SubstanceTypesEnum          `json:"substance,omitempty"`
}

// CountryResource defines model for CountryResource.
type CountryResource struct {
	Code              *string    `json:"code"`
	CreatedAt         *time.Time `json:"created_at"`
	DefaultLanguageId *int       `json:"default_language_id"`
	DefaultTimezoneId *int       `json:"default_timezone_id"`
	Id                *int       `json:"id,omitempty"`
	Name              *string    `json:"name"`
	NativeName        *string    `json:"native_name"`
	UpdatedAt         *time.Time `json:"updated_at"`
}

// CountryResourceDataResponse defines model for CountryResourceDataResponse.
type CountryResourceDataResponse struct {
	Data *CountryResource `json:"data,omitempty"`
}

// CountryResourcePaginatedDataResult defines model for CountryResourcePaginatedDataResult.
type CountryResourcePaginatedDataResult struct {
	Data *[]CountryResource       `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// CreateHouseholdInviteResource defines model for CreateHouseholdInviteResource.
type CreateHouseholdInviteResource struct {
	Code         *string             `json:"code"`
	EmailAddress openapi_types.Email `json:"email_address"`
	Owner        bool                `json:"owner"`
	Write        bool                `json:"write"`
}

// CreateHouseholdResource defines model for CreateHouseholdResource.
type CreateHouseholdResource struct {
	Name       string `json:"name"`
	TimezoneId int    `json:"timezone_id"`
}

// CreatePetPositionResource defines model for CreatePetPositionResource.
type CreatePetPositionResource struct {
	Since time.Time `json:"since"`
	Where *int      `json:"where"`
}

// CreatePetResource defines model for CreatePetResource.
type CreatePetResource struct {
	BreedId     *int                 `json:"breed_id"`
	BreedId2    *int                 `json:"breed_id2"`
	Comments    *string              `json:"comments"`
	Conditions  *[]ConditionResource `json:"conditions"`
	DateOfBirth *time.Time           `json:"date_of_birth"`
	FoodTypeId  *int                 `json:"food_type_id"`
	Gender      *PetGenderEnum       `json:"gender,omitempty"`
	HouseholdId int                  `json:"household_id"`
	Name        string               `json:"name"`
	PhotoId     *int                 `json:"photo_id"`
	Spayed      *SpayedEnum          `json:"spayed,omitempty"`
	SpeciesId   *int                 `json:"species_id"`
	Weight      *float64             `json:"weight"`
}

// DeleteAccountResource defines model for DeleteAccountResource.
type DeleteAccountResource struct {
	Households *[]int `json:"households"`
	Password   string `json:"password"`
}

// DeviceControlPendingResource defines model for DeviceControlPendingResource.
type DeviceControlPendingResource struct {
	RequestId   *string      `json:"request_id"`
	RequestedAt *time.Time   `json:"requested_at,omitempty"`
	RequestedBy *string      `json:"requested_by"`
	State       *interface{} `json:"state"`
}

// DeviceControlResource defines model for DeviceControlResource.
type DeviceControlResource struct {
	Data    *interface{}                    `json:"data"`
	Pending *[]DeviceControlPendingResource `json:"pending"`
	Results *[]DeviceControlResultResource  `json:"results"`
}

// DeviceControlResultResource defines model for DeviceControlResultResource.
type DeviceControlResultResource struct {
	CommittedAt *time.Time                        `json:"committed_at"`
	RequestId   *string                           `json:"request_id"`
	RequestedAt *time.Time                        `json:"requested_at"`
	ResponseId  *string                           `json:"response_id"`
	Status      *RequestChangeStateResponseStatus `json:"status,omitempty"`
	StatusId    *RequestChangeStateResponseStatus `json:"status_id,omitempty"`
}

// DeviceControlStateChangeResource defines model for DeviceControlStateChangeResource.
type DeviceControlStateChangeResource struct {
	ChildStateChanges *[]DeviceControlStateChangeResource `json:"child_state_changes"`
	CommittedAt       *time.Time                          `json:"committed_at"`
	DeviceId          *int                                `json:"device_id"`
	ParentRequestId   *string                             `json:"parent_request_id"`
	RequestId         *string                             `json:"request_id"`
	RequestedAt       *time.Time                          `json:"requested_at"`
	RequestedBy       *int                                `json:"requested_by"`
	ResponseId        *string                             `json:"response_id"`
	State             *interface{}                        `json:"state"`
	Status            *RequestChangeStateResponseStatus   `json:"status,omitempty"`
	StatusId          *RequestChangeStateResponseStatus   `json:"status_id,omitempty"`
}

// DeviceControlStateChangeResourceDataResponse defines model for DeviceControlStateChangeResourceDataResponse.
type DeviceControlStateChangeResourceDataResponse struct {
	Data *DeviceControlStateChangeResource `json:"data,omitempty"`
}

// DeviceControlStateChangeResourceListDataResponse defines model for DeviceControlStateChangeResourceListDataResponse.
type DeviceControlStateChangeResourceListDataResponse struct {
	Data *[]DeviceControlStateChangeResource `json:"data"`
}

// DeviceNeedsUpdateResource defines model for DeviceNeedsUpdateResource.
type DeviceNeedsUpdateResource struct {
	NeedsManualUpdate *bool `json:"needs_manual_update,omitempty"`
}

// DeviceNeedsUpdateResourceDataResponse defines model for DeviceNeedsUpdateResourceDataResponse.
type DeviceNeedsUpdateResourceDataResponse struct {
	Data *DeviceNeedsUpdateResource `json:"data,omitempty"`
}

// DevicePairByCodeResource defines model for DevicePairByCodeResource.
type DevicePairByCodeResource struct {
	PairingCode string `json:"pairing_code"`
}

// DeviceResource defines model for DeviceResource.
type DeviceResource struct {
	Control        *interface{}         `json:"control"`
	CreatedAt      *time.Time           `json:"created_at"`
	DeletedAt      *time.Time           `json:"deleted_at"`
	HouseholdId    *int                 `json:"household_id"`
	Id             *int                 `json:"id,omitempty"`
	Index          *int                 `json:"index"`
	LastActivityAt *time.Time           `json:"last_activity_at"`
	LastNewEventAt *time.Time           `json:"last_new_event_at"`
	MacAddress     *string              `json:"mac_address"`
	Name           *string              `json:"name"`
	PairingAt      *time.Time           `json:"pairing_at"`
	ParentDeviceId *int                 `json:"parent_device_id"`
	ProductId      *int                 `json:"product_id,omitempty"`
	SerialNumber   *string              `json:"serial_number"`
	Status         *interface{}         `json:"status"`
	Tags           *[]DeviceTagResource `json:"tags"`
	UpdatedAt      *time.Time           `json:"updated_at"`
	Version        *int                 `json:"version,omitempty"`
}

// DeviceResourceDataResponse defines model for DeviceResourceDataResponse.
type DeviceResourceDataResponse struct {
	Data *DeviceResource `json:"data,omitempty"`
}

// DeviceResourceIEnumerableDataResponse defines model for DeviceResourceIEnumerableDataResponse.
type DeviceResourceIEnumerableDataResponse struct {
	Data *[]DeviceResource `json:"data"`
}

// DeviceResourcePaginatedDataResult defines model for DeviceResourcePaginatedDataResult.
type DeviceResourcePaginatedDataResult struct {
	Data *[]DeviceResource        `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// DeviceTagDataResource defines model for DeviceTagDataResource.
type DeviceTagDataResource struct {
	Data    *DeviceTagResource              `json:"data,omitempty"`
	Pending *[]DeviceControlPendingResource `json:"pending"`
	Results *[]DeviceControlResultResource  `json:"results"`
}

// DeviceTagResource defines model for DeviceTagResource.
type DeviceTagResource struct {
	CreatedAt *time.Time `json:"created_at"`
	DeviceId  *int       `json:"device_id,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Index     *int       `json:"index,omitempty"`
	Profile   *int       `json:"profile"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// DeviceTagResourceDataResponse defines model for DeviceTagResourceDataResponse.
type DeviceTagResourceDataResponse struct {
	Data *DeviceTagResource `json:"data,omitempty"`
}

// DeviceTagResourcePaginatedDataResult defines model for DeviceTagResourcePaginatedDataResult.
type DeviceTagResourcePaginatedDataResult struct {
	Data *[]DeviceTagResource     `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// DeviceType defines model for DeviceType.
type DeviceType int

// DoorDirectionEnum defines model for DoorDirectionEnum.
type DoorDirectionEnum int

// DoorSide defines model for DoorSide.
type DoorSide int

// DoorStatusEnum defines model for DoorStatusEnum.
type DoorStatusEnum int

// ErrorResource defines model for ErrorResource.
type ErrorResource struct {
	Error   *map[string]*[]string `json:"error"`
	Success *bool                 `json:"success,omitempty"`
}

// FoodTypeResource defines model for FoodTypeResource.
type FoodTypeResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// FoodTypeResourceDataResponse defines model for FoodTypeResourceDataResponse.
type FoodTypeResourceDataResponse struct {
	Data *FoodTypeResource `json:"data,omitempty"`
}

// FoodTypeResourcePaginatedDataResult defines model for FoodTypeResourcePaginatedDataResult.
type FoodTypeResourcePaginatedDataResult struct {
	Data *[]FoodTypeResource      `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// HouseholdInviteResource defines model for HouseholdInviteResource.
type HouseholdInviteResource struct {
	Code         *string                      `json:"code"`
	CreatedAt    *time.Time                   `json:"created_at"`
	DeletedAt    *time.Time                   `json:"deleted_at"`
	EmailAddress *string                      `json:"email_address"`
	Id           *int                         `json:"id,omitempty"`
	Owner        *bool                        `json:"owner"`
	Status       *HouseholdInviteStatus       `json:"status,omitempty"`
	UpdatedAt    *time.Time                   `json:"updated_at"`
	UsedAt       *time.Time                   `json:"used_at"`
	User         *HouseholdInviteUserResource `json:"user,omitempty"`
	Version      *int                         `json:"version,omitempty"`
	Write        *bool                        `json:"write"`
}

// HouseholdInviteResourceDataResponse defines model for HouseholdInviteResourceDataResponse.
type HouseholdInviteResourceDataResponse struct {
	Data *HouseholdInviteResource `json:"data,omitempty"`
}

// HouseholdInviteResourcePaginatedDataResult defines model for HouseholdInviteResourcePaginatedDataResult.
type HouseholdInviteResourcePaginatedDataResult struct {
	Data *[]HouseholdInviteResource `json:"data"`
	Meta *PaginatedMetaDataResult   `json:"meta,omitempty"`
}

// HouseholdInviteStatus defines model for HouseholdInviteStatus.
type HouseholdInviteStatus int

// HouseholdInviteUserResource defines model for HouseholdInviteUserResource.
type HouseholdInviteUserResource struct {
	Acceptor *PublicUserResource `json:"acceptor,omitempty"`
	Creator  *PublicUserResource `json:"creator,omitempty"`
}

// HouseholdResource defines model for HouseholdResource.
type HouseholdResource struct {
	CreatedAt     *time.Time                 `json:"created_at"`
	CreatedUserId *int                       `json:"created_user_id"`
	DeletedAt     *time.Time                 `json:"deleted_at"`
	Id            *int                       `json:"id,omitempty"`
	Invites       *[]HouseholdInviteResource `json:"invites"`
	Name          *string                    `json:"name"`
	ShareCode     *string                    `json:"share_code"`
	Timezone      *TimezoneResource          `json:"timezone,omitempty"`
	TimezoneId    *int                       `json:"timezone_id"`
	UpdatedAt     *time.Time                 `json:"updated_at"`
	Users         *[]HouseholdUserResource   `json:"users"`
	Version       *int                       `json:"version,omitempty"`
}

// HouseholdResourceDataResponse defines model for HouseholdResourceDataResponse.
type HouseholdResourceDataResponse struct {
	Data *HouseholdResource `json:"data,omitempty"`
}

// HouseholdResourcePaginatedDataResult defines model for HouseholdResourcePaginatedDataResult.
type HouseholdResourcePaginatedDataResult struct {
	Data *[]HouseholdResource     `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// HouseholdUserResource defines model for HouseholdUserResource.
type HouseholdUserResource struct {
	CreatedAt *time.Time          `json:"created_at"`
	Id        *int                `json:"id,omitempty"`
	Owner     *bool               `json:"owner"`
	UpdatedAt *time.Time          `json:"updated_at"`
	User      *PublicUserResource `json:"user,omitempty"`
	Version   *int                `json:"version,omitempty"`
	Write     *bool               `json:"write"`
}

// HouseholdUserResourceDataResponse defines model for HouseholdUserResourceDataResponse.
type HouseholdUserResourceDataResponse struct {
	Data *HouseholdUserResource `json:"data,omitempty"`
}

// HouseholdUserResourcePaginatedDataResult defines model for HouseholdUserResourcePaginatedDataResult.
type HouseholdUserResourcePaginatedDataResult struct {
	Data *[]HouseholdUserResource `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// InfoResource defines model for InfoResource.
type InfoResource struct {
	Country  *string `json:"country"`
	Language *string `json:"language"`
}

// InfoResourceDataResponse defines model for InfoResourceDataResponse.
type InfoResourceDataResponse struct {
	Data *InfoResource `json:"data,omitempty"`
}

// InviteResource defines model for InviteResource.
type InviteResource struct {
	Code         *string                      `json:"code"`
	CreatedAt    *time.Time                   `json:"created_at"`
	DeletedAt    *time.Time                   `json:"deleted_at"`
	EmailAddress *string                      `json:"email_address"`
	Id           *int                         `json:"id,omitempty"`
	Owner        *bool                        `json:"owner"`
	Status       *HouseholdInviteStatus       `json:"status,omitempty"`
	UpdatedAt    *time.Time                   `json:"updated_at"`
	UsedAt       *time.Time                   `json:"used_at"`
	User         *HouseholdInviteUserResource `json:"user,omitempty"`
	Version      *int                         `json:"version,omitempty"`
	Write        *bool                        `json:"write"`
}

// InviteResourceDataResponse defines model for InviteResourceDataResponse.
type InviteResourceDataResponse struct {
	Data *InviteResource `json:"data,omitempty"`
}

// InviteResourcePaginatedDataResult defines model for InviteResourcePaginatedDataResult.
type InviteResourcePaginatedDataResult struct {
	Data *[]InviteResource        `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// LanguageResource defines model for LanguageResource.
type LanguageResource struct {
	Code       *string    `json:"code"`
	CreatedAt  *time.Time `json:"created_at"`
	Enabled    *bool      `json:"enabled,omitempty"`
	Id         *int       `json:"id,omitempty"`
	Name       *string    `json:"name"`
	NativeName *string    `json:"native_name"`
	UpdatedAt  *time.Time `json:"updated_at"`
}

// LanguageResourceDataResponse defines model for LanguageResourceDataResponse.
type LanguageResourceDataResponse struct {
	Data *LanguageResource `json:"data,omitempty"`
}

// LanguageResourcePaginatedDataResult defines model for LanguageResourcePaginatedDataResult.
type LanguageResourcePaginatedDataResult struct {
	Data *[]LanguageResource      `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// MeStartResource defines model for MeStartResource.
type MeStartResource struct {
	Devices    *[]DeviceResource    `json:"devices"`
	Households *[]HouseholdResource `json:"households"`
	Pets       *[]PetResource       `json:"pets"`
	Photos     *[]PhotoResource     `json:"photos"`
	Tags       *[]TagResource       `json:"tags"`
	User       *UserResource        `json:"user,omitempty"`
}

// MeStartResourceDataResponse defines model for MeStartResourceDataResponse.
type MeStartResourceDataResponse struct {
	Data *MeStartResource `json:"data,omitempty"`
}

// MovementResource defines model for MovementResource.
type MovementResource struct {
	CreatedAt *time.Time         `json:"created_at"`
	DeviceId  *int               `json:"device_id"`
	Direction *DoorDirectionEnum `json:"direction,omitempty"`
	Id        *int64             `json:"id,omitempty"`
	Side      *DoorSide          `json:"side,omitempty"`
	TagId     *int               `json:"tag_id,omitempty"`
	Type      *DoorStatusEnum    `json:"type,omitempty"`
	UpdatedAt *time.Time         `json:"updated_at"`
	UserId    *int               `json:"user_id"`
}

// NotificationResource defines model for NotificationResource.
type NotificationResource struct {
	CreatedAt *time.Time         `json:"created_at"`
	Id        *int64             `json:"id,omitempty"`
	Text      *string            `json:"text"`
	Type      *TimelineEventType `json:"type,omitempty"`
}

// NotificationResourcePaginatedDataResult defines model for NotificationResourcePaginatedDataResult.
type NotificationResourcePaginatedDataResult struct {
	Data *[]NotificationResource  `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// ObjectDataResponse defines model for ObjectDataResponse.
type ObjectDataResponse struct {
	Data *interface{} `json:"data"`
}

// PaginatedMetaDataResult defines model for PaginatedMetaDataResult.
type PaginatedMetaDataResult struct {
	Count      *int `json:"count,omitempty"`
	Page       *int `json:"page"`
	PageSize   *int `json:"page_size"`
	TotalPages *int `json:"total_pages"`
}

// PetConditionResource defines model for PetConditionResource.
type PetConditionResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// PetConditionResourceDataResponse defines model for PetConditionResourceDataResponse.
type PetConditionResourceDataResponse struct {
	Data *PetConditionResource `json:"data,omitempty"`
}

// PetConditionResourcePaginatedDataResult defines model for PetConditionResourcePaginatedDataResult.
type PetConditionResourcePaginatedDataResult struct {
	Data *[]PetConditionResource  `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// PetConsumption defines model for PetConsumption.
type PetConsumption struct {
	Date             *time.Time `json:"date"`
	TotalConsumption *float64   `json:"total_consumption"`
}

// PetConsumptionResource defines model for PetConsumptionResource.
type PetConsumptionResource struct {
	Activity         *[]PetConsumption   `json:"activity"`
	ConsumptionTime  *int                `json:"consumption_time,omitempty"`
	Date             *time.Time          `json:"date"`
	LastConsumption  *time.Time          `json:"last_consumption"`
	NumberOfVisits   *int                `json:"number_of_visits,omitempty"`
	SubstanceType    *SubstanceTypesEnum `json:"substance_type,omitempty"`
	TotalConsumption *float64            `json:"total_consumption"`
}

// PetConsumptionStatusResource defines model for PetConsumptionStatusResource.
type PetConsumptionStatusResource struct {
	At       *time.Time `json:"at"`
	Change   *[]float64 `json:"change"`
	DeviceId *int       `json:"device_id"`
	Id       *int       `json:"id,omitempty"`
	TagId    *int       `json:"tag_id"`
}

// PetDashboardResource defines model for PetDashboardResource.
type PetDashboardResource struct {
	ConsumptionAlert *[]ConsumptionAlertResource `json:"consumption_alert"`
	ConsumptionHabit *[]ConsumptionHabitResource `json:"consumption_habit"`
	Drinking         *PetConsumptionResource     `json:"drinking,omitempty"`
	Feeding          *PetConsumptionResource     `json:"feeding,omitempty"`
	Movement         *PetMovementResource        `json:"movement,omitempty"`
	PetId            *int                        `json:"pet_id"`
}

// PetDashboardResourceListDataResponse defines model for PetDashboardResourceListDataResponse.
type PetDashboardResourceListDataResponse struct {
	Data *[]PetDashboardResource `json:"data"`
}

// PetGenderEnum defines model for PetGenderEnum.
type PetGenderEnum int

// PetInsightResource defines model for PetInsightResource.
type PetInsightResource struct {
	ConsumptionAlert *[]ConsumptionAlertResource `json:"consumption_alert"`
	ConsumptionHabit *[]ConsumptionHabitResource `json:"consumption_habit"`
	PetId            *int                        `json:"pet_id,omitempty"`
}

// PetInsightResourceDataResponse defines model for PetInsightResourceDataResponse.
type PetInsightResourceDataResponse struct {
	Data *PetInsightResource `json:"data,omitempty"`
}

// PetMovement defines model for PetMovement.
type PetMovement struct {
	Date        *time.Time `json:"date"`
	TimeOutside *TimeSpan  `json:"time_outside,omitempty"`
}

// PetMovementResource defines model for PetMovementResource.
type PetMovementResource struct {
	Activity     *[]PetMovement     `json:"activity"`
	Date         *time.Time         `json:"date"`
	Entries      *int               `json:"entries"`
	LastEntry    *time.Time         `json:"last_entry"`
	Since        *time.Time         `json:"since"`
	TimeOutside  *TimeSpan          `json:"time_outside,omitempty"`
	TripsOutside *int               `json:"trips_outside"`
	Where        *DoorDirectionEnum `json:"where,omitempty"`
}

// PetPositionResource defines model for PetPositionResource.
type PetPositionResource struct {
	DeviceId *int       `json:"device_id"`
	Id       *int64     `json:"id,omitempty"`
	PetId    *int       `json:"pet_id"`
	Since    *time.Time `json:"since"`
	TagId    *int       `json:"tag_id"`
	UserId   *int       `json:"user_id"`
	Where    *int       `json:"where"`
}

// PetPositionResourceDataResponse defines model for PetPositionResourceDataResponse.
type PetPositionResourceDataResponse struct {
	Data *PetPositionResource `json:"data,omitempty"`
}

// PetPositionResourcePaginatedDataResult defines model for PetPositionResourcePaginatedDataResult.
type PetPositionResourcePaginatedDataResult struct {
	Data *[]PetPositionResource   `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// PetResource defines model for PetResource.
type PetResource struct {
	BreedId     *int                    `json:"breed_id"`
	BreedId2    *int                    `json:"breed_id2"`
	Comments    *string                 `json:"comments"`
	Conditions  *[]PetConditionResource `json:"conditions"`
	CreatedAt   *time.Time              `json:"created_at"`
	DateOfBirth *time.Time              `json:"date_of_birth"`
	DeletedAt   *time.Time              `json:"deleted_at"`
	FoodTypeId  *int                    `json:"food_type_id"`
	Gender      *PetGenderEnum          `json:"gender,omitempty"`
	HouseholdId *int                    `json:"household_id"`
	Id          *int                    `json:"id,omitempty"`
	Name        *string                 `json:"name"`
	Photo       *PhotoResource          `json:"photo,omitempty"`
	PhotoId     *int                    `json:"photo_id"`
	Position    *PetPositionResource    `json:"position,omitempty"`
	Spayed      *SpayedEnum             `json:"spayed,omitempty"`
	SpeciesId   *int                    `json:"species_id"`
	Status      *PetStatusResource      `json:"status,omitempty"`
	Tag         *TagResource            `json:"tag,omitempty"`
	TagId       *int                    `json:"tag_id"`
	UpdatedAt   *time.Time              `json:"updated_at"`
	Version     *int                    `json:"version,omitempty"`
	Weight      *string                 `json:"weight"`
}

// PetResourceDataResponse defines model for PetResourceDataResponse.
type PetResourceDataResponse struct {
	Data *PetResource `json:"data,omitempty"`
}

// PetResourcePaginatedDataResult defines model for PetResourcePaginatedDataResult.
type PetResourcePaginatedDataResult struct {
	Data *[]PetResource           `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// PetStatusResource defines model for PetStatusResource.
type PetStatusResource struct {
	Activity *PetPositionResource          `json:"activity,omitempty"`
	Drinking *PetConsumptionStatusResource `json:"drinking,omitempty"`
	Feeding  *PetConsumptionStatusResource `json:"feeding,omitempty"`
	PetId    *int                          `json:"pet_id"`
}

// PetStatusResourceDataResponse defines model for PetStatusResourceDataResponse.
type PetStatusResourceDataResponse struct {
	Data *PetStatusResource `json:"data,omitempty"`
}

// PetStatusResourcePaginatedDataResult defines model for PetStatusResourcePaginatedDataResult.
type PetStatusResourcePaginatedDataResult struct {
	Data *[]PetStatusResource     `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// PhotoResource defines model for PhotoResource.
type PhotoResource struct {
	CreatedAt       *time.Time `json:"created_at"`
	Hash            *string    `json:"hash"`
	Id              *int       `json:"id,omitempty"`
	Location        *string    `json:"location"`
	Title           *string    `json:"title"`
	UpdatedAt       *time.Time `json:"updated_at"`
	UploadingUserId *int       `json:"uploading_user_id,omitempty"`
	Version         *int       `json:"version,omitempty"`
}

// PhotoResourceDataResponse defines model for PhotoResourceDataResponse.
type PhotoResourceDataResponse struct {
	Data *PhotoResource `json:"data,omitempty"`
}

// PhotoResourcePaginatedDataResult defines model for PhotoResourcePaginatedDataResult.
type PhotoResourcePaginatedDataResult struct {
	Data *[]PhotoResource         `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail               *string                `json:"detail"`
	Instance             *string                `json:"instance"`
	Status               *int                   `json:"status"`
	Title                *string                `json:"title"`
	Type                 *string                `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProductResource defines model for ProductResource.
type ProductResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// ProductResourceDataResponse defines model for ProductResourceDataResponse.
type ProductResourceDataResponse struct {
	Data *ProductResource `json:"data,omitempty"`
}

// ProductResourcePaginatedDataResult defines model for ProductResourcePaginatedDataResult.
type ProductResourcePaginatedDataResult struct {
	Data *[]ProductResource       `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// PublicUserResource defines model for PublicUserResource.
type PublicUserResource struct {
	Id      *int           `json:"id,omitempty"`
	Name    *string        `json:"name"`
	Photo   *PhotoResource `json:"photo,omitempty"`
	PhotoId *int           `json:"photo_id"`
}

// PublicUserResourceDataResponse defines model for PublicUserResourceDataResponse.
type PublicUserResourceDataResponse struct {
	Data *PublicUserResource `json:"data,omitempty"`
}

// ReportHouseholdDrinkingDataPoint defines model for ReportHouseholdDrinkingDataPoint.
type ReportHouseholdDrinkingDataPoint struct {
	Datapoints *[]ReportHouseholdDrinkingResource `json:"datapoints"`
}

// ReportHouseholdDrinkingResource defines model for ReportHouseholdDrinkingResource.
type ReportHouseholdDrinkingResource struct {
	ActualWeight *float64             `json:"actual_weight"`
	BowlCount    *int                 `json:"bowl_count"`
	Context      *int                 `json:"context"`
	CreatedAt    *time.Time           `json:"created_at"`
	DeletedAt    *time.Time           `json:"deleted_at"`
	DeviceId     *int                 `json:"device_id"`
	Duration     *int                 `json:"duration"`
	EntryUserId  *int                 `json:"entry_user_id"`
	ExitUserId   *int                 `json:"exit_user_id"`
	From         *time.Time           `json:"from"`
	TagId        *int                 `json:"tag_id"`
	To           *time.Time           `json:"to"`
	UpdatedAt    *time.Time           `json:"updated_at"`
	UserId       *int                 `json:"user_id"`
	Weights      *[]ReportWeightFrame `json:"weights"`
}

// ReportHouseholdFeedingDataPoint defines model for ReportHouseholdFeedingDataPoint.
type ReportHouseholdFeedingDataPoint struct {
	Datapoints *[]ReportHouseholdFeedingResource `json:"datapoints"`
}

// ReportHouseholdFeedingResource defines model for ReportHouseholdFeedingResource.
type ReportHouseholdFeedingResource struct {
	ActualWeight *float64             `json:"actual_weight"`
	BowlCount    *int                 `json:"bowl_count"`
	Context      *int                 `json:"context"`
	CreatedAt    *time.Time           `json:"created_at"`
	DeletedAt    *time.Time           `json:"deleted_at"`
	DeviceId     *int                 `json:"device_id"`
	Duration     *int                 `json:"duration"`
	EntryUserId  *int                 `json:"entry_user_id"`
	ExitUserId   *int                 `json:"exit_user_id"`
	From         *time.Time           `json:"from"`
	TagId        *int                 `json:"tag_id"`
	To           *time.Time           `json:"to"`
	UpdatedAt    *time.Time           `json:"updated_at"`
	UserId       *int                 `json:"user_id"`
	Weights      *[]ReportWeightFrame `json:"weights"`
}

// ReportHouseholdMovementDataPoint defines model for ReportHouseholdMovementDataPoint.
type ReportHouseholdMovementDataPoint struct {
	Datapoints *[]ReportHouseholdMovementResource `json:"datapoints"`
}

// ReportHouseholdMovementResource defines model for ReportHouseholdMovementResource.
type ReportHouseholdMovementResource struct {
	Active        *bool      `json:"active"`
	CreatedAt     *time.Time `json:"created_at"`
	DeletedAt     *time.Time `json:"deleted_at"`
	DeviceId      *int       `json:"device_id"`
	Duration      *int       `json:"duration"`
	EntryDeviceId *int       `json:"entry_device_id"`
	EntryUserId   *int       `json:"entry_user_id"`
	ExitDeviceId  *int       `json:"exit_device_id"`
	ExitUserId    *int       `json:"exit_user_id"`
	From          *time.Time `json:"from"`
	TagId         *int       `json:"tag_id"`
	To            *time.Time `json:"to"`
	UpdatedAt     *time.Time `json:"updated_at"`
	UserId        *int       `json:"user_id"`
}

// ReportHouseholdResource defines model for ReportHouseholdResource.
type ReportHouseholdResource struct {
	ConsumptionAlert *[]ConsumptionAlertResource       `json:"consumption_alert"`
	ConsumptionHabit *[]ConsumptionHabitResource       `json:"consumption_habit"`
	DeviceId         *int                              `json:"device_id"`
	Drinking         *ReportHouseholdDrinkingDataPoint `json:"drinking,omitempty"`
	Feeding          *ReportHouseholdFeedingDataPoint  `json:"feeding,omitempty"`
	Movement         *ReportHouseholdMovementDataPoint `json:"movement,omitempty"`
	PetId            *int                              `json:"pet_id"`
}

// ReportHouseholdResourceDataResponse defines model for ReportHouseholdResourceDataResponse.
type ReportHouseholdResourceDataResponse struct {
	Data *ReportHouseholdResource `json:"data,omitempty"`
}

// ReportHouseholdResourceListDataResponse defines model for ReportHouseholdResourceListDataResponse.
type ReportHouseholdResourceListDataResponse struct {
	Data *[]ReportHouseholdResource `json:"data"`
}

// ReportWeightFrame defines model for ReportWeightFrame.
type ReportWeightFrame struct {
	Change       *float64 `json:"change,omitempty"`
	FoodTypeId   *int     `json:"food_type_id"`
	Index        *int     `json:"index"`
	Multi        *bool    `json:"multi"`
	TargetWeight *int     `json:"target_weight"`
	Weight       *float64 `json:"weight,omitempty"`
}

// RequestChangeStateResponseStatus defines model for RequestChangeStateResponseStatus.
type RequestChangeStateResponseStatus int

// SpayedEnum defines model for SpayedEnum.
type SpayedEnum int

// SpecialProfiles defines model for SpecialProfiles.
type SpecialProfiles int

// SpeciesResource defines model for SpeciesResource.
type SpeciesResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// SpeciesResourceDataResponse defines model for SpeciesResourceDataResponse.
type SpeciesResourceDataResponse struct {
	Data *SpeciesResource `json:"data,omitempty"`
}

// SpeciesResourcePaginatedDataResult defines model for SpeciesResourcePaginatedDataResult.
type SpeciesResourcePaginatedDataResult struct {
	Data *[]SpeciesResource       `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// StartResource defines model for StartResource.
type StartResource struct {
	Breed     *[]BreedResource     `json:"breed"`
	Condition *[]ConditionResource `json:"condition"`
	Country   *[]CountryResource   `json:"country"`
	Language  *[]LanguageResource  `json:"language"`
	Product   *[]ProductResource   `json:"product"`
	Timezone  *[]TimezoneResource  `json:"timezone"`
}

// StartResourceDataResponse defines model for StartResourceDataResponse.
type StartResourceDataResponse struct {
	Data *StartResource `json:"data,omitempty"`
}

// SubstanceTypesEnum defines model for SubstanceTypesEnum.
type SubstanceTypesEnum int

// TagDeviceResource defines model for TagDeviceResource.
type TagDeviceResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Index     *int       `json:"index,omitempty"`
	Profile   *int       `json:"profile"`
	UpdatedAt *time.Time `json:"updated_at"`
	Version   *int       `json:"version,omitempty"`
}

// TagDeviceResourceDataResponse defines model for TagDeviceResourceDataResponse.
type TagDeviceResourceDataResponse struct {
	Data *TagDeviceResource `json:"data,omitempty"`
}

// TagDeviceResourcePaginatedDataResult defines model for TagDeviceResourcePaginatedDataResult.
type TagDeviceResourcePaginatedDataResult struct {
	Data *[]TagDeviceResource     `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// TagResource defines model for TagResource.
type TagResource struct {
	CreatedAt           *time.Time    `json:"created_at"`
	DeletedAt           *time.Time    `json:"deleted_at"`
	Id                  *int          `json:"id,omitempty"`
	SupportedProductIds *[]DeviceType `json:"supported_product_ids"`
	Tag                 *string       `json:"tag"`
	UpdatedAt           *time.Time    `json:"updated_at"`
	Version             *int          `json:"version,omitempty"`
}

// TagResourceDataResponse defines model for TagResourceDataResponse.
type TagResourceDataResponse struct {
	Data *TagResource `json:"data,omitempty"`
}

// TagResourcePaginatedDataResult defines model for TagResourcePaginatedDataResult.
type TagResourcePaginatedDataResult struct {
	Data *[]TagResource           `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// TimeSpan defines model for TimeSpan.
type TimeSpan struct {
	Days              *int     `json:"days,omitempty"`
	Hours             *int     `json:"hours,omitempty"`
	Milliseconds      *int     `json:"milliseconds,omitempty"`
	Minutes           *int     `json:"minutes,omitempty"`
	Seconds           *int     `json:"seconds,omitempty"`
	Ticks             *int64   `json:"ticks,omitempty"`
	TotalDays         *float64 `json:"total_days,omitempty"`
	TotalHours        *float64 `json:"total_hours,omitempty"`
	TotalMilliseconds *float64 `json:"total_milliseconds,omitempty"`
	TotalMinutes      *float64 `json:"total_minutes,omitempty"`
	TotalSeconds      *float64 `json:"total_seconds,omitempty"`
}

// TimelineEventType defines model for TimelineEventType.
type TimelineEventType int

// TimelineResource defines model for TimelineResource.
type TimelineResource struct {
	CreatedAt  *time.Time            `json:"created_at"`
	Data       *string               `json:"data"`
	Devices    *[]DeviceResource     `json:"devices"`
	Households *[]HouseholdResource  `json:"households"`
	Id         *int64                `json:"id,omitempty"`
	Movements  *[]MovementResource   `json:"movements"`
	Pets       *[]PetResource        `json:"pets"`
	Tags       *[]TagResource        `json:"tags"`
	Type       *int                  `json:"type,omitempty"`
	UpdatedAt  *time.Time            `json:"updated_at"`
	Users      *[]PublicUserResource `json:"users"`
	Weights    *[]WeightResource     `json:"weights"`
}

// TimelineResourcePaginatedDataResult defines model for TimelineResourcePaginatedDataResult.
type TimelineResourcePaginatedDataResult struct {
	Data *[]TimelineResource      `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// TimezoneResource defines model for TimezoneResource.
type TimezoneResource struct {
	CreatedAt *time.Time `json:"created_at"`
	Id        *int       `json:"id,omitempty"`
	Name      *string    `json:"name"`
	Timezone  *string    `json:"timezone"`
	UpdatedAt *time.Time `json:"updated_at"`
	UtcOffset *int       `json:"utc_offset,omitempty"`
}

// TimezoneResourceDataResponse defines model for TimezoneResourceDataResponse.
type TimezoneResourceDataResponse struct {
	Data *TimezoneResource `json:"data,omitempty"`
}

// TimezoneResourcePaginatedDataResult defines model for TimezoneResourcePaginatedDataResult.
type TimezoneResourcePaginatedDataResult struct {
	Data *[]TimezoneResource      `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// UpdateDeviceResource defines model for UpdateDeviceResource.
type UpdateDeviceResource struct {
	Name string `json:"name"`
}

// UpdateDeviceTagResource defines model for UpdateDeviceTagResource.
type UpdateDeviceTagResource struct {
	Profile *SpecialProfiles `json:"profile,omitempty"`
}

// UpdateHouseholdInviteResource defines model for UpdateHouseholdInviteResource.
type UpdateHouseholdInviteResource struct {
	Owner *bool `json:"owner"`
	Write *bool `json:"write"`
}

// UpdateHouseholdResource defines model for UpdateHouseholdResource.
type UpdateHouseholdResource struct {
	Name       *string `json:"name"`
	TimezoneId *int    `json:"timezone_id"`
}

// UpdateHouseholdUserResource defines model for UpdateHouseholdUserResource.
type UpdateHouseholdUserResource struct {
	Owner *bool `json:"owner"`
	Write *bool `json:"write"`
}

// UpdateMeResource defines model for UpdateMeResource.
type UpdateMeResource struct {
	CountryId      *int                 `json:"country_id"`
	EmailAddress   *openapi_types.Email `json:"email_address"`
	FirstName      *string              `json:"first_name"`
	LanguageId     *int                 `json:"language_id"`
	LastName       *string              `json:"last_name"`
	MarketingOptIn *bool                `json:"marketing_opt_in"`
	Notifications  *map[string]*bool    `json:"notifications"`
	Password       *string              `json:"password"`
	PhotoId        *int                 `json:"photo_id"`
	TimeFormat     *UserTimeFormatEnum  `json:"time_format,omitempty"`
	WeightUnits    *UserWeightUnitEnum  `json:"weight_units,omitempty"`
}

// UpdatePetResource defines model for UpdatePetResource.
type UpdatePetResource struct {
	BreedId     *int                 `json:"breed_id"`
	BreedId2    *int                 `json:"breed_id2"`
	Comments    *string              `json:"comments"`
	Conditions  *[]ConditionResource `json:"conditions"`
	DateOfBirth *time.Time           `json:"date_of_birth"`
	FoodTypeId  *int                 `json:"food_type_id"`
	Gender      *PetGenderEnum       `json:"gender,omitempty"`
	Name        string               `json:"name"`
	PhotoId     *int                 `json:"photo_id"`
	Spayed      *SpayedEnum          `json:"spayed,omitempty"`
	SpeciesId   *int                 `json:"species_id"`
	Weight      *float64             `json:"weight"`
}

// UpdatePhotoResource defines model for UpdatePhotoResource.
type UpdatePhotoResource struct {
	Title *string `json:"title"`
}

// UserClientPlatformAppResource defines model for UserClientPlatformAppResource.
type UserClientPlatformAppResource struct {
	BundleIdentifier *string `json:"bundle_identifier"`
	Version          *string `json:"version"`
}

// UserClientPlatformDeviceModelResource defines model for UserClientPlatformDeviceModelResource.
type UserClientPlatformDeviceModelResource struct {
	Manufacturer *string `json:"manufacturer"`
	Name         *string `json:"name"`
	Version      *string `json:"version"`
}

// UserClientPlatformDeviceOsResource defines model for UserClientPlatformDeviceOsResource.
type UserClientPlatformDeviceOsResource struct {
	Platform *string `json:"platform"`
	Version  *string `json:"version"`
}

// UserClientPlatformDeviceResource defines model for UserClientPlatformDeviceResource.
type UserClientPlatformDeviceResource struct {
	Model *UserClientPlatformDeviceModelResource `json:"model,omitempty"`
	Name  *string                                `json:"name"`
	Os    *UserClientPlatformDeviceOsResource    `json:"os,omitempty"`
	Uuid  *string                                `json:"uuid"`
}

// UserClientPlatformLocaleResource defines model for UserClientPlatformLocaleResource.
type UserClientPlatformLocaleResource struct {
	Country  *string `json:"country"`
	Language *string `json:"language"`
}

// UserClientPlatformResource defines model for UserClientPlatformResource.
type UserClientPlatformResource struct {
	App    *UserClientPlatformAppResource    `json:"app,omitempty"`
	Device *UserClientPlatformDeviceResource `json:"device,omitempty"`
	Locale *UserClientPlatformLocaleResource `json:"locale,omitempty"`
}

// UserClientResource defines model for UserClientResource.
type UserClientResource struct {
	Platform *UserClientPlatformResource `json:"platform,omitempty"`
	Token    *string                     `json:"token"`
}

// UserClientResourceDataResponse defines model for UserClientResourceDataResponse.
type UserClientResourceDataResponse struct {
	Data *UserClientResource `json:"data,omitempty"`
}

// UserClientResourcePaginatedDataResult defines model for UserClientResourcePaginatedDataResult.
type UserClientResourcePaginatedDataResult struct {
	Data *[]UserClientResource    `json:"data"`
	Meta *PaginatedMetaDataResult `json:"meta,omitempty"`
}

// UserResource defines model for UserResource.
type UserResource struct {
	CountryId      *int              `json:"country_id"`
	CreatedAt      *time.Time        `json:"created_at"`
	EmailAddress   *string           `json:"email_address"`
	FirstName      *string           `json:"first_name"`
	Id             *int              `json:"id,omitempty"`
	LanguageId     *int              `json:"language_id"`
	LastName       *string           `json:"last_name"`
	MarketingOptIn *bool             `json:"marketing_opt_in"`
	Notifications  *map[string]*bool `json:"notifications"`
	Photo          *PhotoResource    `json:"photo,omitempty"`
	PhotoId        *int              `json:"photo_id"`
	TermsAccepted  *time.Time        `json:"terms_accepted"`
	TimeFormat     *int              `json:"time_format"`
	UpdatedAt      *time.Time        `json:"updated_at"`
	UseColour      *string           `json:"use_colour"`
	Version        *int              `json:"version,omitempty"`
	WeightUnits    *int              `json:"weight_units"`
}

// UserResourceDataResponse defines model for UserResourceDataResponse.
type UserResourceDataResponse struct {
	Data *UserResource `json:"data,omitempty"`
}

// UserTimeFormatEnum defines model for UserTimeFormatEnum.
type UserTimeFormatEnum int

// UserWeightUnitEnum defines model for UserWeightUnitEnum.
type UserWeightUnitEnum int

// WeightFrameResource defines model for WeightFrameResource.
type WeightFrameResource struct {
	Change        *float32   `json:"change,omitempty"`
	CreatedAt     *time.Time `json:"created_at"`
	CurrentWeight *float32   `json:"current_weight,omitempty"`
	Id            *int       `json:"id,omitempty"`
	Index         *int       `json:"index"`
	UpdatedAt     *time.Time `json:"updated_at"`
}

// WeightResource defines model for WeightResource.
type WeightResource struct {
	Context   *int                   `json:"context"`
	CreatedAt *time.Time             `json:"created_at"`
	DeviceId  *int                   `json:"device_id"`
	Duration  *int                   `json:"duration"`
	Frames    *[]WeightFrameResource `json:"frames"`
	Id        *int                   `json:"id,omitempty"`
	TagId     *int                   `json:"tag_id"`
	UpdatedAt *time.Time             `json:"updated_at"`
}

// GetApiAnimoPetParams defines parameters for GetApiAnimoPet.
type GetApiAnimoPetParams struct {
	HouseholdId  *[]int  `form:"HouseholdId,omitempty" json:"HouseholdId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthChangePasswordParams defines parameters for PostApiAuthChangePassword.
type PostApiAuthChangePasswordParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthLoginParams defines parameters for PostApiAuthLogin.
type PostApiAuthLoginParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthLogoutParams defines parameters for PostApiAuthLogout.
type PostApiAuthLogoutParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
	XDeviceId  *string `json:"X-Device-Id,omitempty"`
}

// PostApiAuthRegisterParams defines parameters for PostApiAuthRegister.
type PostApiAuthRegisterParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthResetPasswordParams defines parameters for PostApiAuthResetPassword.
type PostApiAuthResetPasswordParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthResetPasswordRequestParams defines parameters for PostApiAuthResetPasswordRequest.
type PostApiAuthResetPasswordRequestParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiBreedParams defines parameters for GetApiBreed.
type GetApiBreedParams struct {
	SpeciesId    *int    `form:"SpeciesId,omitempty" json:"SpeciesId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiBreedBreedIdParams defines parameters for GetApiBreedBreedId.
type GetApiBreedBreedIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiConditionParams defines parameters for GetApiCondition.
type GetApiConditionParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiConditionConditionIdParams defines parameters for GetApiConditionConditionId.
type GetApiConditionConditionIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiCountryParams defines parameters for GetApiCountry.
type GetApiCountryParams struct {
	IsoCode2     *string `form:"IsoCode2,omitempty" json:"IsoCode2,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiCountryCountryIdParams defines parameters for GetApiCountryCountryId.
type GetApiCountryCountryIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDashboardPetParams defines parameters for GetApiDashboardPet.
type GetApiDashboardPetParams struct {
	PetId        []int     `form:"PetId" json:"PetId"`
	From         time.Time `form:"From" json:"From"`
	DaysHistory  *int      `form:"DaysHistory,omitempty" json:"DaysHistory,omitempty"`
	Page         *int      `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int      `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int      `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string   `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceParams defines parameters for GetApiDevice.
type GetApiDeviceParams struct {
	XivelyDeviceId     *string     `form:"XivelyDeviceId,omitempty" json:"XivelyDeviceId,omitempty"`
	MacAddress         *string     `form:"MacAddress,omitempty" json:"MacAddress,omitempty"`
	SerialNumber       *string     `form:"SerialNumber,omitempty" json:"SerialNumber,omitempty"`
	PublicSerialNumber *string     `form:"PublicSerialNumber,omitempty" json:"PublicSerialNumber,omitempty"`
	ProductId          *DeviceType `form:"ProductId,omitempty" json:"ProductId,omitempty"`
	ParentDeviceId     *int        `form:"ParentDeviceId,omitempty" json:"ParentDeviceId,omitempty"`
	Index              *int        `form:"Index,omitempty" json:"Index,omitempty"`
	HouseholdId        *[]int      `form:"HouseholdId,omitempty" json:"HouseholdId,omitempty"`
	Page               *int        `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage       *int        `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize           *int        `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion         *string     `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceNeedsUpdateParams defines parameters for GetApiDeviceNeedsUpdate.
type GetApiDeviceNeedsUpdateParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiDevicePairHouseholdIdParams defines parameters for PostApiDevicePairHouseholdId.
type PostApiDevicePairHouseholdIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDevicePairingParams defines parameters for GetApiDevicePairing.
type GetApiDevicePairingParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiDeviceDeviceIdParams defines parameters for DeleteApiDeviceDeviceId.
type DeleteApiDeviceDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdParams defines parameters for GetApiDeviceDeviceId.
type GetApiDeviceDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiDeviceDeviceIdParams defines parameters for PutApiDeviceDeviceId.
type PutApiDeviceDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdControlParams defines parameters for GetApiDeviceDeviceIdControl.
type GetApiDeviceDeviceIdControlParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiDeviceDeviceIdControlParams defines parameters for PutApiDeviceDeviceIdControl.
type PutApiDeviceDeviceIdControlParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiDeviceDeviceIdControlAsyncParams defines parameters for PutApiDeviceDeviceIdControlAsync.
type PutApiDeviceDeviceIdControlAsyncParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdControlStatusParams defines parameters for GetApiDeviceDeviceIdControlStatus.
type GetApiDeviceDeviceIdControlStatusParams struct {
	Status     *[]RequestChangeStateResponseStatus `form:"Status,omitempty" json:"Status,omitempty"`
	ApiVersion *string                             `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdControlStatusRequestIdParams defines parameters for GetApiDeviceDeviceIdControlStatusRequestId.
type GetApiDeviceDeviceIdControlStatusRequestIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiDeviceDeviceIdPairHouseholdIdParams defines parameters for PostApiDeviceDeviceIdPairHouseholdId.
type PostApiDeviceDeviceIdPairHouseholdIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdStatusParams defines parameters for GetApiDeviceDeviceIdStatus.
type GetApiDeviceDeviceIdStatusParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdTagParams defines parameters for GetApiDeviceDeviceIdTag.
type GetApiDeviceDeviceIdTagParams struct {
	Index        *int    `form:"Index,omitempty" json:"Index,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiDeviceDeviceIdTagTagIdParams defines parameters for DeleteApiDeviceDeviceIdTagTagId.
type DeleteApiDeviceDeviceIdTagTagIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiDeviceDeviceIdTagTagIdParams defines parameters for GetApiDeviceDeviceIdTagTagId.
type GetApiDeviceDeviceIdTagTagIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiDeviceDeviceIdTagTagIdParams defines parameters for PutApiDeviceDeviceIdTagTagId.
type PutApiDeviceDeviceIdTagTagIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiDeviceDeviceIdTagTagIdAsyncParams defines parameters for DeleteApiDeviceDeviceIdTagTagIdAsync.
type DeleteApiDeviceDeviceIdTagTagIdAsyncParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiDeviceDeviceIdTagTagIdAsyncParams defines parameters for PutApiDeviceDeviceIdTagTagIdAsync.
type PutApiDeviceDeviceIdTagTagIdAsyncParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiFoodTypeParams defines parameters for GetApiFoodType.
type GetApiFoodTypeParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiFoodTypeFoodTypeIdParams defines parameters for GetApiFoodTypeFoodTypeId.
type GetApiFoodTypeFoodTypeIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdParams defines parameters for GetApiHousehold.
type GetApiHouseholdParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiHouseholdParams defines parameters for PostApiHousehold.
type PostApiHouseholdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiHouseholdHouseholdIdParams defines parameters for DeleteApiHouseholdHouseholdId.
type DeleteApiHouseholdHouseholdIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdParams defines parameters for GetApiHouseholdHouseholdId.
type GetApiHouseholdHouseholdIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiHouseholdHouseholdIdParams defines parameters for PutApiHouseholdHouseholdId.
type PutApiHouseholdHouseholdIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdDeviceParams defines parameters for GetApiHouseholdHouseholdIdDevice.
type GetApiHouseholdHouseholdIdDeviceParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdDeviceDeviceIdParams defines parameters for GetApiHouseholdHouseholdIdDeviceDeviceId.
type GetApiHouseholdHouseholdIdDeviceDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdInviteParams defines parameters for GetApiHouseholdHouseholdIdInvite.
type GetApiHouseholdHouseholdIdInviteParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiHouseholdHouseholdIdInviteParams defines parameters for PostApiHouseholdHouseholdIdInvite.
type PostApiHouseholdHouseholdIdInviteParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiHouseholdHouseholdIdInviteInviteIdParams defines parameters for DeleteApiHouseholdHouseholdIdInviteInviteId.
type DeleteApiHouseholdHouseholdIdInviteInviteIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdInviteInviteIdParams defines parameters for GetApiHouseholdHouseholdIdInviteInviteId.
type GetApiHouseholdHouseholdIdInviteInviteIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiHouseholdHouseholdIdInviteInviteIdParams defines parameters for PutApiHouseholdHouseholdIdInviteInviteId.
type PutApiHouseholdHouseholdIdInviteInviteIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiHouseholdHouseholdIdInviteInviteIdResendParams defines parameters for PostApiHouseholdHouseholdIdInviteInviteIdResend.
type PostApiHouseholdHouseholdIdInviteInviteIdResendParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdPetParams defines parameters for GetApiHouseholdHouseholdIdPet.
type GetApiHouseholdHouseholdIdPetParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdPetPetIdParams defines parameters for GetApiHouseholdHouseholdIdPetPetId.
type GetApiHouseholdHouseholdIdPetPetIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdUserParams defines parameters for GetApiHouseholdHouseholdIdUser.
type GetApiHouseholdHouseholdIdUserParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiHouseholdHouseholdIdUserUserIdParams defines parameters for DeleteApiHouseholdHouseholdIdUserUserId.
type DeleteApiHouseholdHouseholdIdUserUserIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiHouseholdHouseholdIdUserUserIdParams defines parameters for GetApiHouseholdHouseholdIdUserUserId.
type GetApiHouseholdHouseholdIdUserUserIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiHouseholdHouseholdIdUserUserIdParams defines parameters for PutApiHouseholdHouseholdIdUserUserId.
type PutApiHouseholdHouseholdIdUserUserIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiInfoParams defines parameters for GetApiInfo.
type GetApiInfoParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiInviteParams defines parameters for GetApiInvite.
type GetApiInviteParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiInviteInviteCodeAcceptParams defines parameters for PostApiInviteInviteCodeAccept.
type PostApiInviteInviteCodeAcceptParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiInviteInviteCodeRejectParams defines parameters for PostApiInviteInviteCodeReject.
type PostApiInviteInviteCodeRejectParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiInviteInviteIdParams defines parameters for GetApiInviteInviteId.
type GetApiInviteInviteIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiLanguageParams defines parameters for GetApiLanguage.
type GetApiLanguageParams struct {
	IsoCode1     *string `form:"IsoCode1,omitempty" json:"IsoCode1,omitempty"`
	Enabled      *bool   `form:"Enabled,omitempty" json:"Enabled,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiLanguageLanguageIdParams defines parameters for GetApiLanguageLanguageId.
type GetApiLanguageLanguageIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiMeParams defines parameters for DeleteApiMe.
type DeleteApiMeParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiMeParams defines parameters for GetApiMe.
type GetApiMeParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiMeParams defines parameters for PutApiMe.
type PutApiMeParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiMeAcceptTermsParams defines parameters for PutApiMeAcceptTerms.
type PutApiMeAcceptTermsParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiMeClientParams defines parameters for GetApiMeClient.
type GetApiMeClientParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiMeClientParams defines parameters for PostApiMeClient.
type PostApiMeClientParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiMeDeleteParams defines parameters for PostApiMeDelete.
type PostApiMeDeleteParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiMeStartParams defines parameters for GetApiMeStart.
type GetApiMeStartParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiNotificationParams defines parameters for GetApiNotification.
type GetApiNotificationParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetParams defines parameters for GetApiPet.
type GetApiPetParams struct {
	HouseholdId  *[]int  `form:"HouseholdId,omitempty" json:"HouseholdId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiPetParams defines parameters for PostApiPet.
type PostApiPetParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPositionDeviceIdParams defines parameters for GetApiPetPositionDeviceId.
type GetApiPetPositionDeviceIdParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetStatusDeviceIdParams defines parameters for GetApiPetStatusDeviceId.
type GetApiPetStatusDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiPetPetIdParams defines parameters for DeleteApiPetPetId.
type DeleteApiPetPetIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdParams defines parameters for GetApiPetPetId.
type GetApiPetPetIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiPetPetIdParams defines parameters for PutApiPetPetId.
type PutApiPetPetIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdConditionParams defines parameters for GetApiPetPetIdCondition.
type GetApiPetPetIdConditionParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiPetPetIdConditionConditionIdParams defines parameters for DeleteApiPetPetIdConditionConditionId.
type DeleteApiPetPetIdConditionConditionIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdConditionConditionIdParams defines parameters for GetApiPetPetIdConditionConditionId.
type GetApiPetPetIdConditionConditionIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiPetPetIdConditionConditionIdParams defines parameters for PutApiPetPetIdConditionConditionId.
type PutApiPetPetIdConditionConditionIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdInsightParams defines parameters for GetApiPetPetIdInsight.
type GetApiPetPetIdInsightParams struct {
	From         *time.Time `form:"From,omitempty" json:"From,omitempty"`
	To           *time.Time `form:"To,omitempty" json:"To,omitempty"`
	Page         *int       `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int       `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int       `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string    `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiPetPetIdPositionParams defines parameters for PostApiPetPetIdPosition.
type PostApiPetPetIdPositionParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdPositionDeviceIdParams defines parameters for GetApiPetPetIdPositionDeviceId.
type GetApiPetPetIdPositionDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPetPetIdStatusDeviceIdParams defines parameters for GetApiPetPetIdStatusDeviceId.
type GetApiPetPetIdStatusDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPhotoParams defines parameters for GetApiPhoto.
type GetApiPhotoParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiPhotoMultipartBody defines parameters for PostApiPhoto.
type PostApiPhotoMultipartBody struct {
	File  *openapi_types.File `json:"File,omitempty"`
	Title *string             `json:"Title,omitempty"`
}

// PostApiPhotoParams defines parameters for PostApiPhoto.
type PostApiPhotoParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// DeleteApiPhotoPhotoIdParams defines parameters for DeleteApiPhotoPhotoId.
type DeleteApiPhotoPhotoIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPhotoPhotoIdParams defines parameters for GetApiPhotoPhotoId.
type GetApiPhotoPhotoIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PutApiPhotoPhotoIdParams defines parameters for PutApiPhotoPhotoId.
type PutApiPhotoPhotoIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiPhotoPhotoIdImageImageHashParams defines parameters for GetApiPhotoPhotoIdImageImageHash.
type GetApiPhotoPhotoIdImageImageHashParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiProductParams defines parameters for GetApiProduct.
type GetApiProductParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiProductProductIdParams defines parameters for GetApiProductProductId.
type GetApiProductProductIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiReportHouseholdHouseholdIdPetPetIdParams defines parameters for GetApiReportHouseholdHouseholdIdPetPetId.
type GetApiReportHouseholdHouseholdIdPetPetIdParams struct {
	From       *time.Time `form:"From,omitempty" json:"From,omitempty"`
	To         *time.Time `form:"To,omitempty" json:"To,omitempty"`
	ApiVersion *string    `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams defines parameters for GetApiReportHouseholdHouseholdIdPetPetIdAggregate.
type GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams struct {
	From       *time.Time `form:"From,omitempty" json:"From,omitempty"`
	To         *time.Time `form:"To,omitempty" json:"To,omitempty"`
	ApiVersion *string    `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams defines parameters for GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId.
type GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams struct {
	From       *time.Time `form:"From,omitempty" json:"From,omitempty"`
	To         *time.Time `form:"To,omitempty" json:"To,omitempty"`
	ApiVersion *string    `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiSpeciesParams defines parameters for GetApiSpecies.
type GetApiSpeciesParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiSpeciesSpeciesIdParams defines parameters for GetApiSpeciesSpeciesId.
type GetApiSpeciesSpeciesIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiStartParams defines parameters for GetApiStart.
type GetApiStartParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTagParams defines parameters for GetApiTag.
type GetApiTagParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTagTagIdParams defines parameters for GetApiTagTagId.
type GetApiTagTagIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTagTagIdDeviceParams defines parameters for GetApiTagTagIdDevice.
type GetApiTagTagIdDeviceParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTagTagIdDeviceDeviceIdParams defines parameters for GetApiTagTagIdDeviceDeviceId.
type GetApiTagTagIdDeviceDeviceIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimelineParams defines parameters for GetApiTimeline.
type GetApiTimelineParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	SinceId      *int64  `form:"SinceId,omitempty" json:"SinceId,omitempty"`
	BeforeId     *int64  `form:"BeforeId,omitempty" json:"BeforeId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimelineHouseholdHouseholdIdParams defines parameters for GetApiTimelineHouseholdHouseholdId.
type GetApiTimelineHouseholdHouseholdIdParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	SinceId      *int64  `form:"SinceId,omitempty" json:"SinceId,omitempty"`
	BeforeId     *int64  `form:"BeforeId,omitempty" json:"BeforeId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimelineHouseholdHouseholdIdDeviceParams defines parameters for GetApiTimelineHouseholdHouseholdIdDevice.
type GetApiTimelineHouseholdHouseholdIdDeviceParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	SinceId      *int64  `form:"SinceId,omitempty" json:"SinceId,omitempty"`
	BeforeId     *int64  `form:"BeforeId,omitempty" json:"BeforeId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimelineHouseholdHouseholdIdPetParams defines parameters for GetApiTimelineHouseholdHouseholdIdPet.
type GetApiTimelineHouseholdHouseholdIdPetParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	SinceId      *int64  `form:"SinceId,omitempty" json:"SinceId,omitempty"`
	BeforeId     *int64  `form:"BeforeId,omitempty" json:"BeforeId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimelineHouseholdHouseholdIdUserParams defines parameters for GetApiTimelineHouseholdHouseholdIdUser.
type GetApiTimelineHouseholdHouseholdIdUserParams struct {
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	SinceId      *int64  `form:"SinceId,omitempty" json:"SinceId,omitempty"`
	BeforeId     *int64  `form:"BeforeId,omitempty" json:"BeforeId,omitempty"`
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimezoneParams defines parameters for GetApiTimezone.
type GetApiTimezoneParams struct {
	Page         *int    `form:"Page,omitempty" json:"Page,omitempty"`
	ItemsPerPage *int    `form:"ItemsPerPage,omitempty" json:"ItemsPerPage,omitempty"`
	PageSize     *int    `form:"PageSize,omitempty" json:"PageSize,omitempty"`
	ApiVersion   *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTimezoneTimezoneIdParams defines parameters for GetApiTimezoneTimezoneId.
type GetApiTimezoneTimezoneIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTranslationParams defines parameters for GetApiTranslation.
type GetApiTranslationParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiTranslationLanguageParams defines parameters for GetApiTranslationLanguage.
type GetApiTranslationLanguageParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// GetApiUserUserIdParams defines parameters for GetApiUserUserId.
type GetApiUserUserIdParams struct {
	ApiVersion *string `form:"api-version,omitempty" json:"api-version,omitempty"`
}

// PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthChangePassword for application/*+json ContentType.
type PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody = AuthChangePasswordResource

// PostApiAuthChangePasswordJSONRequestBody defines body for PostApiAuthChangePassword for application/json ContentType.
type PostApiAuthChangePasswordJSONRequestBody = AuthChangePasswordResource

// PostApiAuthLoginApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthLogin for application/*+json ContentType.
type PostApiAuthLoginApplicationWildcardPlusJSONRequestBody = AuthLoginResource

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = AuthLoginResource

// PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthLogout for application/*+json ContentType.
type PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody = AuthLogoutResource

// PostApiAuthLogoutJSONRequestBody defines body for PostApiAuthLogout for application/json ContentType.
type PostApiAuthLogoutJSONRequestBody = AuthLogoutResource

// PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthRegister for application/*+json ContentType.
type PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody = AuthRegisterResource

// PostApiAuthRegisterJSONRequestBody defines body for PostApiAuthRegister for application/json ContentType.
type PostApiAuthRegisterJSONRequestBody = AuthRegisterResource

// PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthResetPassword for application/*+json ContentType.
type PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody = AuthResetPasswordResource

// PostApiAuthResetPasswordJSONRequestBody defines body for PostApiAuthResetPassword for application/json ContentType.
type PostApiAuthResetPasswordJSONRequestBody = AuthResetPasswordResource

// PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody defines body for PostApiAuthResetPasswordRequest for application/*+json ContentType.
type PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody = AuthResetPasswordRequestResource

// PostApiAuthResetPasswordRequestJSONRequestBody defines body for PostApiAuthResetPasswordRequest for application/json ContentType.
type PostApiAuthResetPasswordRequestJSONRequestBody = AuthResetPasswordRequestResource

// PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody defines body for PostApiDevicePairHouseholdId for application/*+json ContentType.
type PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody = DevicePairByCodeResource

// PostApiDevicePairHouseholdIdJSONRequestBody defines body for PostApiDevicePairHouseholdId for application/json ContentType.
type PostApiDevicePairHouseholdIdJSONRequestBody = DevicePairByCodeResource

// PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody defines body for PutApiDeviceDeviceId for application/*+json ContentType.
type PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody = UpdateDeviceResource

// PutApiDeviceDeviceIdJSONRequestBody defines body for PutApiDeviceDeviceId for application/json ContentType.
type PutApiDeviceDeviceIdJSONRequestBody = UpdateDeviceResource

// PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody defines body for PutApiDeviceDeviceIdTagTagId for application/*+json ContentType.
type PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody = UpdateDeviceTagResource

// PutApiDeviceDeviceIdTagTagIdJSONRequestBody defines body for PutApiDeviceDeviceIdTagTagId for application/json ContentType.
type PutApiDeviceDeviceIdTagTagIdJSONRequestBody = UpdateDeviceTagResource

// PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody defines body for PutApiDeviceDeviceIdTagTagIdAsync for application/*+json ContentType.
type PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody = UpdateDeviceTagResource

// PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody defines body for PutApiDeviceDeviceIdTagTagIdAsync for application/json ContentType.
type PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody = UpdateDeviceTagResource

// PostApiHouseholdApplicationWildcardPlusJSONRequestBody defines body for PostApiHousehold for application/*+json ContentType.
type PostApiHouseholdApplicationWildcardPlusJSONRequestBody = CreateHouseholdResource

// PostApiHouseholdJSONRequestBody defines body for PostApiHousehold for application/json ContentType.
type PostApiHouseholdJSONRequestBody = CreateHouseholdResource

// PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody defines body for PutApiHouseholdHouseholdId for application/*+json ContentType.
type PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody = UpdateHouseholdResource

// PutApiHouseholdHouseholdIdJSONRequestBody defines body for PutApiHouseholdHouseholdId for application/json ContentType.
type PutApiHouseholdHouseholdIdJSONRequestBody = UpdateHouseholdResource

// PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody defines body for PostApiHouseholdHouseholdIdInvite for application/*+json ContentType.
type PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody = CreateHouseholdInviteResource

// PostApiHouseholdHouseholdIdInviteJSONRequestBody defines body for PostApiHouseholdHouseholdIdInvite for application/json ContentType.
type PostApiHouseholdHouseholdIdInviteJSONRequestBody = CreateHouseholdInviteResource

// PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody defines body for PutApiHouseholdHouseholdIdInviteInviteId for application/*+json ContentType.
type PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody = UpdateHouseholdInviteResource

// PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody defines body for PutApiHouseholdHouseholdIdInviteInviteId for application/json ContentType.
type PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody = UpdateHouseholdInviteResource

// PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody defines body for PutApiHouseholdHouseholdIdUserUserId for application/*+json ContentType.
type PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody = UpdateHouseholdUserResource

// PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody defines body for PutApiHouseholdHouseholdIdUserUserId for application/json ContentType.
type PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody = UpdateHouseholdUserResource

// PutApiMeApplicationWildcardPlusJSONRequestBody defines body for PutApiMe for application/*+json ContentType.
type PutApiMeApplicationWildcardPlusJSONRequestBody = UpdateMeResource

// PutApiMeJSONRequestBody defines body for PutApiMe for application/json ContentType.
type PutApiMeJSONRequestBody = UpdateMeResource

// PostApiMeClientApplicationWildcardPlusJSONRequestBody defines body for PostApiMeClient for application/*+json ContentType.
type PostApiMeClientApplicationWildcardPlusJSONRequestBody = UserClientResource

// PostApiMeClientJSONRequestBody defines body for PostApiMeClient for application/json ContentType.
type PostApiMeClientJSONRequestBody = UserClientResource

// PostApiMeDeleteApplicationWildcardPlusJSONRequestBody defines body for PostApiMeDelete for application/*+json ContentType.
type PostApiMeDeleteApplicationWildcardPlusJSONRequestBody = DeleteAccountResource

// PostApiMeDeleteJSONRequestBody defines body for PostApiMeDelete for application/json ContentType.
type PostApiMeDeleteJSONRequestBody = DeleteAccountResource

// PostApiPetApplicationWildcardPlusJSONRequestBody defines body for PostApiPet for application/*+json ContentType.
type PostApiPetApplicationWildcardPlusJSONRequestBody = CreatePetResource

// PostApiPetJSONRequestBody defines body for PostApiPet for application/json ContentType.
type PostApiPetJSONRequestBody = CreatePetResource

// PutApiPetPetIdApplicationWildcardPlusJSONRequestBody defines body for PutApiPetPetId for application/*+json ContentType.
type PutApiPetPetIdApplicationWildcardPlusJSONRequestBody = UpdatePetResource

// PutApiPetPetIdJSONRequestBody defines body for PutApiPetPetId for application/json ContentType.
type PutApiPetPetIdJSONRequestBody = UpdatePetResource

// PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody defines body for PostApiPetPetIdPosition for application/*+json ContentType.
type PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody = CreatePetPositionResource

// PostApiPetPetIdPositionJSONRequestBody defines body for PostApiPetPetIdPosition for application/json ContentType.
type PostApiPetPetIdPositionJSONRequestBody = CreatePetPositionResource

// PostApiPhotoMultipartRequestBody defines body for PostApiPhoto for multipart/form-data ContentType.
type PostApiPhotoMultipartRequestBody PostApiPhotoMultipartBody

// PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody defines body for PutApiPhotoPhotoId for application/*+json ContentType.
type PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody = UpdatePhotoResource

// PutApiPhotoPhotoIdJSONRequestBody defines body for PutApiPhotoPhotoId for application/json ContentType.
type PutApiPhotoPhotoIdJSONRequestBody = UpdatePhotoResource

// Getter for additional properties for ProblemDetails. Returns the specified
// element and whether it was found
func (a ProblemDetails) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails
func (a *ProblemDetails) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a *ProblemDetails) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["detail"]; found {
		err = json.Unmarshal(raw, &a.Detail)
		if err != nil {
			return fmt.Errorf("error reading 'detail': %w", err)
		}
		delete(object, "detail")
	}

	if raw, found := object["instance"]; found {
		err = json.Unmarshal(raw, &a.Instance)
		if err != nil {
			return fmt.Errorf("error reading 'instance': %w", err)
		}
		delete(object, "instance")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails to handle AdditionalProperties
func (a ProblemDetails) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Detail != nil {
		object["detail"], err = json.Marshal(a.Detail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'detail': %w", err)
		}
	}

	if a.Instance != nil {
		object["instance"], err = json.Marshal(a.Instance)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'instance': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiAnimoPet request
	GetApiAnimoPet(ctx context.Context, params *GetApiAnimoPetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthChangePasswordWithBody request with any body
	PostApiAuthChangePasswordWithBody(ctx context.Context, params *PostApiAuthChangePasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthChangePasswordWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthChangePassword(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthLoginWithBody request with any body
	PostApiAuthLoginWithBody(ctx context.Context, params *PostApiAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLoginWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLogin(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthLogoutWithBody request with any body
	PostApiAuthLogoutWithBody(ctx context.Context, params *PostApiAuthLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLogoutWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLogout(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRegisterWithBody request with any body
	PostApiAuthRegisterWithBody(ctx context.Context, params *PostApiAuthRegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthRegisterWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthRegister(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthResetPasswordWithBody request with any body
	PostApiAuthResetPasswordWithBody(ctx context.Context, params *PostApiAuthResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthResetPasswordWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthResetPassword(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthResetPasswordRequestWithBody request with any body
	PostApiAuthResetPasswordRequestWithBody(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthResetPasswordRequest(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBreed request
	GetApiBreed(ctx context.Context, params *GetApiBreedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiBreedBreedId request
	GetApiBreedBreedId(ctx context.Context, breedId int, params *GetApiBreedBreedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCondition request
	GetApiCondition(ctx context.Context, params *GetApiConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiConditionConditionId request
	GetApiConditionConditionId(ctx context.Context, conditionId int, params *GetApiConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCountry request
	GetApiCountry(ctx context.Context, params *GetApiCountryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiCountryCountryId request
	GetApiCountryCountryId(ctx context.Context, countryId int, params *GetApiCountryCountryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDashboardPet request
	GetApiDashboardPet(ctx context.Context, params *GetApiDashboardPetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDevice request
	GetApiDevice(ctx context.Context, params *GetApiDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceNeedsUpdate request
	GetApiDeviceNeedsUpdate(ctx context.Context, params *GetApiDeviceNeedsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDevicePairHouseholdIdWithBody request with any body
	PostApiDevicePairHouseholdIdWithBody(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDevicePairHouseholdIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDevicePairHouseholdId(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDevicePairing request
	GetApiDevicePairing(ctx context.Context, params *GetApiDevicePairingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDeviceDeviceId request
	DeleteApiDeviceDeviceId(ctx context.Context, deviceId int, params *DeleteApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceId request
	GetApiDeviceDeviceId(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDeviceDeviceIdWithBody request with any body
	PutApiDeviceDeviceIdWithBody(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceId(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdControl request
	GetApiDeviceDeviceIdControl(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDeviceDeviceIdControl request
	PutApiDeviceDeviceIdControl(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDeviceDeviceIdControlAsync request
	PutApiDeviceDeviceIdControlAsync(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlAsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdControlStatus request
	GetApiDeviceDeviceIdControlStatus(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdControlStatusRequestId request
	GetApiDeviceDeviceIdControlStatusRequestId(ctx context.Context, deviceId int, requestId openapi_types.UUID, params *GetApiDeviceDeviceIdControlStatusRequestIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDeviceDeviceIdPairHouseholdId request
	PostApiDeviceDeviceIdPairHouseholdId(ctx context.Context, deviceId int, householdId int, params *PostApiDeviceDeviceIdPairHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdStatus request
	GetApiDeviceDeviceIdStatus(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdTag request
	GetApiDeviceDeviceIdTag(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDeviceDeviceIdTagTagId request
	DeleteApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDeviceDeviceIdTagTagId request
	GetApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *GetApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDeviceDeviceIdTagTagIdWithBody request with any body
	PutApiDeviceDeviceIdTagTagIdWithBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceIdTagTagIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDeviceDeviceIdTagTagIdAsync request
	DeleteApiDeviceDeviceIdTagTagIdAsync(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdAsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDeviceDeviceIdTagTagIdAsyncWithBody request with any body
	PutApiDeviceDeviceIdTagTagIdAsyncWithBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceIdTagTagIdAsyncWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDeviceDeviceIdTagTagIdAsync(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFoodType request
	GetApiFoodType(ctx context.Context, params *GetApiFoodTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiFoodTypeFoodTypeId request
	GetApiFoodTypeFoodTypeId(ctx context.Context, foodTypeId int, params *GetApiFoodTypeFoodTypeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHousehold request
	GetApiHousehold(ctx context.Context, params *GetApiHouseholdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHouseholdWithBody request with any body
	PostApiHouseholdWithBody(ctx context.Context, params *PostApiHouseholdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHouseholdWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHousehold(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiHouseholdHouseholdId request
	DeleteApiHouseholdHouseholdId(ctx context.Context, householdId int, params *DeleteApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdId request
	GetApiHouseholdHouseholdId(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiHouseholdHouseholdIdWithBody request with any body
	PutApiHouseholdHouseholdIdWithBody(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdId(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdDevice request
	GetApiHouseholdHouseholdIdDevice(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdDeviceDeviceId request
	GetApiHouseholdHouseholdIdDeviceDeviceId(ctx context.Context, householdId int, deviceId int, params *GetApiHouseholdHouseholdIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdInvite request
	GetApiHouseholdHouseholdIdInvite(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdInviteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHouseholdHouseholdIdInviteWithBody request with any body
	PostApiHouseholdHouseholdIdInviteWithBody(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHouseholdHouseholdIdInviteWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHouseholdHouseholdIdInvite(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiHouseholdHouseholdIdInviteInviteId request
	DeleteApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *DeleteApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdInviteInviteId request
	GetApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *GetApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiHouseholdHouseholdIdInviteInviteIdWithBody request with any body
	PutApiHouseholdHouseholdIdInviteInviteIdWithBody(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdIdInviteInviteIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHouseholdHouseholdIdInviteInviteIdResend request
	PostApiHouseholdHouseholdIdInviteInviteIdResend(ctx context.Context, householdId int, inviteId int, params *PostApiHouseholdHouseholdIdInviteInviteIdResendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdPet request
	GetApiHouseholdHouseholdIdPet(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdPetPetId request
	GetApiHouseholdHouseholdIdPetPetId(ctx context.Context, householdId int, petId int, params *GetApiHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdUser request
	GetApiHouseholdHouseholdIdUser(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiHouseholdHouseholdIdUserUserId request
	DeleteApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *DeleteApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHouseholdHouseholdIdUserUserId request
	GetApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *GetApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiHouseholdHouseholdIdUserUserIdWithBody request with any body
	PutApiHouseholdHouseholdIdUserUserIdWithBody(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdIdUserUserIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInfo request
	GetApiInfo(ctx context.Context, params *GetApiInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInvite request
	GetApiInvite(ctx context.Context, params *GetApiInviteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInviteInviteCodeAccept request
	PostApiInviteInviteCodeAccept(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeAcceptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiInviteInviteCodeReject request
	PostApiInviteInviteCodeReject(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeRejectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiInviteInviteId request
	GetApiInviteInviteId(ctx context.Context, inviteId int, params *GetApiInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLanguage request
	GetApiLanguage(ctx context.Context, params *GetApiLanguageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiLanguageLanguageId request
	GetApiLanguageLanguageId(ctx context.Context, languageId int, params *GetApiLanguageLanguageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiMe request
	DeleteApiMe(ctx context.Context, params *DeleteApiMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMe request
	GetApiMe(ctx context.Context, params *GetApiMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiMeWithBody request with any body
	PutApiMeWithBody(ctx context.Context, params *PutApiMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiMeWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PutApiMeParams, body PutApiMeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiMe(ctx context.Context, params *PutApiMeParams, body PutApiMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiMeAcceptTerms request
	PutApiMeAcceptTerms(ctx context.Context, params *PutApiMeAcceptTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMeClient request
	GetApiMeClient(ctx context.Context, params *GetApiMeClientParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMeClientWithBody request with any body
	PostApiMeClientWithBody(ctx context.Context, params *PostApiMeClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMeClientWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMeClient(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMeDeleteWithBody request with any body
	PostApiMeDeleteWithBody(ctx context.Context, params *PostApiMeDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMeDeleteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMeDelete(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMeStart request
	GetApiMeStart(ctx context.Context, params *GetApiMeStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiNotification request
	GetApiNotification(ctx context.Context, params *GetApiNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPet request
	GetApiPet(ctx context.Context, params *GetApiPetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPetWithBody request with any body
	PostApiPetWithBody(ctx context.Context, params *PostApiPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPetWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiPetParams, body PostApiPetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPet(ctx context.Context, params *PostApiPetParams, body PostApiPetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPositionDeviceId request
	GetApiPetPositionDeviceId(ctx context.Context, deviceId int, params *GetApiPetPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetStatusDeviceId request
	GetApiPetStatusDeviceId(ctx context.Context, deviceId int, params *GetApiPetStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPetPetId request
	DeleteApiPetPetId(ctx context.Context, petId int, params *DeleteApiPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetId request
	GetApiPetPetId(ctx context.Context, petId int, params *GetApiPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPetPetIdWithBody request with any body
	PutApiPetPetIdWithBody(ctx context.Context, petId int, params *PutApiPetPetIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPetPetIdWithApplicationWildcardPlusJSONBody(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPetPetId(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetIdCondition request
	GetApiPetPetIdCondition(ctx context.Context, petId int, params *GetApiPetPetIdConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPetPetIdConditionConditionId request
	DeleteApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *DeleteApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetIdConditionConditionId request
	GetApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *GetApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPetPetIdConditionConditionId request
	PutApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *PutApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetIdInsight request
	GetApiPetPetIdInsight(ctx context.Context, petId int, params *GetApiPetPetIdInsightParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPetPetIdPositionWithBody request with any body
	PostApiPetPetIdPositionWithBody(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPetPetIdPositionWithApplicationWildcardPlusJSONBody(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiPetPetIdPosition(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetIdPositionDeviceId request
	GetApiPetPetIdPositionDeviceId(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPetPetIdStatusDeviceId request
	GetApiPetPetIdStatusDeviceId(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPhoto request
	GetApiPhoto(ctx context.Context, params *GetApiPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiPhotoWithBody request with any body
	PostApiPhotoWithBody(ctx context.Context, params *PostApiPhotoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPhotoPhotoId request
	DeleteApiPhotoPhotoId(ctx context.Context, photoId int, params *DeleteApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPhotoPhotoId request
	GetApiPhotoPhotoId(ctx context.Context, photoId int, params *GetApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPhotoPhotoIdWithBody request with any body
	PutApiPhotoPhotoIdWithBody(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPhotoPhotoIdWithApplicationWildcardPlusJSONBody(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiPhotoPhotoId(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPhotoPhotoIdImageImageHash request
	GetApiPhotoPhotoIdImageImageHash(ctx context.Context, photoId int, imageHash string, params *GetApiPhotoPhotoIdImageImageHashParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProduct request
	GetApiProduct(ctx context.Context, params *GetApiProductParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProductProductId request
	GetApiProductProductId(ctx context.Context, productId int, params *GetApiProductProductIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReportHouseholdHouseholdIdPetPetId request
	GetApiReportHouseholdHouseholdIdPetPetId(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReportHouseholdHouseholdIdPetPetIdAggregate request
	GetApiReportHouseholdHouseholdIdPetPetIdAggregate(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId request
	GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId(ctx context.Context, householdId int, petId int, deviceId int, params *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSpecies request
	GetApiSpecies(ctx context.Context, params *GetApiSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSpeciesSpeciesId request
	GetApiSpeciesSpeciesId(ctx context.Context, speciesId int, params *GetApiSpeciesSpeciesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiStart request
	GetApiStart(ctx context.Context, params *GetApiStartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTag request
	GetApiTag(ctx context.Context, params *GetApiTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTagTagId request
	GetApiTagTagId(ctx context.Context, tagId int, params *GetApiTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTagTagIdDevice request
	GetApiTagTagIdDevice(ctx context.Context, tagId int, params *GetApiTagTagIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTagTagIdDeviceDeviceId request
	GetApiTagTagIdDeviceDeviceId(ctx context.Context, tagId int, deviceId int, params *GetApiTagTagIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimeline request
	GetApiTimeline(ctx context.Context, params *GetApiTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimelineHouseholdHouseholdId request
	GetApiTimelineHouseholdHouseholdId(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimelineHouseholdHouseholdIdDevice request
	GetApiTimelineHouseholdHouseholdIdDevice(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimelineHouseholdHouseholdIdPet request
	GetApiTimelineHouseholdHouseholdIdPet(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimelineHouseholdHouseholdIdUser request
	GetApiTimelineHouseholdHouseholdIdUser(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimezone request
	GetApiTimezone(ctx context.Context, params *GetApiTimezoneParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTimezoneTimezoneId request
	GetApiTimezoneTimezoneId(ctx context.Context, timezoneId int, params *GetApiTimezoneTimezoneIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTranslation request
	GetApiTranslation(ctx context.Context, params *GetApiTranslationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTranslationLanguage request
	GetApiTranslationLanguage(ctx context.Context, language string, params *GetApiTranslationLanguageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUserUserId request
	GetApiUserUserId(ctx context.Context, userId int, params *GetApiUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiAnimoPet(ctx context.Context, params *GetApiAnimoPetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAnimoPetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthChangePasswordWithBody(ctx context.Context, params *PostApiAuthChangePasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthChangePasswordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthChangePasswordWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthChangePasswordRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthChangePassword(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthChangePasswordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLoginWithBody(ctx context.Context, params *PostApiAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLoginWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogin(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogoutWithBody(ctx context.Context, params *PostApiAuthLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogoutWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogout(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLogoutRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegisterWithBody(ctx context.Context, params *PostApiAuthRegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegisterWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegister(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPasswordWithBody(ctx context.Context, params *PostApiAuthResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPasswordWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPassword(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPasswordRequestWithBody(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequestRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequestRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthResetPasswordRequest(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthResetPasswordRequestRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBreed(ctx context.Context, params *GetApiBreedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBreedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiBreedBreedId(ctx context.Context, breedId int, params *GetApiBreedBreedIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiBreedBreedIdRequest(c.Server, breedId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCondition(ctx context.Context, params *GetApiConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiConditionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiConditionConditionId(ctx context.Context, conditionId int, params *GetApiConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiConditionConditionIdRequest(c.Server, conditionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCountry(ctx context.Context, params *GetApiCountryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCountryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiCountryCountryId(ctx context.Context, countryId int, params *GetApiCountryCountryIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiCountryCountryIdRequest(c.Server, countryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDashboardPet(ctx context.Context, params *GetApiDashboardPetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDashboardPetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDevice(ctx context.Context, params *GetApiDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceNeedsUpdate(ctx context.Context, params *GetApiDeviceNeedsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceNeedsUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDevicePairHouseholdIdWithBody(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDevicePairHouseholdIdRequestWithBody(c.Server, householdId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDevicePairHouseholdIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDevicePairHouseholdIdRequestWithApplicationWildcardPlusJSONBody(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDevicePairHouseholdId(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDevicePairHouseholdIdRequest(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDevicePairing(ctx context.Context, params *GetApiDevicePairingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDevicePairingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDeviceDeviceId(ctx context.Context, deviceId int, params *DeleteApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDeviceDeviceIdRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceId(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdWithBody(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdRequestWithBody(c.Server, deviceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdRequestWithApplicationWildcardPlusJSONBody(c.Server, deviceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceId(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdRequest(c.Server, deviceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdControl(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdControlRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdControl(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdControlRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdControlAsync(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlAsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdControlAsyncRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdControlStatus(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdControlStatusRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdControlStatusRequestId(ctx context.Context, deviceId int, requestId openapi_types.UUID, params *GetApiDeviceDeviceIdControlStatusRequestIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdControlStatusRequestIdRequest(c.Server, deviceId, requestId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDeviceDeviceIdPairHouseholdId(ctx context.Context, deviceId int, householdId int, params *PostApiDeviceDeviceIdPairHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDeviceDeviceIdPairHouseholdIdRequest(c.Server, deviceId, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdStatus(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdStatusRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdTag(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdTagRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDeviceDeviceIdTagTagIdRequest(c.Server, deviceId, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *GetApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDeviceDeviceIdTagTagIdRequest(c.Server, deviceId, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagIdWithBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdRequestWithBody(c.Server, deviceId, tagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagIdWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdRequestWithApplicationWildcardPlusJSONBody(c.Server, deviceId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagId(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdRequest(c.Server, deviceId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDeviceDeviceIdTagTagIdAsync(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdAsyncParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDeviceDeviceIdTagTagIdAsyncRequest(c.Server, deviceId, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagIdAsyncWithBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithBody(c.Server, deviceId, tagId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagIdAsyncWithApplicationWildcardPlusJSONBody(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithApplicationWildcardPlusJSONBody(c.Server, deviceId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDeviceDeviceIdTagTagIdAsync(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDeviceDeviceIdTagTagIdAsyncRequest(c.Server, deviceId, tagId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFoodType(ctx context.Context, params *GetApiFoodTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFoodTypeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiFoodTypeFoodTypeId(ctx context.Context, foodTypeId int, params *GetApiFoodTypeFoodTypeIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiFoodTypeFoodTypeIdRequest(c.Server, foodTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHousehold(ctx context.Context, params *GetApiHouseholdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdWithBody(ctx context.Context, params *PostApiHouseholdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHousehold(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiHouseholdHouseholdId(ctx context.Context, householdId int, params *DeleteApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiHouseholdHouseholdIdRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdId(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdWithBody(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdRequestWithBody(c.Server, householdId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdRequestWithApplicationWildcardPlusJSONBody(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdId(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdRequest(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdDevice(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdDeviceRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdDeviceDeviceId(ctx context.Context, householdId int, deviceId int, params *GetApiHouseholdHouseholdIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdDeviceDeviceIdRequest(c.Server, householdId, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdInvite(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdInviteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdInviteRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdHouseholdIdInviteWithBody(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdHouseholdIdInviteRequestWithBody(c.Server, householdId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdHouseholdIdInviteWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdHouseholdIdInviteRequestWithApplicationWildcardPlusJSONBody(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdHouseholdIdInvite(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdHouseholdIdInviteRequest(c.Server, householdId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *DeleteApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiHouseholdHouseholdIdInviteInviteIdRequest(c.Server, householdId, inviteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *GetApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdInviteInviteIdRequest(c.Server, householdId, inviteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdInviteInviteIdWithBody(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithBody(c.Server, householdId, inviteId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdInviteInviteIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithApplicationWildcardPlusJSONBody(c.Server, householdId, inviteId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdInviteInviteId(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdInviteInviteIdRequest(c.Server, householdId, inviteId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHouseholdHouseholdIdInviteInviteIdResend(ctx context.Context, householdId int, inviteId int, params *PostApiHouseholdHouseholdIdInviteInviteIdResendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHouseholdHouseholdIdInviteInviteIdResendRequest(c.Server, householdId, inviteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdPet(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdPetRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdPetPetId(ctx context.Context, householdId int, petId int, params *GetApiHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdPetPetIdRequest(c.Server, householdId, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdUser(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdUserRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *DeleteApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiHouseholdHouseholdIdUserUserIdRequest(c.Server, householdId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *GetApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHouseholdHouseholdIdUserUserIdRequest(c.Server, householdId, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdUserUserIdWithBody(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdUserUserIdRequestWithBody(c.Server, householdId, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdUserUserIdWithApplicationWildcardPlusJSONBody(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdUserUserIdRequestWithApplicationWildcardPlusJSONBody(c.Server, householdId, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHouseholdHouseholdIdUserUserId(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHouseholdHouseholdIdUserUserIdRequest(c.Server, householdId, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInfo(ctx context.Context, params *GetApiInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInvite(ctx context.Context, params *GetApiInviteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInviteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInviteInviteCodeAccept(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeAcceptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInviteInviteCodeAcceptRequest(c.Server, inviteCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiInviteInviteCodeReject(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeRejectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiInviteInviteCodeRejectRequest(c.Server, inviteCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiInviteInviteId(ctx context.Context, inviteId int, params *GetApiInviteInviteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiInviteInviteIdRequest(c.Server, inviteId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLanguage(ctx context.Context, params *GetApiLanguageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLanguageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiLanguageLanguageId(ctx context.Context, languageId int, params *GetApiLanguageLanguageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiLanguageLanguageIdRequest(c.Server, languageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiMe(ctx context.Context, params *DeleteApiMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMe(ctx context.Context, params *GetApiMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMeWithBody(ctx context.Context, params *PutApiMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMeWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PutApiMeParams, body PutApiMeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMeRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMe(ctx context.Context, params *PutApiMeParams, body PutApiMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiMeAcceptTerms(ctx context.Context, params *PutApiMeAcceptTermsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiMeAcceptTermsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMeClient(ctx context.Context, params *GetApiMeClientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMeClientRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeClientWithBody(ctx context.Context, params *PostApiMeClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeClientRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeClientWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeClientRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeClient(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeClientRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeDeleteWithBody(ctx context.Context, params *PostApiMeDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeDeleteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeDeleteRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMeDelete(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMeDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMeStart(ctx context.Context, params *GetApiMeStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMeStartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiNotification(ctx context.Context, params *GetApiNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiNotificationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPet(ctx context.Context, params *GetApiPetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPetWithBody(ctx context.Context, params *PostApiPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPetWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiPetParams, body PostApiPetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPet(ctx context.Context, params *PostApiPetParams, body PostApiPetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPositionDeviceId(ctx context.Context, deviceId int, params *GetApiPetPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPositionDeviceIdRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetStatusDeviceId(ctx context.Context, deviceId int, params *GetApiPetStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetStatusDeviceIdRequest(c.Server, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPetPetId(ctx context.Context, petId int, params *DeleteApiPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPetPetIdRequest(c.Server, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetId(ctx context.Context, petId int, params *GetApiPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdRequest(c.Server, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPetPetIdWithBody(ctx context.Context, petId int, params *PutApiPetPetIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPetPetIdRequestWithBody(c.Server, petId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPetPetIdWithApplicationWildcardPlusJSONBody(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPetPetIdRequestWithApplicationWildcardPlusJSONBody(c.Server, petId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPetPetId(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPetPetIdRequest(c.Server, petId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetIdCondition(ctx context.Context, petId int, params *GetApiPetPetIdConditionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdConditionRequest(c.Server, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *DeleteApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPetPetIdConditionConditionIdRequest(c.Server, petId, conditionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *GetApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdConditionConditionIdRequest(c.Server, petId, conditionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPetPetIdConditionConditionId(ctx context.Context, petId int, conditionId int, params *PutApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPetPetIdConditionConditionIdRequest(c.Server, petId, conditionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetIdInsight(ctx context.Context, petId int, params *GetApiPetPetIdInsightParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdInsightRequest(c.Server, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPetPetIdPositionWithBody(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetPetIdPositionRequestWithBody(c.Server, petId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPetPetIdPositionWithApplicationWildcardPlusJSONBody(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetPetIdPositionRequestWithApplicationWildcardPlusJSONBody(c.Server, petId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPetPetIdPosition(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPetPetIdPositionRequest(c.Server, petId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetIdPositionDeviceId(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdPositionDeviceIdRequest(c.Server, petId, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPetPetIdStatusDeviceId(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPetPetIdStatusDeviceIdRequest(c.Server, petId, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPhoto(ctx context.Context, params *GetApiPhotoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPhotoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiPhotoWithBody(ctx context.Context, params *PostApiPhotoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiPhotoRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiPhotoPhotoId(ctx context.Context, photoId int, params *DeleteApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPhotoPhotoIdRequest(c.Server, photoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPhotoPhotoId(ctx context.Context, photoId int, params *GetApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPhotoPhotoIdRequest(c.Server, photoId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPhotoPhotoIdWithBody(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPhotoPhotoIdRequestWithBody(c.Server, photoId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPhotoPhotoIdWithApplicationWildcardPlusJSONBody(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPhotoPhotoIdRequestWithApplicationWildcardPlusJSONBody(c.Server, photoId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPhotoPhotoId(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPhotoPhotoIdRequest(c.Server, photoId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiPhotoPhotoIdImageImageHash(ctx context.Context, photoId int, imageHash string, params *GetApiPhotoPhotoIdImageImageHashParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPhotoPhotoIdImageImageHashRequest(c.Server, photoId, imageHash, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProduct(ctx context.Context, params *GetApiProductParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProductProductId(ctx context.Context, productId int, params *GetApiProductProductIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProductProductIdRequest(c.Server, productId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReportHouseholdHouseholdIdPetPetId(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReportHouseholdHouseholdIdPetPetIdRequest(c.Server, householdId, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReportHouseholdHouseholdIdPetPetIdAggregate(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReportHouseholdHouseholdIdPetPetIdAggregateRequest(c.Server, householdId, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId(ctx context.Context, householdId int, petId int, deviceId int, params *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdRequest(c.Server, householdId, petId, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSpecies(ctx context.Context, params *GetApiSpeciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSpeciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSpeciesSpeciesId(ctx context.Context, speciesId int, params *GetApiSpeciesSpeciesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSpeciesSpeciesIdRequest(c.Server, speciesId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiStart(ctx context.Context, params *GetApiStartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiStartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTag(ctx context.Context, params *GetApiTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTagTagId(ctx context.Context, tagId int, params *GetApiTagTagIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTagTagIdRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTagTagIdDevice(ctx context.Context, tagId int, params *GetApiTagTagIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTagTagIdDeviceRequest(c.Server, tagId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTagTagIdDeviceDeviceId(ctx context.Context, tagId int, deviceId int, params *GetApiTagTagIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTagTagIdDeviceDeviceIdRequest(c.Server, tagId, deviceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimeline(ctx context.Context, params *GetApiTimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimelineHouseholdHouseholdId(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimelineHouseholdHouseholdIdRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimelineHouseholdHouseholdIdDevice(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimelineHouseholdHouseholdIdDeviceRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimelineHouseholdHouseholdIdPet(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimelineHouseholdHouseholdIdPetRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimelineHouseholdHouseholdIdUser(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimelineHouseholdHouseholdIdUserRequest(c.Server, householdId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimezone(ctx context.Context, params *GetApiTimezoneParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimezoneRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTimezoneTimezoneId(ctx context.Context, timezoneId int, params *GetApiTimezoneTimezoneIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimezoneTimezoneIdRequest(c.Server, timezoneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTranslation(ctx context.Context, params *GetApiTranslationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTranslationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTranslationLanguage(ctx context.Context, language string, params *GetApiTranslationLanguageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTranslationLanguageRequest(c.Server, language, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUserUserId(ctx context.Context, userId int, params *GetApiUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUserUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiAnimoPetRequest generates requests for GetApiAnimoPet
func NewGetApiAnimoPetRequest(server string, params *GetApiAnimoPetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/animo/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.HouseholdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HouseholdId", runtime.ParamLocationQuery, *params.HouseholdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAuthChangePasswordRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthChangePassword builder with application/*+json body
func NewPostApiAuthChangePasswordRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthChangePasswordRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthChangePasswordRequest calls the generic PostApiAuthChangePassword builder with application/json body
func NewPostApiAuthChangePasswordRequest(server string, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthChangePasswordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthChangePasswordRequestWithBody generates requests for PostApiAuthChangePassword with any type of body
func NewPostApiAuthChangePasswordRequestWithBody(server string, params *PostApiAuthChangePasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/change-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthLoginRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthLogin builder with application/*+json body
func NewPostApiAuthLoginRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthLoginParams, body PostApiAuthLoginApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLoginRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthLoginRequest calls the generic PostApiAuthLogin builder with application/json body
func NewPostApiAuthLoginRequest(server string, params *PostApiAuthLoginParams, body PostApiAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthLoginRequestWithBody generates requests for PostApiAuthLogin with any type of body
func NewPostApiAuthLoginRequestWithBody(server string, params *PostApiAuthLoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthLogoutRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthLogout builder with application/*+json body
func NewPostApiAuthLogoutRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthLogoutParams, body PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLogoutRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthLogoutRequest calls the generic PostApiAuthLogout builder with application/json body
func NewPostApiAuthLogoutRequest(server string, params *PostApiAuthLogoutParams, body PostApiAuthLogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLogoutRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthLogoutRequestWithBody generates requests for PostApiAuthLogout with any type of body
func NewPostApiAuthLogoutRequestWithBody(server string, params *PostApiAuthLogoutParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XDeviceId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Device-Id", runtime.ParamLocationHeader, *params.XDeviceId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Device-Id", headerParam0)
		}

	}

	return req, nil
}

// NewPostApiAuthRegisterRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthRegister builder with application/*+json body
func NewPostApiAuthRegisterRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthRegisterParams, body PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRegisterRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthRegisterRequest calls the generic PostApiAuthRegister builder with application/json body
func NewPostApiAuthRegisterRequest(server string, params *PostApiAuthRegisterParams, body PostApiAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRegisterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthRegisterRequestWithBody generates requests for PostApiAuthRegister with any type of body
func NewPostApiAuthRegisterRequestWithBody(server string, params *PostApiAuthRegisterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthResetPassword builder with application/*+json body
func NewPostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthResetPasswordRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthResetPasswordRequest calls the generic PostApiAuthResetPassword builder with application/json body
func NewPostApiAuthResetPasswordRequest(server string, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthResetPasswordRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthResetPasswordRequestWithBody generates requests for PostApiAuthResetPassword with any type of body
func NewPostApiAuthResetPasswordRequestWithBody(server string, params *PostApiAuthResetPasswordParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/reset-password")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthResetPasswordRequestRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiAuthResetPasswordRequest builder with application/*+json body
func NewPostApiAuthResetPasswordRequestRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthResetPasswordRequestRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiAuthResetPasswordRequestRequest calls the generic PostApiAuthResetPasswordRequest builder with application/json body
func NewPostApiAuthResetPasswordRequestRequest(server string, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthResetPasswordRequestRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiAuthResetPasswordRequestRequestWithBody generates requests for PostApiAuthResetPasswordRequest with any type of body
func NewPostApiAuthResetPasswordRequestRequestWithBody(server string, params *PostApiAuthResetPasswordRequestParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/reset-password/request")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiBreedRequest generates requests for GetApiBreed
func NewGetApiBreedRequest(server string, params *GetApiBreedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/breed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SpeciesId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SpeciesId", runtime.ParamLocationQuery, *params.SpeciesId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiBreedBreedIdRequest generates requests for GetApiBreedBreedId
func NewGetApiBreedBreedIdRequest(server string, breedId int, params *GetApiBreedBreedIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "breedId", runtime.ParamLocationPath, breedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/breed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiConditionRequest generates requests for GetApiCondition
func NewGetApiConditionRequest(server string, params *GetApiConditionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/condition")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiConditionConditionIdRequest generates requests for GetApiConditionConditionId
func NewGetApiConditionConditionIdRequest(server string, conditionId int, params *GetApiConditionConditionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/condition/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCountryRequest generates requests for GetApiCountry
func NewGetApiCountryRequest(server string, params *GetApiCountryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/country")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsoCode2 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IsoCode2", runtime.ParamLocationQuery, *params.IsoCode2); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiCountryCountryIdRequest generates requests for GetApiCountryCountryId
func NewGetApiCountryCountryIdRequest(server string, countryId int, params *GetApiCountryCountryIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "countryId", runtime.ParamLocationPath, countryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/country/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDashboardPetRequest generates requests for GetApiDashboardPet
func NewGetApiDashboardPetRequest(server string, params *GetApiDashboardPetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dashboard/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PetId", runtime.ParamLocationQuery, params.PetId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DaysHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DaysHistory", runtime.ParamLocationQuery, *params.DaysHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceRequest generates requests for GetApiDevice
func NewGetApiDeviceRequest(server string, params *GetApiDeviceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.XivelyDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "XivelyDeviceId", runtime.ParamLocationQuery, *params.XivelyDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MacAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MacAddress", runtime.ParamLocationQuery, *params.MacAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SerialNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SerialNumber", runtime.ParamLocationQuery, *params.SerialNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PublicSerialNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PublicSerialNumber", runtime.ParamLocationQuery, *params.PublicSerialNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ProductId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ParentDeviceId", runtime.ParamLocationQuery, *params.ParentDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HouseholdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HouseholdId", runtime.ParamLocationQuery, *params.HouseholdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceNeedsUpdateRequest generates requests for GetApiDeviceNeedsUpdate
func NewGetApiDeviceNeedsUpdateRequest(server string, params *GetApiDeviceNeedsUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/needs-update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDevicePairHouseholdIdRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiDevicePairHouseholdId builder with application/*+json body
func NewPostApiDevicePairHouseholdIdRequestWithApplicationWildcardPlusJSONBody(server string, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDevicePairHouseholdIdRequestWithBody(server, householdId, params, "application/*+json", bodyReader)
}

// NewPostApiDevicePairHouseholdIdRequest calls the generic PostApiDevicePairHouseholdId builder with application/json body
func NewPostApiDevicePairHouseholdIdRequest(server string, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDevicePairHouseholdIdRequestWithBody(server, householdId, params, "application/json", bodyReader)
}

// NewPostApiDevicePairHouseholdIdRequestWithBody generates requests for PostApiDevicePairHouseholdId with any type of body
func NewPostApiDevicePairHouseholdIdRequestWithBody(server string, householdId int, params *PostApiDevicePairHouseholdIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/pair/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDevicePairingRequest generates requests for GetApiDevicePairing
func NewGetApiDevicePairingRequest(server string, params *GetApiDevicePairingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/pairing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiDeviceDeviceIdRequest generates requests for DeleteApiDeviceDeviceId
func NewDeleteApiDeviceDeviceIdRequest(server string, deviceId int, params *DeleteApiDeviceDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdRequest generates requests for GetApiDeviceDeviceId
func NewGetApiDeviceDeviceIdRequest(server string, deviceId int, params *GetApiDeviceDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDeviceDeviceIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiDeviceDeviceId builder with application/*+json body
func NewPutApiDeviceDeviceIdRequestWithApplicationWildcardPlusJSONBody(server string, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdRequestWithBody(server, deviceId, params, "application/*+json", bodyReader)
}

// NewPutApiDeviceDeviceIdRequest calls the generic PutApiDeviceDeviceId builder with application/json body
func NewPutApiDeviceDeviceIdRequest(server string, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdRequestWithBody(server, deviceId, params, "application/json", bodyReader)
}

// NewPutApiDeviceDeviceIdRequestWithBody generates requests for PutApiDeviceDeviceId with any type of body
func NewPutApiDeviceDeviceIdRequestWithBody(server string, deviceId int, params *PutApiDeviceDeviceIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDeviceDeviceIdControlRequest generates requests for GetApiDeviceDeviceIdControl
func NewGetApiDeviceDeviceIdControlRequest(server string, deviceId int, params *GetApiDeviceDeviceIdControlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/control", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDeviceDeviceIdControlRequest generates requests for PutApiDeviceDeviceIdControl
func NewPutApiDeviceDeviceIdControlRequest(server string, deviceId int, params *PutApiDeviceDeviceIdControlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/control", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDeviceDeviceIdControlAsyncRequest generates requests for PutApiDeviceDeviceIdControlAsync
func NewPutApiDeviceDeviceIdControlAsyncRequest(server string, deviceId int, params *PutApiDeviceDeviceIdControlAsyncParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/control/async", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdControlStatusRequest generates requests for GetApiDeviceDeviceIdControlStatus
func NewGetApiDeviceDeviceIdControlStatusRequest(server string, deviceId int, params *GetApiDeviceDeviceIdControlStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/control/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdControlStatusRequestIdRequest generates requests for GetApiDeviceDeviceIdControlStatusRequestId
func NewGetApiDeviceDeviceIdControlStatusRequestIdRequest(server string, deviceId int, requestId openapi_types.UUID, params *GetApiDeviceDeviceIdControlStatusRequestIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/control/status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDeviceDeviceIdPairHouseholdIdRequest generates requests for PostApiDeviceDeviceIdPairHouseholdId
func NewPostApiDeviceDeviceIdPairHouseholdIdRequest(server string, deviceId int, householdId int, params *PostApiDeviceDeviceIdPairHouseholdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/pair/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdStatusRequest generates requests for GetApiDeviceDeviceIdStatus
func NewGetApiDeviceDeviceIdStatusRequest(server string, deviceId int, params *GetApiDeviceDeviceIdStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdTagRequest generates requests for GetApiDeviceDeviceIdTag
func NewGetApiDeviceDeviceIdTagRequest(server string, deviceId int, params *GetApiDeviceDeviceIdTagParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiDeviceDeviceIdTagTagIdRequest generates requests for DeleteApiDeviceDeviceIdTagTagId
func NewDeleteApiDeviceDeviceIdTagTagIdRequest(server string, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDeviceDeviceIdTagTagIdRequest generates requests for GetApiDeviceDeviceIdTagTagId
func NewGetApiDeviceDeviceIdTagTagIdRequest(server string, deviceId int, tagId int, params *GetApiDeviceDeviceIdTagTagIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDeviceDeviceIdTagTagIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiDeviceDeviceIdTagTagId builder with application/*+json body
func NewPutApiDeviceDeviceIdTagTagIdRequestWithApplicationWildcardPlusJSONBody(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdTagTagIdRequestWithBody(server, deviceId, tagId, params, "application/*+json", bodyReader)
}

// NewPutApiDeviceDeviceIdTagTagIdRequest calls the generic PutApiDeviceDeviceIdTagTagId builder with application/json body
func NewPutApiDeviceDeviceIdTagTagIdRequest(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdTagTagIdRequestWithBody(server, deviceId, tagId, params, "application/json", bodyReader)
}

// NewPutApiDeviceDeviceIdTagTagIdRequestWithBody generates requests for PutApiDeviceDeviceIdTagTagId with any type of body
func NewPutApiDeviceDeviceIdTagTagIdRequestWithBody(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiDeviceDeviceIdTagTagIdAsyncRequest generates requests for DeleteApiDeviceDeviceIdTagTagIdAsync
func NewDeleteApiDeviceDeviceIdTagTagIdAsyncRequest(server string, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdAsyncParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag/%s/async", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiDeviceDeviceIdTagTagIdAsync builder with application/*+json body
func NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithApplicationWildcardPlusJSONBody(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithBody(server, deviceId, tagId, params, "application/*+json", bodyReader)
}

// NewPutApiDeviceDeviceIdTagTagIdAsyncRequest calls the generic PutApiDeviceDeviceIdTagTagIdAsync builder with application/json body
func NewPutApiDeviceDeviceIdTagTagIdAsyncRequest(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithBody(server, deviceId, tagId, params, "application/json", bodyReader)
}

// NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithBody generates requests for PutApiDeviceDeviceIdTagTagIdAsync with any type of body
func NewPutApiDeviceDeviceIdTagTagIdAsyncRequestWithBody(server string, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/device/%s/tag/%s/async", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiFoodTypeRequest generates requests for GetApiFoodType
func NewGetApiFoodTypeRequest(server string, params *GetApiFoodTypeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiFoodTypeFoodTypeIdRequest generates requests for GetApiFoodTypeFoodTypeId
func NewGetApiFoodTypeFoodTypeIdRequest(server string, foodTypeId int, params *GetApiFoodTypeFoodTypeIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "foodTypeId", runtime.ParamLocationPath, foodTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/food-type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdRequest generates requests for GetApiHousehold
func NewGetApiHouseholdRequest(server string, params *GetApiHouseholdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiHouseholdRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiHousehold builder with application/*+json body
func NewPostApiHouseholdRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiHouseholdParams, body PostApiHouseholdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHouseholdRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiHouseholdRequest calls the generic PostApiHousehold builder with application/json body
func NewPostApiHouseholdRequest(server string, params *PostApiHouseholdParams, body PostApiHouseholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHouseholdRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiHouseholdRequestWithBody generates requests for PostApiHousehold with any type of body
func NewPostApiHouseholdRequestWithBody(server string, params *PostApiHouseholdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiHouseholdHouseholdIdRequest generates requests for DeleteApiHouseholdHouseholdId
func NewDeleteApiHouseholdHouseholdIdRequest(server string, householdId int, params *DeleteApiHouseholdHouseholdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdRequest generates requests for GetApiHouseholdHouseholdId
func NewGetApiHouseholdHouseholdIdRequest(server string, householdId int, params *GetApiHouseholdHouseholdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiHouseholdHouseholdIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiHouseholdHouseholdId builder with application/*+json body
func NewPutApiHouseholdHouseholdIdRequestWithApplicationWildcardPlusJSONBody(server string, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdRequestWithBody(server, householdId, params, "application/*+json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdRequest calls the generic PutApiHouseholdHouseholdId builder with application/json body
func NewPutApiHouseholdHouseholdIdRequest(server string, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdRequestWithBody(server, householdId, params, "application/json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdRequestWithBody generates requests for PutApiHouseholdHouseholdId with any type of body
func NewPutApiHouseholdHouseholdIdRequestWithBody(server string, householdId int, params *PutApiHouseholdHouseholdIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHouseholdHouseholdIdDeviceRequest generates requests for GetApiHouseholdHouseholdIdDevice
func NewGetApiHouseholdHouseholdIdDeviceRequest(server string, householdId int, params *GetApiHouseholdHouseholdIdDeviceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/device", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdDeviceDeviceIdRequest generates requests for GetApiHouseholdHouseholdIdDeviceDeviceId
func NewGetApiHouseholdHouseholdIdDeviceDeviceIdRequest(server string, householdId int, deviceId int, params *GetApiHouseholdHouseholdIdDeviceDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/device/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdInviteRequest generates requests for GetApiHouseholdHouseholdIdInvite
func NewGetApiHouseholdHouseholdIdInviteRequest(server string, householdId int, params *GetApiHouseholdHouseholdIdInviteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiHouseholdHouseholdIdInviteRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiHouseholdHouseholdIdInvite builder with application/*+json body
func NewPostApiHouseholdHouseholdIdInviteRequestWithApplicationWildcardPlusJSONBody(server string, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHouseholdHouseholdIdInviteRequestWithBody(server, householdId, params, "application/*+json", bodyReader)
}

// NewPostApiHouseholdHouseholdIdInviteRequest calls the generic PostApiHouseholdHouseholdIdInvite builder with application/json body
func NewPostApiHouseholdHouseholdIdInviteRequest(server string, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHouseholdHouseholdIdInviteRequestWithBody(server, householdId, params, "application/json", bodyReader)
}

// NewPostApiHouseholdHouseholdIdInviteRequestWithBody generates requests for PostApiHouseholdHouseholdIdInvite with any type of body
func NewPostApiHouseholdHouseholdIdInviteRequestWithBody(server string, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiHouseholdHouseholdIdInviteInviteIdRequest generates requests for DeleteApiHouseholdHouseholdIdInviteInviteId
func NewDeleteApiHouseholdHouseholdIdInviteInviteIdRequest(server string, householdId int, inviteId int, params *DeleteApiHouseholdHouseholdIdInviteInviteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdInviteInviteIdRequest generates requests for GetApiHouseholdHouseholdIdInviteInviteId
func NewGetApiHouseholdHouseholdIdInviteInviteIdRequest(server string, householdId int, inviteId int, params *GetApiHouseholdHouseholdIdInviteInviteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiHouseholdHouseholdIdInviteInviteId builder with application/*+json body
func NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithApplicationWildcardPlusJSONBody(server string, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithBody(server, householdId, inviteId, params, "application/*+json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdInviteInviteIdRequest calls the generic PutApiHouseholdHouseholdIdInviteInviteId builder with application/json body
func NewPutApiHouseholdHouseholdIdInviteInviteIdRequest(server string, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithBody(server, householdId, inviteId, params, "application/json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithBody generates requests for PutApiHouseholdHouseholdIdInviteInviteId with any type of body
func NewPutApiHouseholdHouseholdIdInviteInviteIdRequestWithBody(server string, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiHouseholdHouseholdIdInviteInviteIdResendRequest generates requests for PostApiHouseholdHouseholdIdInviteInviteIdResend
func NewPostApiHouseholdHouseholdIdInviteInviteIdResendRequest(server string, householdId int, inviteId int, params *PostApiHouseholdHouseholdIdInviteInviteIdResendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/invite/%s/resend", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdPetRequest generates requests for GetApiHouseholdHouseholdIdPet
func NewGetApiHouseholdHouseholdIdPetRequest(server string, householdId int, params *GetApiHouseholdHouseholdIdPetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/pet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdPetPetIdRequest generates requests for GetApiHouseholdHouseholdIdPetPetId
func NewGetApiHouseholdHouseholdIdPetPetIdRequest(server string, householdId int, petId int, params *GetApiHouseholdHouseholdIdPetPetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/pet/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdUserRequest generates requests for GetApiHouseholdHouseholdIdUser
func NewGetApiHouseholdHouseholdIdUserRequest(server string, householdId int, params *GetApiHouseholdHouseholdIdUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiHouseholdHouseholdIdUserUserIdRequest generates requests for DeleteApiHouseholdHouseholdIdUserUserId
func NewDeleteApiHouseholdHouseholdIdUserUserIdRequest(server string, householdId int, userId int, params *DeleteApiHouseholdHouseholdIdUserUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHouseholdHouseholdIdUserUserIdRequest generates requests for GetApiHouseholdHouseholdIdUserUserId
func NewGetApiHouseholdHouseholdIdUserUserIdRequest(server string, householdId int, userId int, params *GetApiHouseholdHouseholdIdUserUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiHouseholdHouseholdIdUserUserIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiHouseholdHouseholdIdUserUserId builder with application/*+json body
func NewPutApiHouseholdHouseholdIdUserUserIdRequestWithApplicationWildcardPlusJSONBody(server string, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdUserUserIdRequestWithBody(server, householdId, userId, params, "application/*+json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdUserUserIdRequest calls the generic PutApiHouseholdHouseholdIdUserUserId builder with application/json body
func NewPutApiHouseholdHouseholdIdUserUserIdRequest(server string, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHouseholdHouseholdIdUserUserIdRequestWithBody(server, householdId, userId, params, "application/json", bodyReader)
}

// NewPutApiHouseholdHouseholdIdUserUserIdRequestWithBody generates requests for PutApiHouseholdHouseholdIdUserUserId with any type of body
func NewPutApiHouseholdHouseholdIdUserUserIdRequestWithBody(server string, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/household/%s/user/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiInfoRequest generates requests for GetApiInfo
func NewGetApiInfoRequest(server string, params *GetApiInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInviteRequest generates requests for GetApiInvite
func NewGetApiInviteRequest(server string, params *GetApiInviteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInviteInviteCodeAcceptRequest generates requests for PostApiInviteInviteCodeAccept
func NewPostApiInviteInviteCodeAcceptRequest(server string, inviteCode string, params *PostApiInviteInviteCodeAcceptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteCode", runtime.ParamLocationPath, inviteCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/invite/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiInviteInviteCodeRejectRequest generates requests for PostApiInviteInviteCodeReject
func NewPostApiInviteInviteCodeRejectRequest(server string, inviteCode string, params *PostApiInviteInviteCodeRejectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteCode", runtime.ParamLocationPath, inviteCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/invite/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiInviteInviteIdRequest generates requests for GetApiInviteInviteId
func NewGetApiInviteInviteIdRequest(server string, inviteId int, params *GetApiInviteInviteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/invite/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiLanguageRequest generates requests for GetApiLanguage
func NewGetApiLanguageRequest(server string, params *GetApiLanguageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/language")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsoCode1 != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IsoCode1", runtime.ParamLocationQuery, *params.IsoCode1); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiLanguageLanguageIdRequest generates requests for GetApiLanguageLanguageId
func NewGetApiLanguageLanguageIdRequest(server string, languageId int, params *GetApiLanguageLanguageIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "languageId", runtime.ParamLocationPath, languageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/language/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiMeRequest generates requests for DeleteApiMe
func NewDeleteApiMeRequest(server string, params *DeleteApiMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMeRequest generates requests for GetApiMe
func NewGetApiMeRequest(server string, params *GetApiMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiMeRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiMe builder with application/*+json body
func NewPutApiMeRequestWithApplicationWildcardPlusJSONBody(server string, params *PutApiMeParams, body PutApiMeApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiMeRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPutApiMeRequest calls the generic PutApiMe builder with application/json body
func NewPutApiMeRequest(server string, params *PutApiMeParams, body PutApiMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiMeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutApiMeRequestWithBody generates requests for PutApiMe with any type of body
func NewPutApiMeRequestWithBody(server string, params *PutApiMeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiMeAcceptTermsRequest generates requests for PutApiMeAcceptTerms
func NewPutApiMeAcceptTermsRequest(server string, params *PutApiMeAcceptTermsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/accept-terms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMeClientRequest generates requests for GetApiMeClient
func NewGetApiMeClientRequest(server string, params *GetApiMeClientParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMeClientRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiMeClient builder with application/*+json body
func NewPostApiMeClientRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiMeClientParams, body PostApiMeClientApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMeClientRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiMeClientRequest calls the generic PostApiMeClient builder with application/json body
func NewPostApiMeClientRequest(server string, params *PostApiMeClientParams, body PostApiMeClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMeClientRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiMeClientRequestWithBody generates requests for PostApiMeClient with any type of body
func NewPostApiMeClientRequestWithBody(server string, params *PostApiMeClientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiMeDeleteRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiMeDelete builder with application/*+json body
func NewPostApiMeDeleteRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiMeDeleteParams, body PostApiMeDeleteApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMeDeleteRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiMeDeleteRequest calls the generic PostApiMeDelete builder with application/json body
func NewPostApiMeDeleteRequest(server string, params *PostApiMeDeleteParams, body PostApiMeDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMeDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiMeDeleteRequestWithBody generates requests for PostApiMeDelete with any type of body
func NewPostApiMeDeleteRequestWithBody(server string, params *PostApiMeDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiMeStartRequest generates requests for GetApiMeStart
func NewGetApiMeStartRequest(server string, params *GetApiMeStartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/me/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiNotificationRequest generates requests for GetApiNotification
func NewGetApiNotificationRequest(server string, params *GetApiNotificationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/notification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetRequest generates requests for GetApiPet
func NewGetApiPetRequest(server string, params *GetApiPetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.HouseholdId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "HouseholdId", runtime.ParamLocationQuery, *params.HouseholdId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPetRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiPet builder with application/*+json body
func NewPostApiPetRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiPetParams, body PostApiPetApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPetRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiPetRequest calls the generic PostApiPet builder with application/json body
func NewPostApiPetRequest(server string, params *PostApiPetParams, body PostApiPetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiPetRequestWithBody generates requests for PostApiPet with any type of body
func NewPostApiPetRequestWithBody(server string, params *PostApiPetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPetPositionDeviceIdRequest generates requests for GetApiPetPositionDeviceId
func NewGetApiPetPositionDeviceIdRequest(server string, deviceId int, params *GetApiPetPositionDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/position/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetStatusDeviceIdRequest generates requests for GetApiPetStatusDeviceId
func NewGetApiPetStatusDeviceIdRequest(server string, deviceId int, params *GetApiPetStatusDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiPetPetIdRequest generates requests for DeleteApiPetPetId
func NewDeleteApiPetPetIdRequest(server string, petId int, params *DeleteApiPetPetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetPetIdRequest generates requests for GetApiPetPetId
func NewGetApiPetPetIdRequest(server string, petId int, params *GetApiPetPetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPetPetIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiPetPetId builder with application/*+json body
func NewPutApiPetPetIdRequestWithApplicationWildcardPlusJSONBody(server string, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPetPetIdRequestWithBody(server, petId, params, "application/*+json", bodyReader)
}

// NewPutApiPetPetIdRequest calls the generic PutApiPetPetId builder with application/json body
func NewPutApiPetPetIdRequest(server string, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPetPetIdRequestWithBody(server, petId, params, "application/json", bodyReader)
}

// NewPutApiPetPetIdRequestWithBody generates requests for PutApiPetPetId with any type of body
func NewPutApiPetPetIdRequestWithBody(server string, petId int, params *PutApiPetPetIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPetPetIdConditionRequest generates requests for GetApiPetPetIdCondition
func NewGetApiPetPetIdConditionRequest(server string, petId int, params *GetApiPetPetIdConditionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/condition", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiPetPetIdConditionConditionIdRequest generates requests for DeleteApiPetPetIdConditionConditionId
func NewDeleteApiPetPetIdConditionConditionIdRequest(server string, petId int, conditionId int, params *DeleteApiPetPetIdConditionConditionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/condition/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetPetIdConditionConditionIdRequest generates requests for GetApiPetPetIdConditionConditionId
func NewGetApiPetPetIdConditionConditionIdRequest(server string, petId int, conditionId int, params *GetApiPetPetIdConditionConditionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/condition/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPetPetIdConditionConditionIdRequest generates requests for PutApiPetPetIdConditionConditionId
func NewPutApiPetPetIdConditionConditionIdRequest(server string, petId int, conditionId int, params *PutApiPetPetIdConditionConditionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "conditionId", runtime.ParamLocationPath, conditionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/condition/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetPetIdInsightRequest generates requests for GetApiPetPetIdInsight
func NewGetApiPetPetIdInsightRequest(server string, petId int, params *GetApiPetPetIdInsightParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/insight", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPetPetIdPositionRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiPetPetIdPosition builder with application/*+json body
func NewPostApiPetPetIdPositionRequestWithApplicationWildcardPlusJSONBody(server string, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPetPetIdPositionRequestWithBody(server, petId, params, "application/*+json", bodyReader)
}

// NewPostApiPetPetIdPositionRequest calls the generic PostApiPetPetIdPosition builder with application/json body
func NewPostApiPetPetIdPositionRequest(server string, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiPetPetIdPositionRequestWithBody(server, petId, params, "application/json", bodyReader)
}

// NewPostApiPetPetIdPositionRequestWithBody generates requests for PostApiPetPetIdPosition with any type of body
func NewPostApiPetPetIdPositionRequestWithBody(server string, petId int, params *PostApiPetPetIdPositionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/position", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPetPetIdPositionDeviceIdRequest generates requests for GetApiPetPetIdPositionDeviceId
func NewGetApiPetPetIdPositionDeviceIdRequest(server string, petId int, deviceId int, params *GetApiPetPetIdPositionDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/position/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPetPetIdStatusDeviceIdRequest generates requests for GetApiPetPetIdStatusDeviceId
func NewGetApiPetPetIdStatusDeviceIdRequest(server string, petId int, deviceId int, params *GetApiPetPetIdStatusDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/pet/%s/status/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPhotoRequest generates requests for GetApiPhoto
func NewGetApiPhotoRequest(server string, params *GetApiPhotoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiPhotoRequestWithBody generates requests for PostApiPhoto with any type of body
func NewPostApiPhotoRequestWithBody(server string, params *PostApiPhotoParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPhotoPhotoIdRequest generates requests for DeleteApiPhotoPhotoId
func NewDeleteApiPhotoPhotoIdRequest(server string, photoId int, params *DeleteApiPhotoPhotoIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPhotoPhotoIdRequest generates requests for GetApiPhotoPhotoId
func NewGetApiPhotoPhotoIdRequest(server string, photoId int, params *GetApiPhotoPhotoIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPhotoPhotoIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutApiPhotoPhotoId builder with application/*+json body
func NewPutApiPhotoPhotoIdRequestWithApplicationWildcardPlusJSONBody(server string, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPhotoPhotoIdRequestWithBody(server, photoId, params, "application/*+json", bodyReader)
}

// NewPutApiPhotoPhotoIdRequest calls the generic PutApiPhotoPhotoId builder with application/json body
func NewPutApiPhotoPhotoIdRequest(server string, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiPhotoPhotoIdRequestWithBody(server, photoId, params, "application/json", bodyReader)
}

// NewPutApiPhotoPhotoIdRequestWithBody generates requests for PutApiPhotoPhotoId with any type of body
func NewPutApiPhotoPhotoIdRequestWithBody(server string, photoId int, params *PutApiPhotoPhotoIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiPhotoPhotoIdImageImageHashRequest generates requests for GetApiPhotoPhotoIdImageImageHash
func NewGetApiPhotoPhotoIdImageImageHashRequest(server string, photoId int, imageHash string, params *GetApiPhotoPhotoIdImageImageHashParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "imageHash", runtime.ParamLocationPath, imageHash)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/photo/%s/image/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductRequest generates requests for GetApiProduct
func NewGetApiProductRequest(server string, params *GetApiProductParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProductProductIdRequest generates requests for GetApiProductProductId
func NewGetApiProductProductIdRequest(server string, productId int, params *GetApiProductProductIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/product/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiReportHouseholdHouseholdIdPetPetIdRequest generates requests for GetApiReportHouseholdHouseholdIdPetPetId
func NewGetApiReportHouseholdHouseholdIdPetPetIdRequest(server string, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/report/household/%s/pet/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiReportHouseholdHouseholdIdPetPetIdAggregateRequest generates requests for GetApiReportHouseholdHouseholdIdPetPetIdAggregate
func NewGetApiReportHouseholdHouseholdIdPetPetIdAggregateRequest(server string, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/report/household/%s/pet/%s/aggregate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdRequest generates requests for GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId
func NewGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdRequest(server string, householdId int, petId int, deviceId int, params *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/report/household/%s/pet/%s/device/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSpeciesRequest generates requests for GetApiSpecies
func NewGetApiSpeciesRequest(server string, params *GetApiSpeciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/species")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSpeciesSpeciesIdRequest generates requests for GetApiSpeciesSpeciesId
func NewGetApiSpeciesSpeciesIdRequest(server string, speciesId int, params *GetApiSpeciesSpeciesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "speciesId", runtime.ParamLocationPath, speciesId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/species/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiStartRequest generates requests for GetApiStart
func NewGetApiStartRequest(server string, params *GetApiStartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTagRequest generates requests for GetApiTag
func NewGetApiTagRequest(server string, params *GetApiTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTagTagIdRequest generates requests for GetApiTagTagId
func NewGetApiTagTagIdRequest(server string, tagId int, params *GetApiTagTagIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTagTagIdDeviceRequest generates requests for GetApiTagTagIdDevice
func NewGetApiTagTagIdDeviceRequest(server string, tagId int, params *GetApiTagTagIdDeviceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag/%s/device", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTagTagIdDeviceDeviceIdRequest generates requests for GetApiTagTagIdDeviceDeviceId
func NewGetApiTagTagIdDeviceDeviceIdRequest(server string, tagId int, deviceId int, params *GetApiTagTagIdDeviceDeviceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagId", runtime.ParamLocationPath, tagId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "deviceId", runtime.ParamLocationPath, deviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tag/%s/device/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimelineRequest generates requests for GetApiTimeline
func NewGetApiTimelineRequest(server string, params *GetApiTimelineParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timeline")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SinceId", runtime.ParamLocationQuery, *params.SinceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BeforeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BeforeId", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimelineHouseholdHouseholdIdRequest generates requests for GetApiTimelineHouseholdHouseholdId
func NewGetApiTimelineHouseholdHouseholdIdRequest(server string, householdId int, params *GetApiTimelineHouseholdHouseholdIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timeline/household/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SinceId", runtime.ParamLocationQuery, *params.SinceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BeforeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BeforeId", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimelineHouseholdHouseholdIdDeviceRequest generates requests for GetApiTimelineHouseholdHouseholdIdDevice
func NewGetApiTimelineHouseholdHouseholdIdDeviceRequest(server string, householdId int, params *GetApiTimelineHouseholdHouseholdIdDeviceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timeline/household/%s/device", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SinceId", runtime.ParamLocationQuery, *params.SinceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BeforeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BeforeId", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimelineHouseholdHouseholdIdPetRequest generates requests for GetApiTimelineHouseholdHouseholdIdPet
func NewGetApiTimelineHouseholdHouseholdIdPetRequest(server string, householdId int, params *GetApiTimelineHouseholdHouseholdIdPetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timeline/household/%s/pet", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SinceId", runtime.ParamLocationQuery, *params.SinceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BeforeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BeforeId", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimelineHouseholdHouseholdIdUserRequest generates requests for GetApiTimelineHouseholdHouseholdIdUser
func NewGetApiTimelineHouseholdHouseholdIdUserRequest(server string, householdId int, params *GetApiTimelineHouseholdHouseholdIdUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdId", runtime.ParamLocationPath, householdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timeline/household/%s/user", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SinceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SinceId", runtime.ParamLocationQuery, *params.SinceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BeforeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "BeforeId", runtime.ParamLocationQuery, *params.BeforeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimezoneRequest generates requests for GetApiTimezone
func NewGetApiTimezoneRequest(server string, params *GetApiTimezoneParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ItemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTimezoneTimezoneIdRequest generates requests for GetApiTimezoneTimezoneId
func NewGetApiTimezoneTimezoneIdRequest(server string, timezoneId int, params *GetApiTimezoneTimezoneIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timezoneId", runtime.ParamLocationPath, timezoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/timezone/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTranslationRequest generates requests for GetApiTranslation
func NewGetApiTranslationRequest(server string, params *GetApiTranslationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/translation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiTranslationLanguageRequest generates requests for GetApiTranslationLanguage
func NewGetApiTranslationLanguageRequest(server string, language string, params *GetApiTranslationLanguageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/translation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUserUserIdRequest generates requests for GetApiUserUserId
func NewGetApiUserUserIdRequest(server string, userId int, params *GetApiUserUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api-version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiAnimoPetWithResponse request
	GetApiAnimoPetWithResponse(ctx context.Context, params *GetApiAnimoPetParams, reqEditors ...RequestEditorFn) (*GetApiAnimoPetResponse, error)

	// PostApiAuthChangePasswordWithBodyWithResponse request with any body
	PostApiAuthChangePasswordWithBodyWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error)

	PostApiAuthChangePasswordWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error)

	PostApiAuthChangePasswordWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error)

	// PostApiAuthLoginWithBodyWithResponse request with any body
	PostApiAuthLoginWithBodyWithResponse(ctx context.Context, params *PostApiAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	PostApiAuthLoginWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	PostApiAuthLoginWithResponse(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	// PostApiAuthLogoutWithBodyWithResponse request with any body
	PostApiAuthLogoutWithBodyWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	PostApiAuthLogoutWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	PostApiAuthLogoutWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error)

	// PostApiAuthRegisterWithBodyWithResponse request with any body
	PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	PostApiAuthRegisterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	PostApiAuthRegisterWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	// PostApiAuthResetPasswordWithBodyWithResponse request with any body
	PostApiAuthResetPasswordWithBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error)

	PostApiAuthResetPasswordWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error)

	PostApiAuthResetPasswordWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error)

	// PostApiAuthResetPasswordRequestWithBodyWithResponse request with any body
	PostApiAuthResetPasswordRequestWithBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error)

	PostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error)

	PostApiAuthResetPasswordRequestWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error)

	// GetApiBreedWithResponse request
	GetApiBreedWithResponse(ctx context.Context, params *GetApiBreedParams, reqEditors ...RequestEditorFn) (*GetApiBreedResponse, error)

	// GetApiBreedBreedIdWithResponse request
	GetApiBreedBreedIdWithResponse(ctx context.Context, breedId int, params *GetApiBreedBreedIdParams, reqEditors ...RequestEditorFn) (*GetApiBreedBreedIdResponse, error)

	// GetApiConditionWithResponse request
	GetApiConditionWithResponse(ctx context.Context, params *GetApiConditionParams, reqEditors ...RequestEditorFn) (*GetApiConditionResponse, error)

	// GetApiConditionConditionIdWithResponse request
	GetApiConditionConditionIdWithResponse(ctx context.Context, conditionId int, params *GetApiConditionConditionIdParams, reqEditors ...RequestEditorFn) (*GetApiConditionConditionIdResponse, error)

	// GetApiCountryWithResponse request
	GetApiCountryWithResponse(ctx context.Context, params *GetApiCountryParams, reqEditors ...RequestEditorFn) (*GetApiCountryResponse, error)

	// GetApiCountryCountryIdWithResponse request
	GetApiCountryCountryIdWithResponse(ctx context.Context, countryId int, params *GetApiCountryCountryIdParams, reqEditors ...RequestEditorFn) (*GetApiCountryCountryIdResponse, error)

	// GetApiDashboardPetWithResponse request
	GetApiDashboardPetWithResponse(ctx context.Context, params *GetApiDashboardPetParams, reqEditors ...RequestEditorFn) (*GetApiDashboardPetResponse, error)

	// GetApiDeviceWithResponse request
	GetApiDeviceWithResponse(ctx context.Context, params *GetApiDeviceParams, reqEditors ...RequestEditorFn) (*GetApiDeviceResponse, error)

	// GetApiDeviceNeedsUpdateWithResponse request
	GetApiDeviceNeedsUpdateWithResponse(ctx context.Context, params *GetApiDeviceNeedsUpdateParams, reqEditors ...RequestEditorFn) (*GetApiDeviceNeedsUpdateResponse, error)

	// PostApiDevicePairHouseholdIdWithBodyWithResponse request with any body
	PostApiDevicePairHouseholdIdWithBodyWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error)

	PostApiDevicePairHouseholdIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error)

	PostApiDevicePairHouseholdIdWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error)

	// GetApiDevicePairingWithResponse request
	GetApiDevicePairingWithResponse(ctx context.Context, params *GetApiDevicePairingParams, reqEditors ...RequestEditorFn) (*GetApiDevicePairingResponse, error)

	// DeleteApiDeviceDeviceIdWithResponse request
	DeleteApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *DeleteApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdResponse, error)

	// GetApiDeviceDeviceIdWithResponse request
	GetApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdResponse, error)

	// PutApiDeviceDeviceIdWithBodyWithResponse request with any body
	PutApiDeviceDeviceIdWithBodyWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error)

	PutApiDeviceDeviceIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error)

	PutApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error)

	// GetApiDeviceDeviceIdControlWithResponse request
	GetApiDeviceDeviceIdControlWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlResponse, error)

	// PutApiDeviceDeviceIdControlWithResponse request
	PutApiDeviceDeviceIdControlWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdControlResponse, error)

	// PutApiDeviceDeviceIdControlAsyncWithResponse request
	PutApiDeviceDeviceIdControlAsyncWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlAsyncParams, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdControlAsyncResponse, error)

	// GetApiDeviceDeviceIdControlStatusWithResponse request
	GetApiDeviceDeviceIdControlStatusWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlStatusParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlStatusResponse, error)

	// GetApiDeviceDeviceIdControlStatusRequestIdWithResponse request
	GetApiDeviceDeviceIdControlStatusRequestIdWithResponse(ctx context.Context, deviceId int, requestId openapi_types.UUID, params *GetApiDeviceDeviceIdControlStatusRequestIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlStatusRequestIdResponse, error)

	// PostApiDeviceDeviceIdPairHouseholdIdWithResponse request
	PostApiDeviceDeviceIdPairHouseholdIdWithResponse(ctx context.Context, deviceId int, householdId int, params *PostApiDeviceDeviceIdPairHouseholdIdParams, reqEditors ...RequestEditorFn) (*PostApiDeviceDeviceIdPairHouseholdIdResponse, error)

	// GetApiDeviceDeviceIdStatusWithResponse request
	GetApiDeviceDeviceIdStatusWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdStatusParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdStatusResponse, error)

	// GetApiDeviceDeviceIdTagWithResponse request
	GetApiDeviceDeviceIdTagWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdTagParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdTagResponse, error)

	// DeleteApiDeviceDeviceIdTagTagIdWithResponse request
	DeleteApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdTagTagIdResponse, error)

	// GetApiDeviceDeviceIdTagTagIdWithResponse request
	GetApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *GetApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdTagTagIdResponse, error)

	// PutApiDeviceDeviceIdTagTagIdWithBodyWithResponse request with any body
	PutApiDeviceDeviceIdTagTagIdWithBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error)

	PutApiDeviceDeviceIdTagTagIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error)

	PutApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error)

	// DeleteApiDeviceDeviceIdTagTagIdAsyncWithResponse request
	DeleteApiDeviceDeviceIdTagTagIdAsyncWithResponse(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdAsyncParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdTagTagIdAsyncResponse, error)

	// PutApiDeviceDeviceIdTagTagIdAsyncWithBodyWithResponse request with any body
	PutApiDeviceDeviceIdTagTagIdAsyncWithBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error)

	PutApiDeviceDeviceIdTagTagIdAsyncWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error)

	PutApiDeviceDeviceIdTagTagIdAsyncWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error)

	// GetApiFoodTypeWithResponse request
	GetApiFoodTypeWithResponse(ctx context.Context, params *GetApiFoodTypeParams, reqEditors ...RequestEditorFn) (*GetApiFoodTypeResponse, error)

	// GetApiFoodTypeFoodTypeIdWithResponse request
	GetApiFoodTypeFoodTypeIdWithResponse(ctx context.Context, foodTypeId int, params *GetApiFoodTypeFoodTypeIdParams, reqEditors ...RequestEditorFn) (*GetApiFoodTypeFoodTypeIdResponse, error)

	// GetApiHouseholdWithResponse request
	GetApiHouseholdWithResponse(ctx context.Context, params *GetApiHouseholdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdResponse, error)

	// PostApiHouseholdWithBodyWithResponse request with any body
	PostApiHouseholdWithBodyWithResponse(ctx context.Context, params *PostApiHouseholdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error)

	PostApiHouseholdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error)

	PostApiHouseholdWithResponse(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error)

	// DeleteApiHouseholdHouseholdIdWithResponse request
	DeleteApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *DeleteApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdResponse, error)

	// GetApiHouseholdHouseholdIdWithResponse request
	GetApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdResponse, error)

	// PutApiHouseholdHouseholdIdWithBodyWithResponse request with any body
	PutApiHouseholdHouseholdIdWithBodyWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error)

	PutApiHouseholdHouseholdIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error)

	PutApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error)

	// GetApiHouseholdHouseholdIdDeviceWithResponse request
	GetApiHouseholdHouseholdIdDeviceWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdDeviceResponse, error)

	// GetApiHouseholdHouseholdIdDeviceDeviceIdWithResponse request
	GetApiHouseholdHouseholdIdDeviceDeviceIdWithResponse(ctx context.Context, householdId int, deviceId int, params *GetApiHouseholdHouseholdIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdDeviceDeviceIdResponse, error)

	// GetApiHouseholdHouseholdIdInviteWithResponse request
	GetApiHouseholdHouseholdIdInviteWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdInviteParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdInviteResponse, error)

	// PostApiHouseholdHouseholdIdInviteWithBodyWithResponse request with any body
	PostApiHouseholdHouseholdIdInviteWithBodyWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error)

	PostApiHouseholdHouseholdIdInviteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error)

	PostApiHouseholdHouseholdIdInviteWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error)

	// DeleteApiHouseholdHouseholdIdInviteInviteIdWithResponse request
	DeleteApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *DeleteApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdInviteInviteIdResponse, error)

	// GetApiHouseholdHouseholdIdInviteInviteIdWithResponse request
	GetApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *GetApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdInviteInviteIdResponse, error)

	// PutApiHouseholdHouseholdIdInviteInviteIdWithBodyWithResponse request with any body
	PutApiHouseholdHouseholdIdInviteInviteIdWithBodyWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error)

	PutApiHouseholdHouseholdIdInviteInviteIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error)

	PutApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error)

	// PostApiHouseholdHouseholdIdInviteInviteIdResendWithResponse request
	PostApiHouseholdHouseholdIdInviteInviteIdResendWithResponse(ctx context.Context, householdId int, inviteId int, params *PostApiHouseholdHouseholdIdInviteInviteIdResendParams, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteInviteIdResendResponse, error)

	// GetApiHouseholdHouseholdIdPetWithResponse request
	GetApiHouseholdHouseholdIdPetWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdPetResponse, error)

	// GetApiHouseholdHouseholdIdPetPetIdWithResponse request
	GetApiHouseholdHouseholdIdPetPetIdWithResponse(ctx context.Context, householdId int, petId int, params *GetApiHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdPetPetIdResponse, error)

	// GetApiHouseholdHouseholdIdUserWithResponse request
	GetApiHouseholdHouseholdIdUserWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdUserResponse, error)

	// DeleteApiHouseholdHouseholdIdUserUserIdWithResponse request
	DeleteApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *DeleteApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdUserUserIdResponse, error)

	// GetApiHouseholdHouseholdIdUserUserIdWithResponse request
	GetApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *GetApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdUserUserIdResponse, error)

	// PutApiHouseholdHouseholdIdUserUserIdWithBodyWithResponse request with any body
	PutApiHouseholdHouseholdIdUserUserIdWithBodyWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error)

	PutApiHouseholdHouseholdIdUserUserIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error)

	PutApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error)

	// GetApiInfoWithResponse request
	GetApiInfoWithResponse(ctx context.Context, params *GetApiInfoParams, reqEditors ...RequestEditorFn) (*GetApiInfoResponse, error)

	// GetApiInviteWithResponse request
	GetApiInviteWithResponse(ctx context.Context, params *GetApiInviteParams, reqEditors ...RequestEditorFn) (*GetApiInviteResponse, error)

	// PostApiInviteInviteCodeAcceptWithResponse request
	PostApiInviteInviteCodeAcceptWithResponse(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeAcceptParams, reqEditors ...RequestEditorFn) (*PostApiInviteInviteCodeAcceptResponse, error)

	// PostApiInviteInviteCodeRejectWithResponse request
	PostApiInviteInviteCodeRejectWithResponse(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeRejectParams, reqEditors ...RequestEditorFn) (*PostApiInviteInviteCodeRejectResponse, error)

	// GetApiInviteInviteIdWithResponse request
	GetApiInviteInviteIdWithResponse(ctx context.Context, inviteId int, params *GetApiInviteInviteIdParams, reqEditors ...RequestEditorFn) (*GetApiInviteInviteIdResponse, error)

	// GetApiLanguageWithResponse request
	GetApiLanguageWithResponse(ctx context.Context, params *GetApiLanguageParams, reqEditors ...RequestEditorFn) (*GetApiLanguageResponse, error)

	// GetApiLanguageLanguageIdWithResponse request
	GetApiLanguageLanguageIdWithResponse(ctx context.Context, languageId int, params *GetApiLanguageLanguageIdParams, reqEditors ...RequestEditorFn) (*GetApiLanguageLanguageIdResponse, error)

	// DeleteApiMeWithResponse request
	DeleteApiMeWithResponse(ctx context.Context, params *DeleteApiMeParams, reqEditors ...RequestEditorFn) (*DeleteApiMeResponse, error)

	// GetApiMeWithResponse request
	GetApiMeWithResponse(ctx context.Context, params *GetApiMeParams, reqEditors ...RequestEditorFn) (*GetApiMeResponse, error)

	// PutApiMeWithBodyWithResponse request with any body
	PutApiMeWithBodyWithResponse(ctx context.Context, params *PutApiMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error)

	PutApiMeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PutApiMeParams, body PutApiMeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error)

	PutApiMeWithResponse(ctx context.Context, params *PutApiMeParams, body PutApiMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error)

	// PutApiMeAcceptTermsWithResponse request
	PutApiMeAcceptTermsWithResponse(ctx context.Context, params *PutApiMeAcceptTermsParams, reqEditors ...RequestEditorFn) (*PutApiMeAcceptTermsResponse, error)

	// GetApiMeClientWithResponse request
	GetApiMeClientWithResponse(ctx context.Context, params *GetApiMeClientParams, reqEditors ...RequestEditorFn) (*GetApiMeClientResponse, error)

	// PostApiMeClientWithBodyWithResponse request with any body
	PostApiMeClientWithBodyWithResponse(ctx context.Context, params *PostApiMeClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error)

	PostApiMeClientWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error)

	PostApiMeClientWithResponse(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error)

	// PostApiMeDeleteWithBodyWithResponse request with any body
	PostApiMeDeleteWithBodyWithResponse(ctx context.Context, params *PostApiMeDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error)

	PostApiMeDeleteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error)

	PostApiMeDeleteWithResponse(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error)

	// GetApiMeStartWithResponse request
	GetApiMeStartWithResponse(ctx context.Context, params *GetApiMeStartParams, reqEditors ...RequestEditorFn) (*GetApiMeStartResponse, error)

	// GetApiNotificationWithResponse request
	GetApiNotificationWithResponse(ctx context.Context, params *GetApiNotificationParams, reqEditors ...RequestEditorFn) (*GetApiNotificationResponse, error)

	// GetApiPetWithResponse request
	GetApiPetWithResponse(ctx context.Context, params *GetApiPetParams, reqEditors ...RequestEditorFn) (*GetApiPetResponse, error)

	// PostApiPetWithBodyWithResponse request with any body
	PostApiPetWithBodyWithResponse(ctx context.Context, params *PostApiPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error)

	PostApiPetWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiPetParams, body PostApiPetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error)

	PostApiPetWithResponse(ctx context.Context, params *PostApiPetParams, body PostApiPetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error)

	// GetApiPetPositionDeviceIdWithResponse request
	GetApiPetPositionDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiPetPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPositionDeviceIdResponse, error)

	// GetApiPetStatusDeviceIdWithResponse request
	GetApiPetStatusDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiPetStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetStatusDeviceIdResponse, error)

	// DeleteApiPetPetIdWithResponse request
	DeleteApiPetPetIdWithResponse(ctx context.Context, petId int, params *DeleteApiPetPetIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPetPetIdResponse, error)

	// GetApiPetPetIdWithResponse request
	GetApiPetPetIdWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdResponse, error)

	// PutApiPetPetIdWithBodyWithResponse request with any body
	PutApiPetPetIdWithBodyWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error)

	PutApiPetPetIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error)

	PutApiPetPetIdWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error)

	// GetApiPetPetIdConditionWithResponse request
	GetApiPetPetIdConditionWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdConditionParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdConditionResponse, error)

	// DeleteApiPetPetIdConditionConditionIdWithResponse request
	DeleteApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *DeleteApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPetPetIdConditionConditionIdResponse, error)

	// GetApiPetPetIdConditionConditionIdWithResponse request
	GetApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *GetApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdConditionConditionIdResponse, error)

	// PutApiPetPetIdConditionConditionIdWithResponse request
	PutApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *PutApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*PutApiPetPetIdConditionConditionIdResponse, error)

	// GetApiPetPetIdInsightWithResponse request
	GetApiPetPetIdInsightWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdInsightParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdInsightResponse, error)

	// PostApiPetPetIdPositionWithBodyWithResponse request with any body
	PostApiPetPetIdPositionWithBodyWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error)

	PostApiPetPetIdPositionWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error)

	PostApiPetPetIdPositionWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error)

	// GetApiPetPetIdPositionDeviceIdWithResponse request
	GetApiPetPetIdPositionDeviceIdWithResponse(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdPositionDeviceIdResponse, error)

	// GetApiPetPetIdStatusDeviceIdWithResponse request
	GetApiPetPetIdStatusDeviceIdWithResponse(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdStatusDeviceIdResponse, error)

	// GetApiPhotoWithResponse request
	GetApiPhotoWithResponse(ctx context.Context, params *GetApiPhotoParams, reqEditors ...RequestEditorFn) (*GetApiPhotoResponse, error)

	// PostApiPhotoWithBodyWithResponse request with any body
	PostApiPhotoWithBodyWithResponse(ctx context.Context, params *PostApiPhotoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPhotoResponse, error)

	// DeleteApiPhotoPhotoIdWithResponse request
	DeleteApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *DeleteApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPhotoPhotoIdResponse, error)

	// GetApiPhotoPhotoIdWithResponse request
	GetApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *GetApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*GetApiPhotoPhotoIdResponse, error)

	// PutApiPhotoPhotoIdWithBodyWithResponse request with any body
	PutApiPhotoPhotoIdWithBodyWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error)

	PutApiPhotoPhotoIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error)

	PutApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error)

	// GetApiPhotoPhotoIdImageImageHashWithResponse request
	GetApiPhotoPhotoIdImageImageHashWithResponse(ctx context.Context, photoId int, imageHash string, params *GetApiPhotoPhotoIdImageImageHashParams, reqEditors ...RequestEditorFn) (*GetApiPhotoPhotoIdImageImageHashResponse, error)

	// GetApiProductWithResponse request
	GetApiProductWithResponse(ctx context.Context, params *GetApiProductParams, reqEditors ...RequestEditorFn) (*GetApiProductResponse, error)

	// GetApiProductProductIdWithResponse request
	GetApiProductProductIdWithResponse(ctx context.Context, productId int, params *GetApiProductProductIdParams, reqEditors ...RequestEditorFn) (*GetApiProductProductIdResponse, error)

	// GetApiReportHouseholdHouseholdIdPetPetIdWithResponse request
	GetApiReportHouseholdHouseholdIdPetPetIdWithResponse(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdResponse, error)

	// GetApiReportHouseholdHouseholdIdPetPetIdAggregateWithResponse request
	GetApiReportHouseholdHouseholdIdPetPetIdAggregateWithResponse(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse, error)

	// GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdWithResponse request
	GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdWithResponse(ctx context.Context, householdId int, petId int, deviceId int, params *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse, error)

	// GetApiSpeciesWithResponse request
	GetApiSpeciesWithResponse(ctx context.Context, params *GetApiSpeciesParams, reqEditors ...RequestEditorFn) (*GetApiSpeciesResponse, error)

	// GetApiSpeciesSpeciesIdWithResponse request
	GetApiSpeciesSpeciesIdWithResponse(ctx context.Context, speciesId int, params *GetApiSpeciesSpeciesIdParams, reqEditors ...RequestEditorFn) (*GetApiSpeciesSpeciesIdResponse, error)

	// GetApiStartWithResponse request
	GetApiStartWithResponse(ctx context.Context, params *GetApiStartParams, reqEditors ...RequestEditorFn) (*GetApiStartResponse, error)

	// GetApiTagWithResponse request
	GetApiTagWithResponse(ctx context.Context, params *GetApiTagParams, reqEditors ...RequestEditorFn) (*GetApiTagResponse, error)

	// GetApiTagTagIdWithResponse request
	GetApiTagTagIdWithResponse(ctx context.Context, tagId int, params *GetApiTagTagIdParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdResponse, error)

	// GetApiTagTagIdDeviceWithResponse request
	GetApiTagTagIdDeviceWithResponse(ctx context.Context, tagId int, params *GetApiTagTagIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdDeviceResponse, error)

	// GetApiTagTagIdDeviceDeviceIdWithResponse request
	GetApiTagTagIdDeviceDeviceIdWithResponse(ctx context.Context, tagId int, deviceId int, params *GetApiTagTagIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdDeviceDeviceIdResponse, error)

	// GetApiTimelineWithResponse request
	GetApiTimelineWithResponse(ctx context.Context, params *GetApiTimelineParams, reqEditors ...RequestEditorFn) (*GetApiTimelineResponse, error)

	// GetApiTimelineHouseholdHouseholdIdWithResponse request
	GetApiTimelineHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdResponse, error)

	// GetApiTimelineHouseholdHouseholdIdDeviceWithResponse request
	GetApiTimelineHouseholdHouseholdIdDeviceWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdDeviceResponse, error)

	// GetApiTimelineHouseholdHouseholdIdPetWithResponse request
	GetApiTimelineHouseholdHouseholdIdPetWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdPetResponse, error)

	// GetApiTimelineHouseholdHouseholdIdUserWithResponse request
	GetApiTimelineHouseholdHouseholdIdUserWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdUserResponse, error)

	// GetApiTimezoneWithResponse request
	GetApiTimezoneWithResponse(ctx context.Context, params *GetApiTimezoneParams, reqEditors ...RequestEditorFn) (*GetApiTimezoneResponse, error)

	// GetApiTimezoneTimezoneIdWithResponse request
	GetApiTimezoneTimezoneIdWithResponse(ctx context.Context, timezoneId int, params *GetApiTimezoneTimezoneIdParams, reqEditors ...RequestEditorFn) (*GetApiTimezoneTimezoneIdResponse, error)

	// GetApiTranslationWithResponse request
	GetApiTranslationWithResponse(ctx context.Context, params *GetApiTranslationParams, reqEditors ...RequestEditorFn) (*GetApiTranslationResponse, error)

	// GetApiTranslationLanguageWithResponse request
	GetApiTranslationLanguageWithResponse(ctx context.Context, language string, params *GetApiTranslationLanguageParams, reqEditors ...RequestEditorFn) (*GetApiTranslationLanguageResponse, error)

	// GetApiUserUserIdWithResponse request
	GetApiUserUserIdWithResponse(ctx context.Context, userId int, params *GetApiUserUserIdParams, reqEditors ...RequestEditorFn) (*GetApiUserUserIdResponse, error)
}

type GetApiAnimoPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnimoPetResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiAnimoPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAnimoPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthChangePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthChangePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthChangePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthLoginResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthResetPasswordRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiAuthResetPasswordRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthResetPasswordRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBreedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BreedResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiBreedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBreedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiBreedBreedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BreedResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiBreedBreedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiBreedBreedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConditionResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiConditionConditionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConditionResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiConditionConditionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiConditionConditionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCountryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountryResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiCountryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCountryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiCountryCountryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CountryResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiCountryCountryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiCountryCountryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDashboardPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetDashboardResourceListDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDashboardPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDashboardPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceNeedsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceNeedsUpdateResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceNeedsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceNeedsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDevicePairHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiDevicePairHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDevicePairHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDevicePairingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourceIEnumerableDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDevicePairingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDevicePairingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceControlResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDeviceDeviceIdControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceControlResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiDeviceDeviceIdControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDeviceDeviceIdControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDeviceDeviceIdControlAsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceControlResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiDeviceDeviceIdControlAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDeviceDeviceIdControlAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdControlStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceControlStateChangeResourceListDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdControlStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdControlStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdControlStatusRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceControlStateChangeResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdControlStatusRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdControlStatusRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDeviceDeviceIdPairHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiDeviceDeviceIdPairHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDeviceDeviceIdPairHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDeviceDeviceIdTagTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagDataResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiDeviceDeviceIdTagTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDeviceDeviceIdTagTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDeviceDeviceIdTagTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiDeviceDeviceIdTagTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDeviceDeviceIdTagTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDeviceDeviceIdTagTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagDataResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiDeviceDeviceIdTagTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDeviceDeviceIdTagTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDeviceDeviceIdTagTagIdAsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagDataResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiDeviceDeviceIdTagTagIdAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDeviceDeviceIdTagTagIdAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDeviceDeviceIdTagTagIdAsyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceTagDataResource
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiDeviceDeviceIdTagTagIdAsyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDeviceDeviceIdTagTagIdAsyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFoodTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FoodTypeResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiFoodTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFoodTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiFoodTypeFoodTypeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FoodTypeResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiFoodTypeFoodTypeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiFoodTypeFoodTypeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HouseholdResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiHouseholdHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiHouseholdHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiHouseholdHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiHouseholdHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiHouseholdHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiHouseholdHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdInviteResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHouseholdHouseholdIdInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *HouseholdResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiHouseholdHouseholdIdInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHouseholdHouseholdIdInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiHouseholdHouseholdIdInviteInviteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiHouseholdHouseholdIdInviteInviteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiHouseholdHouseholdIdInviteInviteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdInviteInviteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdInviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdInviteInviteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdInviteInviteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiHouseholdHouseholdIdInviteInviteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdInviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiHouseholdHouseholdIdInviteInviteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiHouseholdHouseholdIdInviteInviteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHouseholdHouseholdIdInviteInviteIdResendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdInviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiHouseholdHouseholdIdInviteInviteIdResendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHouseholdHouseholdIdInviteInviteIdResendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdPetPetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdPetPetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdPetPetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdUserResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiHouseholdHouseholdIdUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiHouseholdHouseholdIdUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiHouseholdHouseholdIdUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHouseholdHouseholdIdUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdUserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiHouseholdHouseholdIdUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHouseholdHouseholdIdUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiHouseholdHouseholdIdUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HouseholdUserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiHouseholdHouseholdIdUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiHouseholdHouseholdIdUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InfoResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInviteInviteCodeAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiInviteInviteCodeAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInviteInviteCodeAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiInviteInviteCodeRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiInviteInviteCodeRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiInviteInviteCodeRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiInviteInviteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiInviteInviteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiInviteInviteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiLanguageLanguageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LanguageResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiLanguageLanguageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiLanguageLanguageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiMeAcceptTermsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiMeAcceptTermsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiMeAcceptTermsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMeClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserClientResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiMeClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMeClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMeClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserClientResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiMeClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMeClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMeDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiMeDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMeDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMeStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeStartResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiMeStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMeStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PetResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPositionDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetPositionResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPositionDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPositionDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetStatusDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetStatusResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetStatusDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetStatusDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPetPetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiPetPetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPetPetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPetPetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiPetPetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPetPetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetConditionResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPetPetIdConditionConditionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiPetPetIdConditionConditionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPetPetIdConditionConditionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdConditionConditionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetConditionResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdConditionConditionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdConditionConditionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPetPetIdConditionConditionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetConditionResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiPetPetIdConditionConditionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPetPetIdConditionConditionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdInsightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetInsightResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdInsightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdInsightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPetPetIdPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PetPositionResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiPetPetIdPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPetPetIdPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdPositionDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetPositionResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdPositionDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdPositionDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPetPetIdStatusDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetStatusResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPetPetIdStatusDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPetPetIdStatusDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhotoResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PhotoResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PostApiPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPhotoPhotoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r DeleteApiPhotoPhotoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPhotoPhotoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPhotoPhotoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhotoResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPhotoPhotoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPhotoPhotoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPhotoPhotoIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhotoResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r PutApiPhotoPhotoIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPhotoPhotoIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPhotoPhotoIdImageImageHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiPhotoPhotoIdImageImageHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPhotoPhotoIdImageImageHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProductProductIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiProductProductIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProductProductIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReportHouseholdHouseholdIdPetPetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportHouseholdResourceListDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiReportHouseholdHouseholdIdPetPetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReportHouseholdHouseholdIdPetPetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportHouseholdResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportHouseholdResourceListDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSpeciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeciesResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiSpeciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSpeciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSpeciesSpeciesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeciesResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiSpeciesSpeciesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSpeciesSpeciesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StartResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTagTagIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTagTagIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTagTagIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTagTagIdDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagDeviceResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTagTagIdDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTagTagIdDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTagTagIdDeviceDeviceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagDeviceResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTagTagIdDeviceDeviceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTagTagIdDeviceDeviceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimelineHouseholdHouseholdIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimelineHouseholdHouseholdIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimelineHouseholdHouseholdIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimelineHouseholdHouseholdIdDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimelineHouseholdHouseholdIdDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimelineHouseholdHouseholdIdDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimelineHouseholdHouseholdIdPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimelineHouseholdHouseholdIdPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimelineHouseholdHouseholdIdPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimelineHouseholdHouseholdIdUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimelineHouseholdHouseholdIdUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimelineHouseholdHouseholdIdUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimezoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimezoneResourcePaginatedDataResult
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimezoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimezoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTimezoneTimezoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimezoneResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTimezoneTimezoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimezoneTimezoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTranslationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]string
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTranslationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTranslationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTranslationLanguageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiTranslationLanguageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTranslationLanguageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicUserResourceDataResponse
	JSON400      *ErrorResource
	JSON403      *ProblemDetails
	JSON404      *ErrorResource
	JSON422      *ErrorResource
}

// Status returns HTTPResponse.Status
func (r GetApiUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiAnimoPetWithResponse request returning *GetApiAnimoPetResponse
func (c *ClientWithResponses) GetApiAnimoPetWithResponse(ctx context.Context, params *GetApiAnimoPetParams, reqEditors ...RequestEditorFn) (*GetApiAnimoPetResponse, error) {
	rsp, err := c.GetApiAnimoPet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAnimoPetResponse(rsp)
}

// PostApiAuthChangePasswordWithBodyWithResponse request with arbitrary body returning *PostApiAuthChangePasswordResponse
func (c *ClientWithResponses) PostApiAuthChangePasswordWithBodyWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error) {
	rsp, err := c.PostApiAuthChangePasswordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthChangePasswordWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error) {
	rsp, err := c.PostApiAuthChangePasswordWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthChangePasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthChangePasswordWithResponse(ctx context.Context, params *PostApiAuthChangePasswordParams, body PostApiAuthChangePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthChangePasswordResponse, error) {
	rsp, err := c.PostApiAuthChangePassword(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthChangePasswordResponse(rsp)
}

// PostApiAuthLoginWithBodyWithResponse request with arbitrary body returning *PostApiAuthLoginResponse
func (c *ClientWithResponses) PostApiAuthLoginWithBodyWithResponse(ctx context.Context, params *PostApiAuthLoginParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLoginWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLoginWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLoginWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLoginWithResponse(ctx context.Context, params *PostApiAuthLoginParams, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLogin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

// PostApiAuthLogoutWithBodyWithResponse request with arbitrary body returning *PostApiAuthLogoutResponse
func (c *ClientWithResponses) PostApiAuthLogoutWithBodyWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogoutWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLogoutWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogoutWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLogoutWithResponse(ctx context.Context, params *PostApiAuthLogoutParams, body PostApiAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLogoutResponse, error) {
	rsp, err := c.PostApiAuthLogout(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLogoutResponse(rsp)
}

// PostApiAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostApiAuthRegisterResponse
func (c *ClientWithResponses) PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegisterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthRegisterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegisterWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthRegisterWithResponse(ctx context.Context, params *PostApiAuthRegisterParams, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegister(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

// PostApiAuthResetPasswordWithBodyWithResponse request with arbitrary body returning *PostApiAuthResetPasswordResponse
func (c *ClientWithResponses) PostApiAuthResetPasswordWithBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error) {
	rsp, err := c.PostApiAuthResetPasswordWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthResetPasswordWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error) {
	rsp, err := c.PostApiAuthResetPasswordWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthResetPasswordWithResponse(ctx context.Context, params *PostApiAuthResetPasswordParams, body PostApiAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordResponse, error) {
	rsp, err := c.PostApiAuthResetPassword(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordResponse(rsp)
}

// PostApiAuthResetPasswordRequestWithBodyWithResponse request with arbitrary body returning *PostApiAuthResetPasswordRequestResponse
func (c *ClientWithResponses) PostApiAuthResetPasswordRequestWithBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error) {
	rsp, err := c.PostApiAuthResetPasswordRequestWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordRequestResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error) {
	rsp, err := c.PostApiAuthResetPasswordRequestWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordRequestResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthResetPasswordRequestWithResponse(ctx context.Context, params *PostApiAuthResetPasswordRequestParams, body PostApiAuthResetPasswordRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResetPasswordRequestResponse, error) {
	rsp, err := c.PostApiAuthResetPasswordRequest(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResetPasswordRequestResponse(rsp)
}

// GetApiBreedWithResponse request returning *GetApiBreedResponse
func (c *ClientWithResponses) GetApiBreedWithResponse(ctx context.Context, params *GetApiBreedParams, reqEditors ...RequestEditorFn) (*GetApiBreedResponse, error) {
	rsp, err := c.GetApiBreed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBreedResponse(rsp)
}

// GetApiBreedBreedIdWithResponse request returning *GetApiBreedBreedIdResponse
func (c *ClientWithResponses) GetApiBreedBreedIdWithResponse(ctx context.Context, breedId int, params *GetApiBreedBreedIdParams, reqEditors ...RequestEditorFn) (*GetApiBreedBreedIdResponse, error) {
	rsp, err := c.GetApiBreedBreedId(ctx, breedId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiBreedBreedIdResponse(rsp)
}

// GetApiConditionWithResponse request returning *GetApiConditionResponse
func (c *ClientWithResponses) GetApiConditionWithResponse(ctx context.Context, params *GetApiConditionParams, reqEditors ...RequestEditorFn) (*GetApiConditionResponse, error) {
	rsp, err := c.GetApiCondition(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiConditionResponse(rsp)
}

// GetApiConditionConditionIdWithResponse request returning *GetApiConditionConditionIdResponse
func (c *ClientWithResponses) GetApiConditionConditionIdWithResponse(ctx context.Context, conditionId int, params *GetApiConditionConditionIdParams, reqEditors ...RequestEditorFn) (*GetApiConditionConditionIdResponse, error) {
	rsp, err := c.GetApiConditionConditionId(ctx, conditionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiConditionConditionIdResponse(rsp)
}

// GetApiCountryWithResponse request returning *GetApiCountryResponse
func (c *ClientWithResponses) GetApiCountryWithResponse(ctx context.Context, params *GetApiCountryParams, reqEditors ...RequestEditorFn) (*GetApiCountryResponse, error) {
	rsp, err := c.GetApiCountry(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCountryResponse(rsp)
}

// GetApiCountryCountryIdWithResponse request returning *GetApiCountryCountryIdResponse
func (c *ClientWithResponses) GetApiCountryCountryIdWithResponse(ctx context.Context, countryId int, params *GetApiCountryCountryIdParams, reqEditors ...RequestEditorFn) (*GetApiCountryCountryIdResponse, error) {
	rsp, err := c.GetApiCountryCountryId(ctx, countryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiCountryCountryIdResponse(rsp)
}

// GetApiDashboardPetWithResponse request returning *GetApiDashboardPetResponse
func (c *ClientWithResponses) GetApiDashboardPetWithResponse(ctx context.Context, params *GetApiDashboardPetParams, reqEditors ...RequestEditorFn) (*GetApiDashboardPetResponse, error) {
	rsp, err := c.GetApiDashboardPet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDashboardPetResponse(rsp)
}

// GetApiDeviceWithResponse request returning *GetApiDeviceResponse
func (c *ClientWithResponses) GetApiDeviceWithResponse(ctx context.Context, params *GetApiDeviceParams, reqEditors ...RequestEditorFn) (*GetApiDeviceResponse, error) {
	rsp, err := c.GetApiDevice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceResponse(rsp)
}

// GetApiDeviceNeedsUpdateWithResponse request returning *GetApiDeviceNeedsUpdateResponse
func (c *ClientWithResponses) GetApiDeviceNeedsUpdateWithResponse(ctx context.Context, params *GetApiDeviceNeedsUpdateParams, reqEditors ...RequestEditorFn) (*GetApiDeviceNeedsUpdateResponse, error) {
	rsp, err := c.GetApiDeviceNeedsUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceNeedsUpdateResponse(rsp)
}

// PostApiDevicePairHouseholdIdWithBodyWithResponse request with arbitrary body returning *PostApiDevicePairHouseholdIdResponse
func (c *ClientWithResponses) PostApiDevicePairHouseholdIdWithBodyWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error) {
	rsp, err := c.PostApiDevicePairHouseholdIdWithBody(ctx, householdId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDevicePairHouseholdIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiDevicePairHouseholdIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error) {
	rsp, err := c.PostApiDevicePairHouseholdIdWithApplicationWildcardPlusJSONBody(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDevicePairHouseholdIdResponse(rsp)
}

func (c *ClientWithResponses) PostApiDevicePairHouseholdIdWithResponse(ctx context.Context, householdId int, params *PostApiDevicePairHouseholdIdParams, body PostApiDevicePairHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDevicePairHouseholdIdResponse, error) {
	rsp, err := c.PostApiDevicePairHouseholdId(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDevicePairHouseholdIdResponse(rsp)
}

// GetApiDevicePairingWithResponse request returning *GetApiDevicePairingResponse
func (c *ClientWithResponses) GetApiDevicePairingWithResponse(ctx context.Context, params *GetApiDevicePairingParams, reqEditors ...RequestEditorFn) (*GetApiDevicePairingResponse, error) {
	rsp, err := c.GetApiDevicePairing(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDevicePairingResponse(rsp)
}

// DeleteApiDeviceDeviceIdWithResponse request returning *DeleteApiDeviceDeviceIdResponse
func (c *ClientWithResponses) DeleteApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *DeleteApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdResponse, error) {
	rsp, err := c.DeleteApiDeviceDeviceId(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDeviceDeviceIdResponse(rsp)
}

// GetApiDeviceDeviceIdWithResponse request returning *GetApiDeviceDeviceIdResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdResponse, error) {
	rsp, err := c.GetApiDeviceDeviceId(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdResponse(rsp)
}

// PutApiDeviceDeviceIdWithBodyWithResponse request with arbitrary body returning *PutApiDeviceDeviceIdResponse
func (c *ClientWithResponses) PutApiDeviceDeviceIdWithBodyWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdWithBody(ctx, deviceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdWithApplicationWildcardPlusJSONBody(ctx, deviceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdParams, body PutApiDeviceDeviceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceId(ctx, deviceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdResponse(rsp)
}

// GetApiDeviceDeviceIdControlWithResponse request returning *GetApiDeviceDeviceIdControlResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdControlWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdControl(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdControlResponse(rsp)
}

// PutApiDeviceDeviceIdControlWithResponse request returning *PutApiDeviceDeviceIdControlResponse
func (c *ClientWithResponses) PutApiDeviceDeviceIdControlWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlParams, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdControlResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdControl(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdControlResponse(rsp)
}

// PutApiDeviceDeviceIdControlAsyncWithResponse request returning *PutApiDeviceDeviceIdControlAsyncResponse
func (c *ClientWithResponses) PutApiDeviceDeviceIdControlAsyncWithResponse(ctx context.Context, deviceId int, params *PutApiDeviceDeviceIdControlAsyncParams, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdControlAsyncResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdControlAsync(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdControlAsyncResponse(rsp)
}

// GetApiDeviceDeviceIdControlStatusWithResponse request returning *GetApiDeviceDeviceIdControlStatusResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdControlStatusWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdControlStatusParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlStatusResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdControlStatus(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdControlStatusResponse(rsp)
}

// GetApiDeviceDeviceIdControlStatusRequestIdWithResponse request returning *GetApiDeviceDeviceIdControlStatusRequestIdResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdControlStatusRequestIdWithResponse(ctx context.Context, deviceId int, requestId openapi_types.UUID, params *GetApiDeviceDeviceIdControlStatusRequestIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdControlStatusRequestIdResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdControlStatusRequestId(ctx, deviceId, requestId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdControlStatusRequestIdResponse(rsp)
}

// PostApiDeviceDeviceIdPairHouseholdIdWithResponse request returning *PostApiDeviceDeviceIdPairHouseholdIdResponse
func (c *ClientWithResponses) PostApiDeviceDeviceIdPairHouseholdIdWithResponse(ctx context.Context, deviceId int, householdId int, params *PostApiDeviceDeviceIdPairHouseholdIdParams, reqEditors ...RequestEditorFn) (*PostApiDeviceDeviceIdPairHouseholdIdResponse, error) {
	rsp, err := c.PostApiDeviceDeviceIdPairHouseholdId(ctx, deviceId, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDeviceDeviceIdPairHouseholdIdResponse(rsp)
}

// GetApiDeviceDeviceIdStatusWithResponse request returning *GetApiDeviceDeviceIdStatusResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdStatusWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdStatusParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdStatusResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdStatus(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdStatusResponse(rsp)
}

// GetApiDeviceDeviceIdTagWithResponse request returning *GetApiDeviceDeviceIdTagResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdTagWithResponse(ctx context.Context, deviceId int, params *GetApiDeviceDeviceIdTagParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdTagResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdTag(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdTagResponse(rsp)
}

// DeleteApiDeviceDeviceIdTagTagIdWithResponse request returning *DeleteApiDeviceDeviceIdTagTagIdResponse
func (c *ClientWithResponses) DeleteApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdTagTagIdResponse, error) {
	rsp, err := c.DeleteApiDeviceDeviceIdTagTagId(ctx, deviceId, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDeviceDeviceIdTagTagIdResponse(rsp)
}

// GetApiDeviceDeviceIdTagTagIdWithResponse request returning *GetApiDeviceDeviceIdTagTagIdResponse
func (c *ClientWithResponses) GetApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *GetApiDeviceDeviceIdTagTagIdParams, reqEditors ...RequestEditorFn) (*GetApiDeviceDeviceIdTagTagIdResponse, error) {
	rsp, err := c.GetApiDeviceDeviceIdTagTagId(ctx, deviceId, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDeviceDeviceIdTagTagIdResponse(rsp)
}

// PutApiDeviceDeviceIdTagTagIdWithBodyWithResponse request with arbitrary body returning *PutApiDeviceDeviceIdTagTagIdResponse
func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdWithBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagIdWithBody(ctx, deviceId, tagId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagIdWithApplicationWildcardPlusJSONBody(ctx, deviceId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdParams, body PutApiDeviceDeviceIdTagTagIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagId(ctx, deviceId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdResponse(rsp)
}

// DeleteApiDeviceDeviceIdTagTagIdAsyncWithResponse request returning *DeleteApiDeviceDeviceIdTagTagIdAsyncResponse
func (c *ClientWithResponses) DeleteApiDeviceDeviceIdTagTagIdAsyncWithResponse(ctx context.Context, deviceId int, tagId int, params *DeleteApiDeviceDeviceIdTagTagIdAsyncParams, reqEditors ...RequestEditorFn) (*DeleteApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	rsp, err := c.DeleteApiDeviceDeviceIdTagTagIdAsync(ctx, deviceId, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDeviceDeviceIdTagTagIdAsyncResponse(rsp)
}

// PutApiDeviceDeviceIdTagTagIdAsyncWithBodyWithResponse request with arbitrary body returning *PutApiDeviceDeviceIdTagTagIdAsyncResponse
func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdAsyncWithBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagIdAsyncWithBody(ctx, deviceId, tagId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdAsyncResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdAsyncWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagIdAsyncWithApplicationWildcardPlusJSONBody(ctx, deviceId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdAsyncResponse(rsp)
}

func (c *ClientWithResponses) PutApiDeviceDeviceIdTagTagIdAsyncWithResponse(ctx context.Context, deviceId int, tagId int, params *PutApiDeviceDeviceIdTagTagIdAsyncParams, body PutApiDeviceDeviceIdTagTagIdAsyncJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	rsp, err := c.PutApiDeviceDeviceIdTagTagIdAsync(ctx, deviceId, tagId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDeviceDeviceIdTagTagIdAsyncResponse(rsp)
}

// GetApiFoodTypeWithResponse request returning *GetApiFoodTypeResponse
func (c *ClientWithResponses) GetApiFoodTypeWithResponse(ctx context.Context, params *GetApiFoodTypeParams, reqEditors ...RequestEditorFn) (*GetApiFoodTypeResponse, error) {
	rsp, err := c.GetApiFoodType(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFoodTypeResponse(rsp)
}

// GetApiFoodTypeFoodTypeIdWithResponse request returning *GetApiFoodTypeFoodTypeIdResponse
func (c *ClientWithResponses) GetApiFoodTypeFoodTypeIdWithResponse(ctx context.Context, foodTypeId int, params *GetApiFoodTypeFoodTypeIdParams, reqEditors ...RequestEditorFn) (*GetApiFoodTypeFoodTypeIdResponse, error) {
	rsp, err := c.GetApiFoodTypeFoodTypeId(ctx, foodTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiFoodTypeFoodTypeIdResponse(rsp)
}

// GetApiHouseholdWithResponse request returning *GetApiHouseholdResponse
func (c *ClientWithResponses) GetApiHouseholdWithResponse(ctx context.Context, params *GetApiHouseholdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdResponse, error) {
	rsp, err := c.GetApiHousehold(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdResponse(rsp)
}

// PostApiHouseholdWithBodyWithResponse request with arbitrary body returning *PostApiHouseholdResponse
func (c *ClientWithResponses) PostApiHouseholdWithBodyWithResponse(ctx context.Context, params *PostApiHouseholdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error) {
	rsp, err := c.PostApiHouseholdWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdResponse(rsp)
}

func (c *ClientWithResponses) PostApiHouseholdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error) {
	rsp, err := c.PostApiHouseholdWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdResponse(rsp)
}

func (c *ClientWithResponses) PostApiHouseholdWithResponse(ctx context.Context, params *PostApiHouseholdParams, body PostApiHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdResponse, error) {
	rsp, err := c.PostApiHousehold(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdResponse(rsp)
}

// DeleteApiHouseholdHouseholdIdWithResponse request returning *DeleteApiHouseholdHouseholdIdResponse
func (c *ClientWithResponses) DeleteApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *DeleteApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdResponse, error) {
	rsp, err := c.DeleteApiHouseholdHouseholdId(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiHouseholdHouseholdIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdWithResponse request returning *GetApiHouseholdHouseholdIdResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdId(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdResponse(rsp)
}

// PutApiHouseholdHouseholdIdWithBodyWithResponse request with arbitrary body returning *PutApiHouseholdHouseholdIdResponse
func (c *ClientWithResponses) PutApiHouseholdHouseholdIdWithBodyWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdWithBody(ctx, householdId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdWithApplicationWildcardPlusJSONBody(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *PutApiHouseholdHouseholdIdParams, body PutApiHouseholdHouseholdIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdId(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdDeviceWithResponse request returning *GetApiHouseholdHouseholdIdDeviceResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdDeviceWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdDeviceResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdDevice(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdDeviceResponse(rsp)
}

// GetApiHouseholdHouseholdIdDeviceDeviceIdWithResponse request returning *GetApiHouseholdHouseholdIdDeviceDeviceIdResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdDeviceDeviceIdWithResponse(ctx context.Context, householdId int, deviceId int, params *GetApiHouseholdHouseholdIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdDeviceDeviceIdResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdDeviceDeviceId(ctx, householdId, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdDeviceDeviceIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdInviteWithResponse request returning *GetApiHouseholdHouseholdIdInviteResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdInviteWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdInviteParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdInviteResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdInvite(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdInviteResponse(rsp)
}

// PostApiHouseholdHouseholdIdInviteWithBodyWithResponse request with arbitrary body returning *PostApiHouseholdHouseholdIdInviteResponse
func (c *ClientWithResponses) PostApiHouseholdHouseholdIdInviteWithBodyWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error) {
	rsp, err := c.PostApiHouseholdHouseholdIdInviteWithBody(ctx, householdId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdHouseholdIdInviteResponse(rsp)
}

func (c *ClientWithResponses) PostApiHouseholdHouseholdIdInviteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error) {
	rsp, err := c.PostApiHouseholdHouseholdIdInviteWithApplicationWildcardPlusJSONBody(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdHouseholdIdInviteResponse(rsp)
}

func (c *ClientWithResponses) PostApiHouseholdHouseholdIdInviteWithResponse(ctx context.Context, householdId int, params *PostApiHouseholdHouseholdIdInviteParams, body PostApiHouseholdHouseholdIdInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteResponse, error) {
	rsp, err := c.PostApiHouseholdHouseholdIdInvite(ctx, householdId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdHouseholdIdInviteResponse(rsp)
}

// DeleteApiHouseholdHouseholdIdInviteInviteIdWithResponse request returning *DeleteApiHouseholdHouseholdIdInviteInviteIdResponse
func (c *ClientWithResponses) DeleteApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *DeleteApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	rsp, err := c.DeleteApiHouseholdHouseholdIdInviteInviteId(ctx, householdId, inviteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiHouseholdHouseholdIdInviteInviteIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdInviteInviteIdWithResponse request returning *GetApiHouseholdHouseholdIdInviteInviteIdResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *GetApiHouseholdHouseholdIdInviteInviteIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdInviteInviteId(ctx, householdId, inviteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdInviteInviteIdResponse(rsp)
}

// PutApiHouseholdHouseholdIdInviteInviteIdWithBodyWithResponse request with arbitrary body returning *PutApiHouseholdHouseholdIdInviteInviteIdResponse
func (c *ClientWithResponses) PutApiHouseholdHouseholdIdInviteInviteIdWithBodyWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdInviteInviteIdWithBody(ctx, householdId, inviteId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdInviteInviteIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdInviteInviteIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdInviteInviteIdWithApplicationWildcardPlusJSONBody(ctx, householdId, inviteId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdInviteInviteIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdInviteInviteIdWithResponse(ctx context.Context, householdId int, inviteId int, params *PutApiHouseholdHouseholdIdInviteInviteIdParams, body PutApiHouseholdHouseholdIdInviteInviteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdInviteInviteId(ctx, householdId, inviteId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdInviteInviteIdResponse(rsp)
}

// PostApiHouseholdHouseholdIdInviteInviteIdResendWithResponse request returning *PostApiHouseholdHouseholdIdInviteInviteIdResendResponse
func (c *ClientWithResponses) PostApiHouseholdHouseholdIdInviteInviteIdResendWithResponse(ctx context.Context, householdId int, inviteId int, params *PostApiHouseholdHouseholdIdInviteInviteIdResendParams, reqEditors ...RequestEditorFn) (*PostApiHouseholdHouseholdIdInviteInviteIdResendResponse, error) {
	rsp, err := c.PostApiHouseholdHouseholdIdInviteInviteIdResend(ctx, householdId, inviteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHouseholdHouseholdIdInviteInviteIdResendResponse(rsp)
}

// GetApiHouseholdHouseholdIdPetWithResponse request returning *GetApiHouseholdHouseholdIdPetResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdPetWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdPetResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdPet(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdPetResponse(rsp)
}

// GetApiHouseholdHouseholdIdPetPetIdWithResponse request returning *GetApiHouseholdHouseholdIdPetPetIdResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdPetPetIdWithResponse(ctx context.Context, householdId int, petId int, params *GetApiHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdPetPetIdResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdPetPetId(ctx, householdId, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdPetPetIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdUserWithResponse request returning *GetApiHouseholdHouseholdIdUserResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdUserWithResponse(ctx context.Context, householdId int, params *GetApiHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdUserResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdUser(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdUserResponse(rsp)
}

// DeleteApiHouseholdHouseholdIdUserUserIdWithResponse request returning *DeleteApiHouseholdHouseholdIdUserUserIdResponse
func (c *ClientWithResponses) DeleteApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *DeleteApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*DeleteApiHouseholdHouseholdIdUserUserIdResponse, error) {
	rsp, err := c.DeleteApiHouseholdHouseholdIdUserUserId(ctx, householdId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiHouseholdHouseholdIdUserUserIdResponse(rsp)
}

// GetApiHouseholdHouseholdIdUserUserIdWithResponse request returning *GetApiHouseholdHouseholdIdUserUserIdResponse
func (c *ClientWithResponses) GetApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *GetApiHouseholdHouseholdIdUserUserIdParams, reqEditors ...RequestEditorFn) (*GetApiHouseholdHouseholdIdUserUserIdResponse, error) {
	rsp, err := c.GetApiHouseholdHouseholdIdUserUserId(ctx, householdId, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHouseholdHouseholdIdUserUserIdResponse(rsp)
}

// PutApiHouseholdHouseholdIdUserUserIdWithBodyWithResponse request with arbitrary body returning *PutApiHouseholdHouseholdIdUserUserIdResponse
func (c *ClientWithResponses) PutApiHouseholdHouseholdIdUserUserIdWithBodyWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdUserUserIdWithBody(ctx, householdId, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdUserUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdUserUserIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdUserUserIdWithApplicationWildcardPlusJSONBody(ctx, householdId, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdUserUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHouseholdHouseholdIdUserUserIdWithResponse(ctx context.Context, householdId int, userId int, params *PutApiHouseholdHouseholdIdUserUserIdParams, body PutApiHouseholdHouseholdIdUserUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error) {
	rsp, err := c.PutApiHouseholdHouseholdIdUserUserId(ctx, householdId, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHouseholdHouseholdIdUserUserIdResponse(rsp)
}

// GetApiInfoWithResponse request returning *GetApiInfoResponse
func (c *ClientWithResponses) GetApiInfoWithResponse(ctx context.Context, params *GetApiInfoParams, reqEditors ...RequestEditorFn) (*GetApiInfoResponse, error) {
	rsp, err := c.GetApiInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInfoResponse(rsp)
}

// GetApiInviteWithResponse request returning *GetApiInviteResponse
func (c *ClientWithResponses) GetApiInviteWithResponse(ctx context.Context, params *GetApiInviteParams, reqEditors ...RequestEditorFn) (*GetApiInviteResponse, error) {
	rsp, err := c.GetApiInvite(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInviteResponse(rsp)
}

// PostApiInviteInviteCodeAcceptWithResponse request returning *PostApiInviteInviteCodeAcceptResponse
func (c *ClientWithResponses) PostApiInviteInviteCodeAcceptWithResponse(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeAcceptParams, reqEditors ...RequestEditorFn) (*PostApiInviteInviteCodeAcceptResponse, error) {
	rsp, err := c.PostApiInviteInviteCodeAccept(ctx, inviteCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInviteInviteCodeAcceptResponse(rsp)
}

// PostApiInviteInviteCodeRejectWithResponse request returning *PostApiInviteInviteCodeRejectResponse
func (c *ClientWithResponses) PostApiInviteInviteCodeRejectWithResponse(ctx context.Context, inviteCode string, params *PostApiInviteInviteCodeRejectParams, reqEditors ...RequestEditorFn) (*PostApiInviteInviteCodeRejectResponse, error) {
	rsp, err := c.PostApiInviteInviteCodeReject(ctx, inviteCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiInviteInviteCodeRejectResponse(rsp)
}

// GetApiInviteInviteIdWithResponse request returning *GetApiInviteInviteIdResponse
func (c *ClientWithResponses) GetApiInviteInviteIdWithResponse(ctx context.Context, inviteId int, params *GetApiInviteInviteIdParams, reqEditors ...RequestEditorFn) (*GetApiInviteInviteIdResponse, error) {
	rsp, err := c.GetApiInviteInviteId(ctx, inviteId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiInviteInviteIdResponse(rsp)
}

// GetApiLanguageWithResponse request returning *GetApiLanguageResponse
func (c *ClientWithResponses) GetApiLanguageWithResponse(ctx context.Context, params *GetApiLanguageParams, reqEditors ...RequestEditorFn) (*GetApiLanguageResponse, error) {
	rsp, err := c.GetApiLanguage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLanguageResponse(rsp)
}

// GetApiLanguageLanguageIdWithResponse request returning *GetApiLanguageLanguageIdResponse
func (c *ClientWithResponses) GetApiLanguageLanguageIdWithResponse(ctx context.Context, languageId int, params *GetApiLanguageLanguageIdParams, reqEditors ...RequestEditorFn) (*GetApiLanguageLanguageIdResponse, error) {
	rsp, err := c.GetApiLanguageLanguageId(ctx, languageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiLanguageLanguageIdResponse(rsp)
}

// DeleteApiMeWithResponse request returning *DeleteApiMeResponse
func (c *ClientWithResponses) DeleteApiMeWithResponse(ctx context.Context, params *DeleteApiMeParams, reqEditors ...RequestEditorFn) (*DeleteApiMeResponse, error) {
	rsp, err := c.DeleteApiMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiMeResponse(rsp)
}

// GetApiMeWithResponse request returning *GetApiMeResponse
func (c *ClientWithResponses) GetApiMeWithResponse(ctx context.Context, params *GetApiMeParams, reqEditors ...RequestEditorFn) (*GetApiMeResponse, error) {
	rsp, err := c.GetApiMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMeResponse(rsp)
}

// PutApiMeWithBodyWithResponse request with arbitrary body returning *PutApiMeResponse
func (c *ClientWithResponses) PutApiMeWithBodyWithResponse(ctx context.Context, params *PutApiMeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error) {
	rsp, err := c.PutApiMeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMeResponse(rsp)
}

func (c *ClientWithResponses) PutApiMeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PutApiMeParams, body PutApiMeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error) {
	rsp, err := c.PutApiMeWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMeResponse(rsp)
}

func (c *ClientWithResponses) PutApiMeWithResponse(ctx context.Context, params *PutApiMeParams, body PutApiMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiMeResponse, error) {
	rsp, err := c.PutApiMe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMeResponse(rsp)
}

// PutApiMeAcceptTermsWithResponse request returning *PutApiMeAcceptTermsResponse
func (c *ClientWithResponses) PutApiMeAcceptTermsWithResponse(ctx context.Context, params *PutApiMeAcceptTermsParams, reqEditors ...RequestEditorFn) (*PutApiMeAcceptTermsResponse, error) {
	rsp, err := c.PutApiMeAcceptTerms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiMeAcceptTermsResponse(rsp)
}

// GetApiMeClientWithResponse request returning *GetApiMeClientResponse
func (c *ClientWithResponses) GetApiMeClientWithResponse(ctx context.Context, params *GetApiMeClientParams, reqEditors ...RequestEditorFn) (*GetApiMeClientResponse, error) {
	rsp, err := c.GetApiMeClient(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMeClientResponse(rsp)
}

// PostApiMeClientWithBodyWithResponse request with arbitrary body returning *PostApiMeClientResponse
func (c *ClientWithResponses) PostApiMeClientWithBodyWithResponse(ctx context.Context, params *PostApiMeClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error) {
	rsp, err := c.PostApiMeClientWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeClientResponse(rsp)
}

func (c *ClientWithResponses) PostApiMeClientWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error) {
	rsp, err := c.PostApiMeClientWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeClientResponse(rsp)
}

func (c *ClientWithResponses) PostApiMeClientWithResponse(ctx context.Context, params *PostApiMeClientParams, body PostApiMeClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeClientResponse, error) {
	rsp, err := c.PostApiMeClient(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeClientResponse(rsp)
}

// PostApiMeDeleteWithBodyWithResponse request with arbitrary body returning *PostApiMeDeleteResponse
func (c *ClientWithResponses) PostApiMeDeleteWithBodyWithResponse(ctx context.Context, params *PostApiMeDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error) {
	rsp, err := c.PostApiMeDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostApiMeDeleteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error) {
	rsp, err := c.PostApiMeDeleteWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostApiMeDeleteWithResponse(ctx context.Context, params *PostApiMeDeleteParams, body PostApiMeDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMeDeleteResponse, error) {
	rsp, err := c.PostApiMeDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMeDeleteResponse(rsp)
}

// GetApiMeStartWithResponse request returning *GetApiMeStartResponse
func (c *ClientWithResponses) GetApiMeStartWithResponse(ctx context.Context, params *GetApiMeStartParams, reqEditors ...RequestEditorFn) (*GetApiMeStartResponse, error) {
	rsp, err := c.GetApiMeStart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMeStartResponse(rsp)
}

// GetApiNotificationWithResponse request returning *GetApiNotificationResponse
func (c *ClientWithResponses) GetApiNotificationWithResponse(ctx context.Context, params *GetApiNotificationParams, reqEditors ...RequestEditorFn) (*GetApiNotificationResponse, error) {
	rsp, err := c.GetApiNotification(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiNotificationResponse(rsp)
}

// GetApiPetWithResponse request returning *GetApiPetResponse
func (c *ClientWithResponses) GetApiPetWithResponse(ctx context.Context, params *GetApiPetParams, reqEditors ...RequestEditorFn) (*GetApiPetResponse, error) {
	rsp, err := c.GetApiPet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetResponse(rsp)
}

// PostApiPetWithBodyWithResponse request with arbitrary body returning *PostApiPetResponse
func (c *ClientWithResponses) PostApiPetWithBodyWithResponse(ctx context.Context, params *PostApiPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error) {
	rsp, err := c.PostApiPetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetResponse(rsp)
}

func (c *ClientWithResponses) PostApiPetWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiPetParams, body PostApiPetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error) {
	rsp, err := c.PostApiPetWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetResponse(rsp)
}

func (c *ClientWithResponses) PostApiPetWithResponse(ctx context.Context, params *PostApiPetParams, body PostApiPetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetResponse, error) {
	rsp, err := c.PostApiPet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetResponse(rsp)
}

// GetApiPetPositionDeviceIdWithResponse request returning *GetApiPetPositionDeviceIdResponse
func (c *ClientWithResponses) GetApiPetPositionDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiPetPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPositionDeviceIdResponse, error) {
	rsp, err := c.GetApiPetPositionDeviceId(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPositionDeviceIdResponse(rsp)
}

// GetApiPetStatusDeviceIdWithResponse request returning *GetApiPetStatusDeviceIdResponse
func (c *ClientWithResponses) GetApiPetStatusDeviceIdWithResponse(ctx context.Context, deviceId int, params *GetApiPetStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetStatusDeviceIdResponse, error) {
	rsp, err := c.GetApiPetStatusDeviceId(ctx, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetStatusDeviceIdResponse(rsp)
}

// DeleteApiPetPetIdWithResponse request returning *DeleteApiPetPetIdResponse
func (c *ClientWithResponses) DeleteApiPetPetIdWithResponse(ctx context.Context, petId int, params *DeleteApiPetPetIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPetPetIdResponse, error) {
	rsp, err := c.DeleteApiPetPetId(ctx, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPetPetIdResponse(rsp)
}

// GetApiPetPetIdWithResponse request returning *GetApiPetPetIdResponse
func (c *ClientWithResponses) GetApiPetPetIdWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdResponse, error) {
	rsp, err := c.GetApiPetPetId(ctx, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdResponse(rsp)
}

// PutApiPetPetIdWithBodyWithResponse request with arbitrary body returning *PutApiPetPetIdResponse
func (c *ClientWithResponses) PutApiPetPetIdWithBodyWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error) {
	rsp, err := c.PutApiPetPetIdWithBody(ctx, petId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPetPetIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPetPetIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error) {
	rsp, err := c.PutApiPetPetIdWithApplicationWildcardPlusJSONBody(ctx, petId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPetPetIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPetPetIdWithResponse(ctx context.Context, petId int, params *PutApiPetPetIdParams, body PutApiPetPetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPetPetIdResponse, error) {
	rsp, err := c.PutApiPetPetId(ctx, petId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPetPetIdResponse(rsp)
}

// GetApiPetPetIdConditionWithResponse request returning *GetApiPetPetIdConditionResponse
func (c *ClientWithResponses) GetApiPetPetIdConditionWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdConditionParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdConditionResponse, error) {
	rsp, err := c.GetApiPetPetIdCondition(ctx, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdConditionResponse(rsp)
}

// DeleteApiPetPetIdConditionConditionIdWithResponse request returning *DeleteApiPetPetIdConditionConditionIdResponse
func (c *ClientWithResponses) DeleteApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *DeleteApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPetPetIdConditionConditionIdResponse, error) {
	rsp, err := c.DeleteApiPetPetIdConditionConditionId(ctx, petId, conditionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPetPetIdConditionConditionIdResponse(rsp)
}

// GetApiPetPetIdConditionConditionIdWithResponse request returning *GetApiPetPetIdConditionConditionIdResponse
func (c *ClientWithResponses) GetApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *GetApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdConditionConditionIdResponse, error) {
	rsp, err := c.GetApiPetPetIdConditionConditionId(ctx, petId, conditionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdConditionConditionIdResponse(rsp)
}

// PutApiPetPetIdConditionConditionIdWithResponse request returning *PutApiPetPetIdConditionConditionIdResponse
func (c *ClientWithResponses) PutApiPetPetIdConditionConditionIdWithResponse(ctx context.Context, petId int, conditionId int, params *PutApiPetPetIdConditionConditionIdParams, reqEditors ...RequestEditorFn) (*PutApiPetPetIdConditionConditionIdResponse, error) {
	rsp, err := c.PutApiPetPetIdConditionConditionId(ctx, petId, conditionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPetPetIdConditionConditionIdResponse(rsp)
}

// GetApiPetPetIdInsightWithResponse request returning *GetApiPetPetIdInsightResponse
func (c *ClientWithResponses) GetApiPetPetIdInsightWithResponse(ctx context.Context, petId int, params *GetApiPetPetIdInsightParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdInsightResponse, error) {
	rsp, err := c.GetApiPetPetIdInsight(ctx, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdInsightResponse(rsp)
}

// PostApiPetPetIdPositionWithBodyWithResponse request with arbitrary body returning *PostApiPetPetIdPositionResponse
func (c *ClientWithResponses) PostApiPetPetIdPositionWithBodyWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error) {
	rsp, err := c.PostApiPetPetIdPositionWithBody(ctx, petId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetPetIdPositionResponse(rsp)
}

func (c *ClientWithResponses) PostApiPetPetIdPositionWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error) {
	rsp, err := c.PostApiPetPetIdPositionWithApplicationWildcardPlusJSONBody(ctx, petId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetPetIdPositionResponse(rsp)
}

func (c *ClientWithResponses) PostApiPetPetIdPositionWithResponse(ctx context.Context, petId int, params *PostApiPetPetIdPositionParams, body PostApiPetPetIdPositionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiPetPetIdPositionResponse, error) {
	rsp, err := c.PostApiPetPetIdPosition(ctx, petId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPetPetIdPositionResponse(rsp)
}

// GetApiPetPetIdPositionDeviceIdWithResponse request returning *GetApiPetPetIdPositionDeviceIdResponse
func (c *ClientWithResponses) GetApiPetPetIdPositionDeviceIdWithResponse(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdPositionDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdPositionDeviceIdResponse, error) {
	rsp, err := c.GetApiPetPetIdPositionDeviceId(ctx, petId, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdPositionDeviceIdResponse(rsp)
}

// GetApiPetPetIdStatusDeviceIdWithResponse request returning *GetApiPetPetIdStatusDeviceIdResponse
func (c *ClientWithResponses) GetApiPetPetIdStatusDeviceIdWithResponse(ctx context.Context, petId int, deviceId int, params *GetApiPetPetIdStatusDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiPetPetIdStatusDeviceIdResponse, error) {
	rsp, err := c.GetApiPetPetIdStatusDeviceId(ctx, petId, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPetPetIdStatusDeviceIdResponse(rsp)
}

// GetApiPhotoWithResponse request returning *GetApiPhotoResponse
func (c *ClientWithResponses) GetApiPhotoWithResponse(ctx context.Context, params *GetApiPhotoParams, reqEditors ...RequestEditorFn) (*GetApiPhotoResponse, error) {
	rsp, err := c.GetApiPhoto(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPhotoResponse(rsp)
}

// PostApiPhotoWithBodyWithResponse request with arbitrary body returning *PostApiPhotoResponse
func (c *ClientWithResponses) PostApiPhotoWithBodyWithResponse(ctx context.Context, params *PostApiPhotoParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiPhotoResponse, error) {
	rsp, err := c.PostApiPhotoWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiPhotoResponse(rsp)
}

// DeleteApiPhotoPhotoIdWithResponse request returning *DeleteApiPhotoPhotoIdResponse
func (c *ClientWithResponses) DeleteApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *DeleteApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*DeleteApiPhotoPhotoIdResponse, error) {
	rsp, err := c.DeleteApiPhotoPhotoId(ctx, photoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPhotoPhotoIdResponse(rsp)
}

// GetApiPhotoPhotoIdWithResponse request returning *GetApiPhotoPhotoIdResponse
func (c *ClientWithResponses) GetApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *GetApiPhotoPhotoIdParams, reqEditors ...RequestEditorFn) (*GetApiPhotoPhotoIdResponse, error) {
	rsp, err := c.GetApiPhotoPhotoId(ctx, photoId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPhotoPhotoIdResponse(rsp)
}

// PutApiPhotoPhotoIdWithBodyWithResponse request with arbitrary body returning *PutApiPhotoPhotoIdResponse
func (c *ClientWithResponses) PutApiPhotoPhotoIdWithBodyWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error) {
	rsp, err := c.PutApiPhotoPhotoIdWithBody(ctx, photoId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPhotoPhotoIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPhotoPhotoIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error) {
	rsp, err := c.PutApiPhotoPhotoIdWithApplicationWildcardPlusJSONBody(ctx, photoId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPhotoPhotoIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiPhotoPhotoIdWithResponse(ctx context.Context, photoId int, params *PutApiPhotoPhotoIdParams, body PutApiPhotoPhotoIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiPhotoPhotoIdResponse, error) {
	rsp, err := c.PutApiPhotoPhotoId(ctx, photoId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPhotoPhotoIdResponse(rsp)
}

// GetApiPhotoPhotoIdImageImageHashWithResponse request returning *GetApiPhotoPhotoIdImageImageHashResponse
func (c *ClientWithResponses) GetApiPhotoPhotoIdImageImageHashWithResponse(ctx context.Context, photoId int, imageHash string, params *GetApiPhotoPhotoIdImageImageHashParams, reqEditors ...RequestEditorFn) (*GetApiPhotoPhotoIdImageImageHashResponse, error) {
	rsp, err := c.GetApiPhotoPhotoIdImageImageHash(ctx, photoId, imageHash, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPhotoPhotoIdImageImageHashResponse(rsp)
}

// GetApiProductWithResponse request returning *GetApiProductResponse
func (c *ClientWithResponses) GetApiProductWithResponse(ctx context.Context, params *GetApiProductParams, reqEditors ...RequestEditorFn) (*GetApiProductResponse, error) {
	rsp, err := c.GetApiProduct(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductResponse(rsp)
}

// GetApiProductProductIdWithResponse request returning *GetApiProductProductIdResponse
func (c *ClientWithResponses) GetApiProductProductIdWithResponse(ctx context.Context, productId int, params *GetApiProductProductIdParams, reqEditors ...RequestEditorFn) (*GetApiProductProductIdResponse, error) {
	rsp, err := c.GetApiProductProductId(ctx, productId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProductProductIdResponse(rsp)
}

// GetApiReportHouseholdHouseholdIdPetPetIdWithResponse request returning *GetApiReportHouseholdHouseholdIdPetPetIdResponse
func (c *ClientWithResponses) GetApiReportHouseholdHouseholdIdPetPetIdWithResponse(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdResponse, error) {
	rsp, err := c.GetApiReportHouseholdHouseholdIdPetPetId(ctx, householdId, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReportHouseholdHouseholdIdPetPetIdResponse(rsp)
}

// GetApiReportHouseholdHouseholdIdPetPetIdAggregateWithResponse request returning *GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse
func (c *ClientWithResponses) GetApiReportHouseholdHouseholdIdPetPetIdAggregateWithResponse(ctx context.Context, householdId int, petId int, params *GetApiReportHouseholdHouseholdIdPetPetIdAggregateParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse, error) {
	rsp, err := c.GetApiReportHouseholdHouseholdIdPetPetIdAggregate(ctx, householdId, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse(rsp)
}

// GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdWithResponse request returning *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse
func (c *ClientWithResponses) GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdWithResponse(ctx context.Context, householdId int, petId int, deviceId int, params *GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse, error) {
	rsp, err := c.GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceId(ctx, householdId, petId, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse(rsp)
}

// GetApiSpeciesWithResponse request returning *GetApiSpeciesResponse
func (c *ClientWithResponses) GetApiSpeciesWithResponse(ctx context.Context, params *GetApiSpeciesParams, reqEditors ...RequestEditorFn) (*GetApiSpeciesResponse, error) {
	rsp, err := c.GetApiSpecies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSpeciesResponse(rsp)
}

// GetApiSpeciesSpeciesIdWithResponse request returning *GetApiSpeciesSpeciesIdResponse
func (c *ClientWithResponses) GetApiSpeciesSpeciesIdWithResponse(ctx context.Context, speciesId int, params *GetApiSpeciesSpeciesIdParams, reqEditors ...RequestEditorFn) (*GetApiSpeciesSpeciesIdResponse, error) {
	rsp, err := c.GetApiSpeciesSpeciesId(ctx, speciesId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSpeciesSpeciesIdResponse(rsp)
}

// GetApiStartWithResponse request returning *GetApiStartResponse
func (c *ClientWithResponses) GetApiStartWithResponse(ctx context.Context, params *GetApiStartParams, reqEditors ...RequestEditorFn) (*GetApiStartResponse, error) {
	rsp, err := c.GetApiStart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiStartResponse(rsp)
}

// GetApiTagWithResponse request returning *GetApiTagResponse
func (c *ClientWithResponses) GetApiTagWithResponse(ctx context.Context, params *GetApiTagParams, reqEditors ...RequestEditorFn) (*GetApiTagResponse, error) {
	rsp, err := c.GetApiTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTagResponse(rsp)
}

// GetApiTagTagIdWithResponse request returning *GetApiTagTagIdResponse
func (c *ClientWithResponses) GetApiTagTagIdWithResponse(ctx context.Context, tagId int, params *GetApiTagTagIdParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdResponse, error) {
	rsp, err := c.GetApiTagTagId(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTagTagIdResponse(rsp)
}

// GetApiTagTagIdDeviceWithResponse request returning *GetApiTagTagIdDeviceResponse
func (c *ClientWithResponses) GetApiTagTagIdDeviceWithResponse(ctx context.Context, tagId int, params *GetApiTagTagIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdDeviceResponse, error) {
	rsp, err := c.GetApiTagTagIdDevice(ctx, tagId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTagTagIdDeviceResponse(rsp)
}

// GetApiTagTagIdDeviceDeviceIdWithResponse request returning *GetApiTagTagIdDeviceDeviceIdResponse
func (c *ClientWithResponses) GetApiTagTagIdDeviceDeviceIdWithResponse(ctx context.Context, tagId int, deviceId int, params *GetApiTagTagIdDeviceDeviceIdParams, reqEditors ...RequestEditorFn) (*GetApiTagTagIdDeviceDeviceIdResponse, error) {
	rsp, err := c.GetApiTagTagIdDeviceDeviceId(ctx, tagId, deviceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTagTagIdDeviceDeviceIdResponse(rsp)
}

// GetApiTimelineWithResponse request returning *GetApiTimelineResponse
func (c *ClientWithResponses) GetApiTimelineWithResponse(ctx context.Context, params *GetApiTimelineParams, reqEditors ...RequestEditorFn) (*GetApiTimelineResponse, error) {
	rsp, err := c.GetApiTimeline(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimelineResponse(rsp)
}

// GetApiTimelineHouseholdHouseholdIdWithResponse request returning *GetApiTimelineHouseholdHouseholdIdResponse
func (c *ClientWithResponses) GetApiTimelineHouseholdHouseholdIdWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdResponse, error) {
	rsp, err := c.GetApiTimelineHouseholdHouseholdId(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimelineHouseholdHouseholdIdResponse(rsp)
}

// GetApiTimelineHouseholdHouseholdIdDeviceWithResponse request returning *GetApiTimelineHouseholdHouseholdIdDeviceResponse
func (c *ClientWithResponses) GetApiTimelineHouseholdHouseholdIdDeviceWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdDeviceParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdDeviceResponse, error) {
	rsp, err := c.GetApiTimelineHouseholdHouseholdIdDevice(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimelineHouseholdHouseholdIdDeviceResponse(rsp)
}

// GetApiTimelineHouseholdHouseholdIdPetWithResponse request returning *GetApiTimelineHouseholdHouseholdIdPetResponse
func (c *ClientWithResponses) GetApiTimelineHouseholdHouseholdIdPetWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdPetParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdPetResponse, error) {
	rsp, err := c.GetApiTimelineHouseholdHouseholdIdPet(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimelineHouseholdHouseholdIdPetResponse(rsp)
}

// GetApiTimelineHouseholdHouseholdIdUserWithResponse request returning *GetApiTimelineHouseholdHouseholdIdUserResponse
func (c *ClientWithResponses) GetApiTimelineHouseholdHouseholdIdUserWithResponse(ctx context.Context, householdId int, params *GetApiTimelineHouseholdHouseholdIdUserParams, reqEditors ...RequestEditorFn) (*GetApiTimelineHouseholdHouseholdIdUserResponse, error) {
	rsp, err := c.GetApiTimelineHouseholdHouseholdIdUser(ctx, householdId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimelineHouseholdHouseholdIdUserResponse(rsp)
}

// GetApiTimezoneWithResponse request returning *GetApiTimezoneResponse
func (c *ClientWithResponses) GetApiTimezoneWithResponse(ctx context.Context, params *GetApiTimezoneParams, reqEditors ...RequestEditorFn) (*GetApiTimezoneResponse, error) {
	rsp, err := c.GetApiTimezone(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimezoneResponse(rsp)
}

// GetApiTimezoneTimezoneIdWithResponse request returning *GetApiTimezoneTimezoneIdResponse
func (c *ClientWithResponses) GetApiTimezoneTimezoneIdWithResponse(ctx context.Context, timezoneId int, params *GetApiTimezoneTimezoneIdParams, reqEditors ...RequestEditorFn) (*GetApiTimezoneTimezoneIdResponse, error) {
	rsp, err := c.GetApiTimezoneTimezoneId(ctx, timezoneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimezoneTimezoneIdResponse(rsp)
}

// GetApiTranslationWithResponse request returning *GetApiTranslationResponse
func (c *ClientWithResponses) GetApiTranslationWithResponse(ctx context.Context, params *GetApiTranslationParams, reqEditors ...RequestEditorFn) (*GetApiTranslationResponse, error) {
	rsp, err := c.GetApiTranslation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTranslationResponse(rsp)
}

// GetApiTranslationLanguageWithResponse request returning *GetApiTranslationLanguageResponse
func (c *ClientWithResponses) GetApiTranslationLanguageWithResponse(ctx context.Context, language string, params *GetApiTranslationLanguageParams, reqEditors ...RequestEditorFn) (*GetApiTranslationLanguageResponse, error) {
	rsp, err := c.GetApiTranslationLanguage(ctx, language, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTranslationLanguageResponse(rsp)
}

// GetApiUserUserIdWithResponse request returning *GetApiUserUserIdResponse
func (c *ClientWithResponses) GetApiUserUserIdWithResponse(ctx context.Context, userId int, params *GetApiUserUserIdParams, reqEditors ...RequestEditorFn) (*GetApiUserUserIdResponse, error) {
	rsp, err := c.GetApiUserUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUserUserIdResponse(rsp)
}

// ParseGetApiAnimoPetResponse parses an HTTP response from a GetApiAnimoPetWithResponse call
func ParseGetApiAnimoPetResponse(rsp *http.Response) (*GetApiAnimoPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAnimoPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnimoPetResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthChangePasswordResponse parses an HTTP response from a PostApiAuthChangePasswordWithResponse call
func ParsePostApiAuthChangePasswordResponse(rsp *http.Response) (*PostApiAuthChangePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthChangePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthLoginResponse parses an HTTP response from a PostApiAuthLoginWithResponse call
func ParsePostApiAuthLoginResponse(rsp *http.Response) (*PostApiAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthLogoutResponse parses an HTTP response from a PostApiAuthLogoutWithResponse call
func ParsePostApiAuthLogoutResponse(rsp *http.Response) (*PostApiAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthRegisterResponse parses an HTTP response from a PostApiAuthRegisterWithResponse call
func ParsePostApiAuthRegisterResponse(rsp *http.Response) (*PostApiAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthResetPasswordResponse parses an HTTP response from a PostApiAuthResetPasswordWithResponse call
func ParsePostApiAuthResetPasswordResponse(rsp *http.Response) (*PostApiAuthResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiAuthResetPasswordRequestResponse parses an HTTP response from a PostApiAuthResetPasswordRequestWithResponse call
func ParsePostApiAuthResetPasswordRequestResponse(rsp *http.Response) (*PostApiAuthResetPasswordRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthResetPasswordRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiBreedResponse parses an HTTP response from a GetApiBreedWithResponse call
func ParseGetApiBreedResponse(rsp *http.Response) (*GetApiBreedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBreedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BreedResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiBreedBreedIdResponse parses an HTTP response from a GetApiBreedBreedIdWithResponse call
func ParseGetApiBreedBreedIdResponse(rsp *http.Response) (*GetApiBreedBreedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiBreedBreedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BreedResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiConditionResponse parses an HTTP response from a GetApiConditionWithResponse call
func ParseGetApiConditionResponse(rsp *http.Response) (*GetApiConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConditionResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiConditionConditionIdResponse parses an HTTP response from a GetApiConditionConditionIdWithResponse call
func ParseGetApiConditionConditionIdResponse(rsp *http.Response) (*GetApiConditionConditionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiConditionConditionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConditionResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiCountryResponse parses an HTTP response from a GetApiCountryWithResponse call
func ParseGetApiCountryResponse(rsp *http.Response) (*GetApiCountryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCountryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountryResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiCountryCountryIdResponse parses an HTTP response from a GetApiCountryCountryIdWithResponse call
func ParseGetApiCountryCountryIdResponse(rsp *http.Response) (*GetApiCountryCountryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiCountryCountryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CountryResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDashboardPetResponse parses an HTTP response from a GetApiDashboardPetWithResponse call
func ParseGetApiDashboardPetResponse(rsp *http.Response) (*GetApiDashboardPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDashboardPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetDashboardResourceListDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceResponse parses an HTTP response from a GetApiDeviceWithResponse call
func ParseGetApiDeviceResponse(rsp *http.Response) (*GetApiDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceNeedsUpdateResponse parses an HTTP response from a GetApiDeviceNeedsUpdateWithResponse call
func ParseGetApiDeviceNeedsUpdateResponse(rsp *http.Response) (*GetApiDeviceNeedsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceNeedsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceNeedsUpdateResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiDevicePairHouseholdIdResponse parses an HTTP response from a PostApiDevicePairHouseholdIdWithResponse call
func ParsePostApiDevicePairHouseholdIdResponse(rsp *http.Response) (*PostApiDevicePairHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDevicePairHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDevicePairingResponse parses an HTTP response from a GetApiDevicePairingWithResponse call
func ParseGetApiDevicePairingResponse(rsp *http.Response) (*GetApiDevicePairingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDevicePairingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourceIEnumerableDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiDeviceDeviceIdResponse parses an HTTP response from a DeleteApiDeviceDeviceIdWithResponse call
func ParseDeleteApiDeviceDeviceIdResponse(rsp *http.Response) (*DeleteApiDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdResponse parses an HTTP response from a GetApiDeviceDeviceIdWithResponse call
func ParseGetApiDeviceDeviceIdResponse(rsp *http.Response) (*GetApiDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiDeviceDeviceIdResponse parses an HTTP response from a PutApiDeviceDeviceIdWithResponse call
func ParsePutApiDeviceDeviceIdResponse(rsp *http.Response) (*PutApiDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdControlResponse parses an HTTP response from a GetApiDeviceDeviceIdControlWithResponse call
func ParseGetApiDeviceDeviceIdControlResponse(rsp *http.Response) (*GetApiDeviceDeviceIdControlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceControlResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiDeviceDeviceIdControlResponse parses an HTTP response from a PutApiDeviceDeviceIdControlWithResponse call
func ParsePutApiDeviceDeviceIdControlResponse(rsp *http.Response) (*PutApiDeviceDeviceIdControlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDeviceDeviceIdControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceControlResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiDeviceDeviceIdControlAsyncResponse parses an HTTP response from a PutApiDeviceDeviceIdControlAsyncWithResponse call
func ParsePutApiDeviceDeviceIdControlAsyncResponse(rsp *http.Response) (*PutApiDeviceDeviceIdControlAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDeviceDeviceIdControlAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceControlResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdControlStatusResponse parses an HTTP response from a GetApiDeviceDeviceIdControlStatusWithResponse call
func ParseGetApiDeviceDeviceIdControlStatusResponse(rsp *http.Response) (*GetApiDeviceDeviceIdControlStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdControlStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceControlStateChangeResourceListDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdControlStatusRequestIdResponse parses an HTTP response from a GetApiDeviceDeviceIdControlStatusRequestIdWithResponse call
func ParseGetApiDeviceDeviceIdControlStatusRequestIdResponse(rsp *http.Response) (*GetApiDeviceDeviceIdControlStatusRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdControlStatusRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceControlStateChangeResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiDeviceDeviceIdPairHouseholdIdResponse parses an HTTP response from a PostApiDeviceDeviceIdPairHouseholdIdWithResponse call
func ParsePostApiDeviceDeviceIdPairHouseholdIdResponse(rsp *http.Response) (*PostApiDeviceDeviceIdPairHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDeviceDeviceIdPairHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdStatusResponse parses an HTTP response from a GetApiDeviceDeviceIdStatusWithResponse call
func ParseGetApiDeviceDeviceIdStatusResponse(rsp *http.Response) (*GetApiDeviceDeviceIdStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdTagResponse parses an HTTP response from a GetApiDeviceDeviceIdTagWithResponse call
func ParseGetApiDeviceDeviceIdTagResponse(rsp *http.Response) (*GetApiDeviceDeviceIdTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiDeviceDeviceIdTagTagIdResponse parses an HTTP response from a DeleteApiDeviceDeviceIdTagTagIdWithResponse call
func ParseDeleteApiDeviceDeviceIdTagTagIdResponse(rsp *http.Response) (*DeleteApiDeviceDeviceIdTagTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDeviceDeviceIdTagTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagDataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiDeviceDeviceIdTagTagIdResponse parses an HTTP response from a GetApiDeviceDeviceIdTagTagIdWithResponse call
func ParseGetApiDeviceDeviceIdTagTagIdResponse(rsp *http.Response) (*GetApiDeviceDeviceIdTagTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDeviceDeviceIdTagTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiDeviceDeviceIdTagTagIdResponse parses an HTTP response from a PutApiDeviceDeviceIdTagTagIdWithResponse call
func ParsePutApiDeviceDeviceIdTagTagIdResponse(rsp *http.Response) (*PutApiDeviceDeviceIdTagTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDeviceDeviceIdTagTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagDataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiDeviceDeviceIdTagTagIdAsyncResponse parses an HTTP response from a DeleteApiDeviceDeviceIdTagTagIdAsyncWithResponse call
func ParseDeleteApiDeviceDeviceIdTagTagIdAsyncResponse(rsp *http.Response) (*DeleteApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDeviceDeviceIdTagTagIdAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagDataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiDeviceDeviceIdTagTagIdAsyncResponse parses an HTTP response from a PutApiDeviceDeviceIdTagTagIdAsyncWithResponse call
func ParsePutApiDeviceDeviceIdTagTagIdAsyncResponse(rsp *http.Response) (*PutApiDeviceDeviceIdTagTagIdAsyncResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDeviceDeviceIdTagTagIdAsyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceTagDataResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiFoodTypeResponse parses an HTTP response from a GetApiFoodTypeWithResponse call
func ParseGetApiFoodTypeResponse(rsp *http.Response) (*GetApiFoodTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFoodTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FoodTypeResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiFoodTypeFoodTypeIdResponse parses an HTTP response from a GetApiFoodTypeFoodTypeIdWithResponse call
func ParseGetApiFoodTypeFoodTypeIdResponse(rsp *http.Response) (*GetApiFoodTypeFoodTypeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiFoodTypeFoodTypeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FoodTypeResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdResponse parses an HTTP response from a GetApiHouseholdWithResponse call
func ParseGetApiHouseholdResponse(rsp *http.Response) (*GetApiHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiHouseholdResponse parses an HTTP response from a PostApiHouseholdWithResponse call
func ParsePostApiHouseholdResponse(rsp *http.Response) (*PostApiHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HouseholdResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiHouseholdHouseholdIdResponse parses an HTTP response from a DeleteApiHouseholdHouseholdIdWithResponse call
func ParseDeleteApiHouseholdHouseholdIdResponse(rsp *http.Response) (*DeleteApiHouseholdHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiHouseholdHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdResponse parses an HTTP response from a GetApiHouseholdHouseholdIdWithResponse call
func ParseGetApiHouseholdHouseholdIdResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiHouseholdHouseholdIdResponse parses an HTTP response from a PutApiHouseholdHouseholdIdWithResponse call
func ParsePutApiHouseholdHouseholdIdResponse(rsp *http.Response) (*PutApiHouseholdHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiHouseholdHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdDeviceResponse parses an HTTP response from a GetApiHouseholdHouseholdIdDeviceWithResponse call
func ParseGetApiHouseholdHouseholdIdDeviceResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdDeviceDeviceIdResponse parses an HTTP response from a GetApiHouseholdHouseholdIdDeviceDeviceIdWithResponse call
func ParseGetApiHouseholdHouseholdIdDeviceDeviceIdResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdInviteResponse parses an HTTP response from a GetApiHouseholdHouseholdIdInviteWithResponse call
func ParseGetApiHouseholdHouseholdIdInviteResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdInviteResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiHouseholdHouseholdIdInviteResponse parses an HTTP response from a PostApiHouseholdHouseholdIdInviteWithResponse call
func ParsePostApiHouseholdHouseholdIdInviteResponse(rsp *http.Response) (*PostApiHouseholdHouseholdIdInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHouseholdHouseholdIdInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest HouseholdResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiHouseholdHouseholdIdInviteInviteIdResponse parses an HTTP response from a DeleteApiHouseholdHouseholdIdInviteInviteIdWithResponse call
func ParseDeleteApiHouseholdHouseholdIdInviteInviteIdResponse(rsp *http.Response) (*DeleteApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiHouseholdHouseholdIdInviteInviteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdInviteInviteIdResponse parses an HTTP response from a GetApiHouseholdHouseholdIdInviteInviteIdWithResponse call
func ParseGetApiHouseholdHouseholdIdInviteInviteIdResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdInviteInviteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdInviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiHouseholdHouseholdIdInviteInviteIdResponse parses an HTTP response from a PutApiHouseholdHouseholdIdInviteInviteIdWithResponse call
func ParsePutApiHouseholdHouseholdIdInviteInviteIdResponse(rsp *http.Response) (*PutApiHouseholdHouseholdIdInviteInviteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiHouseholdHouseholdIdInviteInviteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdInviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiHouseholdHouseholdIdInviteInviteIdResendResponse parses an HTTP response from a PostApiHouseholdHouseholdIdInviteInviteIdResendWithResponse call
func ParsePostApiHouseholdHouseholdIdInviteInviteIdResendResponse(rsp *http.Response) (*PostApiHouseholdHouseholdIdInviteInviteIdResendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHouseholdHouseholdIdInviteInviteIdResendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdInviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdPetResponse parses an HTTP response from a GetApiHouseholdHouseholdIdPetWithResponse call
func ParseGetApiHouseholdHouseholdIdPetResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdPetPetIdResponse parses an HTTP response from a GetApiHouseholdHouseholdIdPetPetIdWithResponse call
func ParseGetApiHouseholdHouseholdIdPetPetIdResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdPetPetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdPetPetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdUserResponse parses an HTTP response from a GetApiHouseholdHouseholdIdUserWithResponse call
func ParseGetApiHouseholdHouseholdIdUserResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdUserResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiHouseholdHouseholdIdUserUserIdResponse parses an HTTP response from a DeleteApiHouseholdHouseholdIdUserUserIdWithResponse call
func ParseDeleteApiHouseholdHouseholdIdUserUserIdResponse(rsp *http.Response) (*DeleteApiHouseholdHouseholdIdUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiHouseholdHouseholdIdUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiHouseholdHouseholdIdUserUserIdResponse parses an HTTP response from a GetApiHouseholdHouseholdIdUserUserIdWithResponse call
func ParseGetApiHouseholdHouseholdIdUserUserIdResponse(rsp *http.Response) (*GetApiHouseholdHouseholdIdUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHouseholdHouseholdIdUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdUserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiHouseholdHouseholdIdUserUserIdResponse parses an HTTP response from a PutApiHouseholdHouseholdIdUserUserIdWithResponse call
func ParsePutApiHouseholdHouseholdIdUserUserIdResponse(rsp *http.Response) (*PutApiHouseholdHouseholdIdUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiHouseholdHouseholdIdUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HouseholdUserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiInfoResponse parses an HTTP response from a GetApiInfoWithResponse call
func ParseGetApiInfoResponse(rsp *http.Response) (*GetApiInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InfoResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiInviteResponse parses an HTTP response from a GetApiInviteWithResponse call
func ParseGetApiInviteResponse(rsp *http.Response) (*GetApiInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiInviteInviteCodeAcceptResponse parses an HTTP response from a PostApiInviteInviteCodeAcceptWithResponse call
func ParsePostApiInviteInviteCodeAcceptResponse(rsp *http.Response) (*PostApiInviteInviteCodeAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInviteInviteCodeAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiInviteInviteCodeRejectResponse parses an HTTP response from a PostApiInviteInviteCodeRejectWithResponse call
func ParsePostApiInviteInviteCodeRejectResponse(rsp *http.Response) (*PostApiInviteInviteCodeRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiInviteInviteCodeRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiInviteInviteIdResponse parses an HTTP response from a GetApiInviteInviteIdWithResponse call
func ParseGetApiInviteInviteIdResponse(rsp *http.Response) (*GetApiInviteInviteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiInviteInviteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiLanguageResponse parses an HTTP response from a GetApiLanguageWithResponse call
func ParseGetApiLanguageResponse(rsp *http.Response) (*GetApiLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiLanguageLanguageIdResponse parses an HTTP response from a GetApiLanguageLanguageIdWithResponse call
func ParseGetApiLanguageLanguageIdResponse(rsp *http.Response) (*GetApiLanguageLanguageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiLanguageLanguageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LanguageResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiMeResponse parses an HTTP response from a DeleteApiMeWithResponse call
func ParseDeleteApiMeResponse(rsp *http.Response) (*DeleteApiMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiMeResponse parses an HTTP response from a GetApiMeWithResponse call
func ParseGetApiMeResponse(rsp *http.Response) (*GetApiMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiMeResponse parses an HTTP response from a PutApiMeWithResponse call
func ParsePutApiMeResponse(rsp *http.Response) (*PutApiMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiMeAcceptTermsResponse parses an HTTP response from a PutApiMeAcceptTermsWithResponse call
func ParsePutApiMeAcceptTermsResponse(rsp *http.Response) (*PutApiMeAcceptTermsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiMeAcceptTermsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiMeClientResponse parses an HTTP response from a GetApiMeClientWithResponse call
func ParseGetApiMeClientResponse(rsp *http.Response) (*GetApiMeClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMeClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserClientResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiMeClientResponse parses an HTTP response from a PostApiMeClientWithResponse call
func ParsePostApiMeClientResponse(rsp *http.Response) (*PostApiMeClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMeClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserClientResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiMeDeleteResponse parses an HTTP response from a PostApiMeDeleteWithResponse call
func ParsePostApiMeDeleteResponse(rsp *http.Response) (*PostApiMeDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMeDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiMeStartResponse parses an HTTP response from a GetApiMeStartWithResponse call
func ParseGetApiMeStartResponse(rsp *http.Response) (*GetApiMeStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMeStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeStartResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiNotificationResponse parses an HTTP response from a GetApiNotificationWithResponse call
func ParseGetApiNotificationResponse(rsp *http.Response) (*GetApiNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetResponse parses an HTTP response from a GetApiPetWithResponse call
func ParseGetApiPetResponse(rsp *http.Response) (*GetApiPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiPetResponse parses an HTTP response from a PostApiPetWithResponse call
func ParsePostApiPetResponse(rsp *http.Response) (*PostApiPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PetResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPositionDeviceIdResponse parses an HTTP response from a GetApiPetPositionDeviceIdWithResponse call
func ParseGetApiPetPositionDeviceIdResponse(rsp *http.Response) (*GetApiPetPositionDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPositionDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetPositionResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetStatusDeviceIdResponse parses an HTTP response from a GetApiPetStatusDeviceIdWithResponse call
func ParseGetApiPetStatusDeviceIdResponse(rsp *http.Response) (*GetApiPetStatusDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetStatusDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetStatusResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiPetPetIdResponse parses an HTTP response from a DeleteApiPetPetIdWithResponse call
func ParseDeleteApiPetPetIdResponse(rsp *http.Response) (*DeleteApiPetPetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPetPetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdResponse parses an HTTP response from a GetApiPetPetIdWithResponse call
func ParseGetApiPetPetIdResponse(rsp *http.Response) (*GetApiPetPetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiPetPetIdResponse parses an HTTP response from a PutApiPetPetIdWithResponse call
func ParsePutApiPetPetIdResponse(rsp *http.Response) (*PutApiPetPetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPetPetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdConditionResponse parses an HTTP response from a GetApiPetPetIdConditionWithResponse call
func ParseGetApiPetPetIdConditionResponse(rsp *http.Response) (*GetApiPetPetIdConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetConditionResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiPetPetIdConditionConditionIdResponse parses an HTTP response from a DeleteApiPetPetIdConditionConditionIdWithResponse call
func ParseDeleteApiPetPetIdConditionConditionIdResponse(rsp *http.Response) (*DeleteApiPetPetIdConditionConditionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPetPetIdConditionConditionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdConditionConditionIdResponse parses an HTTP response from a GetApiPetPetIdConditionConditionIdWithResponse call
func ParseGetApiPetPetIdConditionConditionIdResponse(rsp *http.Response) (*GetApiPetPetIdConditionConditionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdConditionConditionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetConditionResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiPetPetIdConditionConditionIdResponse parses an HTTP response from a PutApiPetPetIdConditionConditionIdWithResponse call
func ParsePutApiPetPetIdConditionConditionIdResponse(rsp *http.Response) (*PutApiPetPetIdConditionConditionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPetPetIdConditionConditionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetConditionResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdInsightResponse parses an HTTP response from a GetApiPetPetIdInsightWithResponse call
func ParseGetApiPetPetIdInsightResponse(rsp *http.Response) (*GetApiPetPetIdInsightResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdInsightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetInsightResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiPetPetIdPositionResponse parses an HTTP response from a PostApiPetPetIdPositionWithResponse call
func ParsePostApiPetPetIdPositionResponse(rsp *http.Response) (*PostApiPetPetIdPositionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPetPetIdPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PetPositionResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdPositionDeviceIdResponse parses an HTTP response from a GetApiPetPetIdPositionDeviceIdWithResponse call
func ParseGetApiPetPetIdPositionDeviceIdResponse(rsp *http.Response) (*GetApiPetPetIdPositionDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdPositionDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetPositionResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPetPetIdStatusDeviceIdResponse parses an HTTP response from a GetApiPetPetIdStatusDeviceIdWithResponse call
func ParseGetApiPetPetIdStatusDeviceIdResponse(rsp *http.Response) (*GetApiPetPetIdStatusDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPetPetIdStatusDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetStatusResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPhotoResponse parses an HTTP response from a GetApiPhotoWithResponse call
func ParseGetApiPhotoResponse(rsp *http.Response) (*GetApiPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhotoResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePostApiPhotoResponse parses an HTTP response from a PostApiPhotoWithResponse call
func ParsePostApiPhotoResponse(rsp *http.Response) (*PostApiPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PhotoResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteApiPhotoPhotoIdResponse parses an HTTP response from a DeleteApiPhotoPhotoIdWithResponse call
func ParseDeleteApiPhotoPhotoIdResponse(rsp *http.Response) (*DeleteApiPhotoPhotoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPhotoPhotoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPhotoPhotoIdResponse parses an HTTP response from a GetApiPhotoPhotoIdWithResponse call
func ParseGetApiPhotoPhotoIdResponse(rsp *http.Response) (*GetApiPhotoPhotoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPhotoPhotoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhotoResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePutApiPhotoPhotoIdResponse parses an HTTP response from a PutApiPhotoPhotoIdWithResponse call
func ParsePutApiPhotoPhotoIdResponse(rsp *http.Response) (*PutApiPhotoPhotoIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiPhotoPhotoIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhotoResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiPhotoPhotoIdImageImageHashResponse parses an HTTP response from a GetApiPhotoPhotoIdImageImageHashWithResponse call
func ParseGetApiPhotoPhotoIdImageImageHashResponse(rsp *http.Response) (*GetApiPhotoPhotoIdImageImageHashResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPhotoPhotoIdImageImageHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiProductResponse parses an HTTP response from a GetApiProductWithResponse call
func ParseGetApiProductResponse(rsp *http.Response) (*GetApiProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiProductProductIdResponse parses an HTTP response from a GetApiProductProductIdWithResponse call
func ParseGetApiProductProductIdResponse(rsp *http.Response) (*GetApiProductProductIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProductProductIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiReportHouseholdHouseholdIdPetPetIdResponse parses an HTTP response from a GetApiReportHouseholdHouseholdIdPetPetIdWithResponse call
func ParseGetApiReportHouseholdHouseholdIdPetPetIdResponse(rsp *http.Response) (*GetApiReportHouseholdHouseholdIdPetPetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReportHouseholdHouseholdIdPetPetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportHouseholdResourceListDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse parses an HTTP response from a GetApiReportHouseholdHouseholdIdPetPetIdAggregateWithResponse call
func ParseGetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse(rsp *http.Response) (*GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReportHouseholdHouseholdIdPetPetIdAggregateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportHouseholdResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse parses an HTTP response from a GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdWithResponse call
func ParseGetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse(rsp *http.Response) (*GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiReportHouseholdHouseholdIdPetPetIdDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportHouseholdResourceListDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiSpeciesResponse parses an HTTP response from a GetApiSpeciesWithResponse call
func ParseGetApiSpeciesResponse(rsp *http.Response) (*GetApiSpeciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSpeciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeciesResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiSpeciesSpeciesIdResponse parses an HTTP response from a GetApiSpeciesSpeciesIdWithResponse call
func ParseGetApiSpeciesSpeciesIdResponse(rsp *http.Response) (*GetApiSpeciesSpeciesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSpeciesSpeciesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeciesResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiStartResponse parses an HTTP response from a GetApiStartWithResponse call
func ParseGetApiStartResponse(rsp *http.Response) (*GetApiStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StartResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTagResponse parses an HTTP response from a GetApiTagWithResponse call
func ParseGetApiTagResponse(rsp *http.Response) (*GetApiTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTagTagIdResponse parses an HTTP response from a GetApiTagTagIdWithResponse call
func ParseGetApiTagTagIdResponse(rsp *http.Response) (*GetApiTagTagIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTagTagIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTagTagIdDeviceResponse parses an HTTP response from a GetApiTagTagIdDeviceWithResponse call
func ParseGetApiTagTagIdDeviceResponse(rsp *http.Response) (*GetApiTagTagIdDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTagTagIdDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagDeviceResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTagTagIdDeviceDeviceIdResponse parses an HTTP response from a GetApiTagTagIdDeviceDeviceIdWithResponse call
func ParseGetApiTagTagIdDeviceDeviceIdResponse(rsp *http.Response) (*GetApiTagTagIdDeviceDeviceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTagTagIdDeviceDeviceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagDeviceResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimelineResponse parses an HTTP response from a GetApiTimelineWithResponse call
func ParseGetApiTimelineResponse(rsp *http.Response) (*GetApiTimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimelineHouseholdHouseholdIdResponse parses an HTTP response from a GetApiTimelineHouseholdHouseholdIdWithResponse call
func ParseGetApiTimelineHouseholdHouseholdIdResponse(rsp *http.Response) (*GetApiTimelineHouseholdHouseholdIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimelineHouseholdHouseholdIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimelineHouseholdHouseholdIdDeviceResponse parses an HTTP response from a GetApiTimelineHouseholdHouseholdIdDeviceWithResponse call
func ParseGetApiTimelineHouseholdHouseholdIdDeviceResponse(rsp *http.Response) (*GetApiTimelineHouseholdHouseholdIdDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimelineHouseholdHouseholdIdDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimelineHouseholdHouseholdIdPetResponse parses an HTTP response from a GetApiTimelineHouseholdHouseholdIdPetWithResponse call
func ParseGetApiTimelineHouseholdHouseholdIdPetResponse(rsp *http.Response) (*GetApiTimelineHouseholdHouseholdIdPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimelineHouseholdHouseholdIdPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimelineHouseholdHouseholdIdUserResponse parses an HTTP response from a GetApiTimelineHouseholdHouseholdIdUserWithResponse call
func ParseGetApiTimelineHouseholdHouseholdIdUserResponse(rsp *http.Response) (*GetApiTimelineHouseholdHouseholdIdUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimelineHouseholdHouseholdIdUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimezoneResponse parses an HTTP response from a GetApiTimezoneWithResponse call
func ParseGetApiTimezoneResponse(rsp *http.Response) (*GetApiTimezoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimezoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimezoneResourcePaginatedDataResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTimezoneTimezoneIdResponse parses an HTTP response from a GetApiTimezoneTimezoneIdWithResponse call
func ParseGetApiTimezoneTimezoneIdResponse(rsp *http.Response) (*GetApiTimezoneTimezoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimezoneTimezoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimezoneResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTranslationResponse parses an HTTP response from a GetApiTranslationWithResponse call
func ParseGetApiTranslationResponse(rsp *http.Response) (*GetApiTranslationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTranslationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiTranslationLanguageResponse parses an HTTP response from a GetApiTranslationLanguageWithResponse call
func ParseGetApiTranslationLanguageResponse(rsp *http.Response) (*GetApiTranslationLanguageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTranslationLanguageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetApiUserUserIdResponse parses an HTTP response from a GetApiUserUserIdWithResponse call
func ParseGetApiUserUserIdResponse(rsp *http.Response) (*GetApiUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicUserResourceDataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ErrorResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
